
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass -l ./target/record1.lbl -L ./target/record1.lst -o ./target/record1 ./record1.tas
; Fri Oct 27 20:01:58 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ./record1.tas


;******  Processing file: ./geos.inc

=$01					a01 = $01
=$02					r0L = $02
=$03					r0H = $03
=$04					r1L = $04
=$05					r1H = $05
=$06					r2L = $06
=$07					r2H = $07
=$08					r3L = $08
=$09					r3H = $09
=$0a					r4L = $0A
=$0b					r4H = $0B
=$0c					r5L = $0C
=$0d					r5H = $0D
=$0e					r6L = $0E
=$0f					r6H = $0F
=$10					r7L = $10
=$11					r7H = $11
=$12					r8L = $12
=$13					r8H = $13
=$14					r9L = $14
=$15					r9H = $15
=$16					r10L = $16
=$17					r10H = $17
=$18					r11L = $18
=$19					r11H = $19
=$1a					r12L = $1A
=$1b					r12H = $1B
=$1c					r13L = $1C
=$1d					r13H = $1D
=$1e					r14L = $1E
=$1f					r14H = $1F
=$20					r15L = $20
=$21					r15H = $21
=$fb					a0	= $fb
=$fb					a0L	= $fb
=$fc					a0H	= $fc
=$fd					a1	= $fd
=$fd					a1L	= $fd
=$fe					a1H	= $fe
=$70					a2	= $70
=$70					a2L	= $70
=$71					a2H	= $71
=$72					a3	= $72
=$72					a3L	= $72
=$73					a3H	= $73
=$74					a4	= $74
=$74					a4L	= $74
=$75					a4H	= $75
=$76					a5	= $76
=$76					a5L	= $76
=$77					a5H	= $77
=$78					a6	= $78
=$78					a6L	= $78
=$79					a6H	= $79
=$7a					a7	= $7a
=$7a					a7L	= $7a
=$7b					a7H	= $7b
=$7c					a8	= $7c
=$7c					a8L	= $7c
=$7d					a8H	= $7d
=$7e					a9	= $7e
=$7e					a9L	= $7e
=$7f					a9H	= $7f
=$29					currentHeight   = $29
=$2f					displayBufferOn = $2F
=$35					leftMarginLo    = $35
=$36					leftMarginHi    = $36
=$37					rightMarginLo   = $37
=$38					rightMarginHi   = $38
=$3a					mouseXPosLo     = $3A
=$3b					mouseXPosHi     = $3B
=$3c					mouseYPos       = $3C
=$3d					returnAddressLo = $3D
=$3e					returnAddressHi = $3E
=$22					a22 = $22
=$23					a23 = $23
=$24					a24 = $24
=$25					a25 = $25
=$2e					a2E = $2E
=$34					a34 = $34
=$39					a39 = $39
=$70					a70 = $70
=$71					a71 = $71
=$72					a72 = $72
=$73					a73 = $73
=$74					a74 = $74
=$75					a75 = $75
=$76					a76 = $76
=$77					a77 = $77
=$78					a78 = $78
=$79					a79 = $79
=$7a					padViewMode = $7A
=$7b					a7B = $7B
=$7c					a7C = $7C
=$7d					a7D = $7D
=$7e					a7E = $7E
=$7f					a7F = $7F
=$85					a85 = $85
=$90					a90 = $90
=$fb					aFB = $FB
=$fc					aFC = $FC
=$fd					aFD = $FD
=$fe					aFE = $FE
=$6d00					dirBuffer_6d00  = $6D00
=$8000					diskBlkBuf      = $8000
=$8100					fileHeader      = $8100
=$8200					curDirHead      = $8200
=$8300					fileTrScTab     = $8300
=$8400					dirEntryBuf     = $8400
=$841e					DrACurDkNm      = $841E
=$8430					DrBCurDkNm      = $8430
=$8442					dataFileName    = $8442
=$8465					PrntFilename    = $8465
=$8476					BootDiskName    = $8476
=$8489					curDrive        = $8489
=$848a					diskOpenFlg     = $848A
=$848b					isGEOS          = $848B
=$848d					numDrives       = $848D
=$848e					driveType_8     = $848E
=$848f					driveType_9     = $848F
=$8490					driveType_10    = $8490
=$8491					driveType_11    = $8491
=$8498					fileWritten     = $8498
=$84b1					RecoverVector_LO= $84B1
=$84b2					RecoverVector_HI= $84B2
=$84b5					iconSelFlag     = $84B5
=$84b7					menuNumber      = $84B7
=$84b8					mouseTop        = $84B8
=$84b9					mouseBottom     = $84B9
=$84ba					mouseLeft_LO    = $84BA
=$84bb					mouseLeft_HI    = $84BB
=$84bc					mouseRight_LO   = $84BC
=$84bd					mouseRight_HI   = $84BD
=$8501					maxMouseSpeed   = $8501
=$8502					minMouseSpeed   = $8502
=$8503					mouseAccel      = $8503
=$8504					keyData         = $8504
=$850a					random          = $850A
=$8516					year            = $8516
=$8517					month           = $8517
=$8518					day             = $8518
=$8519					hour            = $8519
=$851a					minutes         = $851A
=$851b					seconds         = $851B
=$851e					screencolors    = $851E
=$88bf					driveData       = $88BF
=$88c3					ramExpSize      = $88C3
=$88c4					sysRAMFlg       = $88C4
=$88c6					curType         = $88C6
=$88cb					inputDevName    = $88CB
=$8900					dir2Head        = $8900
=$8a80					spr2pic         = $8A80
=$9048					AllocateBlock   = $9048
=$c000					BootGEOS        = $C000
=$c003					ResetHandle     = $C003
=$c00f					version         = $C00F
=$c100					InterruptMain   = $C100
=$c103					InitProcesses   = $C103
=$c106					RestartProcess  = $C106
=$c10c					BlockProcess    = $C10C
=$c118					HorizontalLine  = $C118
=$c11b					InvertLine      = $C11B
=$c121					VerticalLine    = $C121
=$c124					Rectangle       = $C124
=$c12a					InvertRectangle = $C12A
=$c139					SetPattern      = $C139
=$c13c					GetScanLine     = $C13C
=$c142					BitmapUp        = $C142
=$c145					PutChar         = $C145
=$c148					PutString       = $C148
=$c14b					UseSystemFont   = $C14B
=$c151					DoMenu          = $C151
=$c15a					DoIcons         = $C15A
=$c160					BBMult          = $C160
=$c169					Ddiv            = $C169
=$c178					ClearRam        = $C178
=$c17b					FillRam         = $C17B
=$c17e					MoveData        = $C17E
=$c181					InitRam         = $C181
=$c184					PutDecimal      = $C184
=$c18a					MouseUp         = $C18A
=$c18d					MouseOff        = $C18D
=$c190					DoPreviousMenu  = $C190
=$c193					ReDoMenu        = $C193
=$c196					GetSerialNumber = $C196
=$c19f					i_Rectangle     = $C19F
=$c1a2					i_FrameRectangle= $C1A2
=$c1a8					i_GraphicsString= $C1A8
=$c1b4					i_FillRam       = $C1B4
=$c1c6					DrawSprite      = $C1C6
=$c1c9					GetCharWidth    = $C1C9
=$c1cc					LoadCharSet     = $C1CC
=$c1cf					PosSprite       = $C1CF
=$c1d2					EnablSprite     = $C1D2
=$c1d5					DisablSprite    = $C1D5
=$c1d8					CallRoutine     = $C1D8
=$c1db					CalcBlksFree    = $C1DB
=$c1de					ChkDkGEOS       = $C1DE
=$c1e1					NewDisk         = $C1E1
=$c1e4					GetBlock        = $C1E4
=$c1e7					PutBlock        = $C1E7
=$c1ea					SetGEOSDisk     = $C1EA
=$c1f6					GetFreeDirBlk   = $C1F6
=$c1f9					WriteFile       = $C1F9
=$c1ff					ReadFile        = $C1FF
=$c208					GetFile         = $C208
=$c20b					FindFile        = $C20B
=$c20e					CRC             = $C20E
=$c214					EnterTurbo      = $C214
=$c217					LdDeskAcc       = $C217
=$c21a					ReadBlock       = $C21A
=$c21d					LdApplic        = $C21D
=$c220					WriteBlock      = $C220
=$c223					VerWriteBlock   = $C223
=$c226					FreeFile        = $C226
=$c229					GetFHdrInfo     = $C229
=$c22c					EnterDeskTop    = $C22C
=$c22f					StartAppl       = $C22F
=$c232					ExitTurbo       = $C232
=$c235					PurgeTurbo      = $C235
=$c238					DeleteFile      = $C238
=$c23b					FindFTypes      = $C23B
=$c241					ToBasic         = $C241
=$c247					GetDirHead      = $C247
=$c24a					PutDirHead      = $C24A
=$c24d					NxtBlkAlloc     = $C24D
=$c256					DoDlgBox        = $C256
=$c25c					InitForIO       = $C25C
=$c25f					DoneWithIO      = $C25F
=$c262					DShiftRight     = $C262
=$c268					CopyFString     = $C268
=$c26b					CmpString       = $C26B
=$c26e					CmpFString      = $C26E
=$c274					OpenRecordFile  = $C274
=$c280					PointRecord     = $C280
=$c28c					ReadRecord      = $C28C
=$c292					SetNextFree     = $C292
=$c2a1					OpenDisk        = $C2A1
=$c2a4					DoInlineReturn  = $C2A4
=$c2ad					FindBAMBit      = $C2AD
=$c2b0					SetDevice       = $C2B0
=$c2b3					IsMseInRegion   = $C2B3
=$c2b9					FreeBlock       = $C2B9
=$c2bc					ChangeDiskDevice= $C2BC
=$c2c8					StashRAM        = $C2C8
=$c2cb					FetchRAM        = $C2CB
=$c2ce					SwapRAM         = $C2CE
=$c2d1					VerifyRAM       = $C2D1
=$c2d4					DoRAMOp         = $C2D4
=$fe80					InitMouse       = $FE80

;******  Return to file: ./record1.tas


;******  Processing file: ./kernal.inc

=$ff93					ROM_SECOND  = $FF93
=$ff96					ROM_TKSA    = $FF96
=$ffa5					ROM_ACPTR   = $FFA5
=$ffa8					ROM_CIOUT   = $FFA8
=$ffab					ROM_UNTLK   = $FFAB
=$ffae					ROM_UNLSN   = $FFAE
=$ffb1					ROM_LISTEN  = $FFB1
=$ffb4					ROM_TALK    = $FFB4

;******  Return to file: ./record1.tas

=$00					f00 = $00
=$01					f01 = $01
=$c9					fC9 = $C9
=$00					p00 = $00
=$52					p52 = $52
=$55					p55 = $55
=$60					p60 = $60
=$80					p80 = $80
=$84					p84 = $84
=$0000					f0000 = $0000
=$0070					f0070 = $0070
=$00fb					f00FB = $00FB
=$01ff					f01FF = $01FF
=$0333					f0333 = $0333
=$03c3					f03C3 = $03C3
=$03c4					f03C4 = $03C4
=$0406					f0406 = $0406
=$0423					f0423 = $0423
=$0428					f0428 = $0428
=$04f7					f04F7 = $04F7
=$1876					f1876 = $1876
=$18b2					f18B2 = $18B2
=$18b3					f18B3 = $18B3
=$1942					f1942 = $1942
=$194c					f194C = $194C
=$6d25					f6D25 = $6D25
=$7d02					f7D02 = $7D02
=$7d03					f7D03 = $7D03
=$7e00					f7E00 = $7E00
=$7eff					f7EFF = $7EFF
=$7f00					f7F00 = $7F00
=$8008					f8008 = $8008
=$8486					f8486 = $8486
=$84c1					f84C1 = $84C1
=$8fe8					f8FE8 = $8FE8
=$9c80					f9C80 = $9C80
=$0184					a0184 = $0184
=$0200					a0200 = $0200
=$0248					a0248 = $0248
=$0249					a0249 = $0249
=$024a					a024A = $024A
=$024b					a024B = $024B
=$024c					a024C = $024C
=$024d					a024D = $024D
=$024e					a024E = $024E
=$024f					a024F = $024F
=$0250					a0250 = $0250
=$0251					a0251 = $0251
=$0252					a0252 = $0252
=$0253					a0253 = $0253
=$0254					a0254 = $0254
=$0255					a0255 = $0255
=$0256					a0256 = $0256
=$0257					a0257 = $0257
=$0258					a0258 = $0258
=$02a0					a02A0 = $02A0
=$02a9					a02A9 = $02A9
=$03a0					a03A0 = $03A0
=$03e6					a03E6 = $03E6
=$03e7					a03E7 = $03E7
=$03f2					a03F2 = $03F2
=$03f3					a03F3 = $03F3
=$03f4					a03F4 = $03F4
=$03f5					a03F5 = $03F5
=$03f6					a03F6 = $03F6
=$03f7					a03F7 = $03F7
=$03f8					a03F8 = $03F8
=$03f9					a03F9 = $03F9
=$03fa					a03FA = $03FA
=$03fb					a03FB = $03FB
=$03fc					a03FC = $03FC
=$03fd					a03FD = $03FD
=$03fe					a03FE = $03FE
=$03ff					a03FF = $03FF
=$0407					a0407 = $0407
=$0408					a0408 = $0408
=$0419					a0419 = $0419
=$041a					a041A = $041A
=$041b					a041B = $041B
=$0424					a0424 = $0424
=$04a0					a04A0 = $04A0
=$04e0					a04E0 = $04E0
=$04e1					a04E1 = $04E1
=$04e2					a04E2 = $04E2
=$04e3					a04E3 = $04E3
=$04e4					a04E4 = $04E4
=$04e5					a04E5 = $04E5
=$04e6					a04E6 = $04E6
=$04e7					a04E7 = $04E7
=$04e8					a04E8 = $04E8
=$04e9					a04E9 = $04E9
=$04ea					a04EA = $04EA
=$04eb					a04EB = $04EB
=$04ec					a04EC = $04EC
=$04ed					a04ED = $04ED
=$04ee					a04EE = $04EE
=$04ef					a04EF = $04EF
=$04f0					a04F0 = $04F0
=$04f1					a04F1 = $04F1
=$04f2					a04F2 = $04F2
=$04f3					a04F3 = $04F3
=$04f4					a04F4 = $04F4
=$04f5					a04F5 = $04F5
=$04f6					a04F6 = $04F6
=$0520					a0520 = $0520
=$0521					a0521 = $0521
=$0522					a0522 = $0522
=$0523					a0523 = $0523
=$0524					a0524 = $0524
=$0525					a0525 = $0525
=$05a0					a05A0 = $05A0
=$09a9					a09A9 = $09A9
=$0af0					a0AF0 = $0AF0
=$0af1					a0AF1 = $0AF1
=$1872					a1872 = $1872
=$1873					a1873 = $1873
=$1874					a1874 = $1874
=$1875					a1875 = $1875
=$1877					a1877 = $1877
=$1878					a1878 = $1878
=$1889					a1889 = $1889
=$188a					a188A = $188A
=$188b					a188B = $188B
=$1892					a1892 = $1892
=$1893					a1893 = $1893
=$1943					a1943 = $1943
=$1944					a1944 = $1944
=$1945					a1945 = $1945
=$1946					a1946 = $1946
=$1947					a1947 = $1947
=$1948					a1948 = $1948
=$1949					a1949 = $1949
=$194a					a194A = $194A
=$194d					a194D = $194D
=$194e					a194E = $194E
=$194f					a194F = $194F
=$1950					a1950 = $1950
=$1951					a1951 = $1951
=$1952					a1952 = $1952
=$1953					a1953 = $1953
=$1954					a1954 = $1954
=$6d03					a6D03 = $6D03
=$6d04					a6D04 = $6D04
=$6d23					a6D23 = $6D23
=$6d24					a6D24 = $6D24
=$6d38					a6D38 = $6D38
=$78a6					a78A6 = $78A6
=$8001					a8001 = $8001
=$8002					a8002 = $8002
=$8003					a8003 = $8003
=$8004					a8004 = $8004
=$8005					a8005 = $8005
=$8006					a8006 = $8006
=$8007					a8007 = $8007
=$8047					a8047 = $8047
=$8075					a8075 = $8075
=$8203					a8203 = $8203
=$82ab					a82AB = $82AB
=$82ac					a82AC = $82AC
=$82bd					a82BD = $82BD
=$82be					a82BE = $82BE
=$82bf					a82BF = $82BF
=$8301					a8301 = $8301
=$841c					a841C = $841C
=$841d					a841D = $841D
=$8505					a8505 = $8505
=$8c27					a8C27 = $8C27
=$8cc0					a8CC0 = $8CC0
=$8e88					a8E88 = $8E88
=$8ff0					a8FF0 = $8FF0
=$0001					p01 = $0001
=$0023					p23 = $0023
=$003f					p3F = $003F
=$0042					p42 = $0042
=$0068					p68 = $0068
=$0071					p71 = $0071
=$0088					p88 = $0088
=$00c0					pC0 = $00C0
=$00e3					pE3 = $00E3
=$00fd					pFD = $00FD
=$0102					p0102 = $0102
=$0105					p0105 = $0105
=$0106					p0106 = $0106
=$0108					p0108 = $0108
=$010e					p010E = $010E
=$0114					p0114 = $0114
=$011a					p011A = $011A
=$0123					p0123 = $0123
=$013f					p013F = $013F
=$0147					p0147 = $0147
=$0334					p0334 = $0334
=$0846					p0846 = $0846
=$0a00					p0A00 = $0A00
=$0a62					p0A62 = $0A62
=$0ae2					p0AE2 = $0AE2
=$0af2					p0AF2 = $0AF2
=$0d80					p0D80 = $0D80
=$1004					p1004 = $1004
=$1102					p1102 = $1102
=$1700					p1700 = $1700
=$1894					p1894 = $1894
=$6600					p6600 = $6600
=$7d00					p7D00 = $7D00
=$7f02					p7F02 = $7F02
=$8290					p8290 = $8290
=$8b0d					p8B0D = $8B0D
=$8b80					p8B80 = $8B80
=$8bbc					p8BBC = $8BBC
=$8bd0					p8BD0 = $8BD0
=$8be4					p8BE4 = $8BE4
=$9000					p9000 = $9000
=$b9b0					pB9B0 = $B9B0
=$c7b7					pC7B7 = $C7B7
=$fff8					pFFF8 = $FFF8
=$a352					eA352 = $A352
.1956	a9 00		lda #$00	s1956   LDA #$00
.1958	8d ee 04	sta $04ee	        STA a04EE
.195b	a4 fe		ldy $fe		        LDY aFE
.195d	b9 86 84	lda $8486,y	        LDA f8486,Y
.1960	30 06		bmi $1968	        BMI b1968
.1962	29 0f		and #$0f	        AND #$0F
.1964	c9 02		cmp #$02	        CMP #$02
.1966	d0 12		bne $197a	        BNE b197A
.1968	a4 70		ldy $70		b1968   LDY a70
.196a	b9 86 84	lda $8486,y	        LDA f8486,Y
.196d	30 06		bmi $1975	        BMI b1975
.196f	29 0f		and #$0f	        AND #$0F
.1971	c9 02		cmp #$02	        CMP #$02
.1973	d0 05		bne $197a	        BNE b197A
.1975	a9 07		lda #$07	b1975   LDA #$07
.1977	8d a0 1d	sta $1da0	        STA a1DA0
.197a	20 1e 23	jsr $231e	b197A   JSR s231E
.197d	20 04 1a	jsr $1a04	        JSR s1A04
.1980	8a		txa		        TXA
.1981	d0 20		bne $19a3	        BNE b19A3
.1983	20 12 1a	jsr $1a12	        JSR s1A12
.1986	18		clc		        CLC
.1987	a9 00		lda #$00	        LDA #$00
.1989	6d f4 03	adc $03f4	        ADC a03F4
.198c	8d f4 03	sta $03f4	        STA a03F4
.198f	a9 03		lda #$03	        LDA #$03
.1991	6d f5 03	adc $03f5	        ADC a03F5
.1994	8d f5 03	sta $03f5	        STA a03F5
.1997	20 c5 22	jsr $22c5	        JSR s22C5    ;save old RecoverVector, add new one (recover background behind menus and dialog boxes)
.199a	20 7c 1b	jsr $1b7c	        JSR s1B7C
.199d	20 04 1a	jsr $1a04	        JSR s1A04
.19a0	20 6b 1a	jsr $1a6b	        JSR s1A6B    ;called after copying desktop to another disk
.19a3	a9 08		lda #$08	b19A3   LDA #$08
.19a5	8d a0 1d	sta $1da0	        STA a1DA0
.19a8	b8		clv		        CLV
.19a9	50 53		bvc $19fe	        BVC b19FE
.19ab	8d ee 04	sta $04ee	s19AB   STA a04EE
.19ae	20 12 1a	jsr $1a12	        JSR s1A12
.19b1	a2 00		ldx #$00	        LDX #$00
.19b3	a4 70		ldy $70		        LDY a70
.19b5	20 3f 24	jsr $243f	        JSR s243F
.19b8	c9 04		cmp #$04	        CMP #$04
.19ba	b0 3f		bcs $19fb	        BCS b19FB
.19bc	20 f3 22	jsr $22f3	        JSR s22F3
.19bf	8a		txa		        TXA
.19c0	d0 39		bne $19fb	        BNE b19FB
.19c2	ad fb 03	lda $03fb	        LDA a03FB
.19c5	85 0f		sta $0f		        STA r6H      ;hi byte of filename
.19c7	ad fa 03	lda $03fa	        LDA a03FA
.19ca	85 0e		sta $0e		        STA r6L      ;lo byte of filename
.19cc	20 0b c2	jsr $c20b	        JSR FindFile ;search for file in directory
.19cf	8a		txa		        TXA          ;tranfer error code to A
.19d0	d0 29		bne $19fb	        BNE b19FB    ;if an error, skip ahead
.19d2	a2 0c		ldx #$0c	        LDX #$0C
.19d4	ad 00 84	lda $8400	        LDA dirEntryBuf
.19d7	29 0f		and #$0f	        AND #$0F
.19d9	c9 04		cmp #$04	        CMP #$04
.19db	f0 1e		beq $19fb	        BEQ b19FB
.19dd	ad 1d 84	lda $841d	        LDA a841D
.19e0	d0 0a		bne $19ec	        BNE b19EC
.19e2	ad 1c 84	lda $841c	        LDA a841C
.19e5	c9 18		cmp #$18	        CMP #$18
.19e7	b0 03		bcs $19ec	        BCS b19EC
.19e9	20 4f 1a	jsr $1a4f	        JSR s1A4F
.19ec	20 c5 22	jsr $22c5	b19EC   JSR s22C5    ;save old RecoverVector, add new one (recover background behind menus and dialog boxes)
.19ef	20 8a 1e	jsr $1e8a	        JSR s1E8A    ;write file, directory entry, BAM, and header
.19f2	20 04 1a	jsr $1a04	        JSR s1A04
.19f5	20 6b 1a	jsr $1a6b	        JSR s1A6B    ;called after copying desktop to another disk
.19f8	b8		clv		        CLV
.19f9	50 03		bvc $19fe	        BVC b19FE
.19fb	20 04 1a	jsr $1a04	b19FB   JSR s1A04
.19fe	a9 00		lda #$00	b19FE   LDA #$00
.1a00	8d ed 04	sta $04ed	        STA a04ED
.1a03	60		rts		        RTS
.1a04	8a		txa		s1A04   TXA
.1a05	f0 0a		beq $1a11	        BEQ b1A11
.1a07	c9 0c		cmp #$0c	        CMP #$0C
.1a09	f0 06		beq $1a11	        BEQ b1A11
.1a0b	48		pha		        PHA
.1a0c	20 9a 25	jsr $259a	        JSR s259A
.1a0f	68		pla		        PLA
.1a10	aa		tax		        TAX
.1a11	60		rts		b1A11   RTS
.1a12	a9 ff		lda #$ff	s1A12   LDA #$FF
.1a14	8d ed 04	sta $04ed	        STA a04ED
.1a17	20 4f 1a	jsr $1a4f	        JSR s1A4F
.1a1a	a5 fe		lda $fe		        LDA aFE
.1a1c	c5 70		cmp $70		        CMP a70
.1a1e	d0 29		bne $1a49	        BNE b1A49
.1a20	ad ee 04	lda $04ee	        LDA a04EE
.1a23	d0 24		bne $1a49	        BNE b1A49
.1a25	8d ed 04	sta $04ed	        STA a04ED
.1a28	8d ec 04	sta $04ec	        STA a04EC
.1a2b	8d 4d 02	sta $024d	        STA a024D
.1a2e	a9 28		lda #$28	        LDA #>p2808
.1a30	8d f3 03	sta $03f3	        STA a03F3
.1a33	a9 08		lda #$08	        LDA #<p2808
.1a35	8d f2 03	sta $03f2	        STA a03F2
.1a38	a9 54		lda #$54	        LDA #>p54F8
.1a3a	8d f5 03	sta $03f5	        STA a03F5
.1a3d	a9 f8		lda #$f8	        LDA #<p54F8
.1a3f	8d f4 03	sta $03f4	        STA a03F4
.1a42	a9 00		lda #$00	        LDA #$00
.1a44	85 7e		sta $7e		        STA a7E
.1a46	20 3d 56	jsr $563d	        JSR s563D
.1a49	a9 00		lda #$00	b1A49   LDA #$00
.1a4b	8d eb 04	sta $04eb	        STA a04EB
.1a4e	60		rts		        RTS
.1a4f	a9 ff		lda #$ff	s1A4F   LDA #$FF
.1a51	8d ec 04	sta $04ec	        STA a04EC
.1a54	a9 66		lda #$66	        LDA #>p6600
.1a56	8d f3 03	sta $03f3	        STA a03F3
.1a59	a9 00		lda #$00	        LDA #<p6600
.1a5b	8d f2 03	sta $03f2	        STA a03F2
.1a5e	a9 17		lda #$17	        LDA #>p1700
.1a60	8d f5 03	sta $03f5	        STA a03F5
.1a63	a9 00		lda #$00	        LDA #<p1700
.1a65	8d f4 03	sta $03f4	        STA a03F4
.1a68	4c 34 56	jmp $5634	        JMP j5634
.1a6b	8a		txa		s1A6B   TXA
.1a6c	48		pha		        PHA
.1a6d	ad ec 04	lda $04ec	        LDA a04EC
.1a70	d0 0e		bne $1a80	        BNE b1A80
.1a72	20 8e 1a	jsr $1a8e	b1A72   JSR s1A8E
.1a75	8a		txa		        TXA
.1a76	f0 08		beq $1a80	        BEQ b1A80
.1a78	a0 00		ldy #$00	        LDY #$00
.1a7a	20 6b 24	jsr $246b	        JSR s246B
.1a7d	b8		clv		        CLV
.1a7e	50 f2		bvc $1a72	        BVC b1A72
.1a80	20 dc 22	jsr $22dc	b1A80   JSR s22DC    ;restore old RecoverVector
.1a83	20 2e 56	jsr $562e	        JSR s562E
.1a86	a9 ff		lda #$ff	        LDA #$FF
.1a88	8d ec 04	sta $04ec	        STA a04EC
.1a8b	68		pla		        PLA
.1a8c	aa		tax		        TAX
.1a8d	60		rts		        RTS
.1a8e	20 a1 c2	jsr $c2a1	s1A8E   JSR OpenDisk    ; Open the disk in the current drive
.1a91	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1a94	20 ae 1a	jsr $1aae	        JSR s1AAE       ; Find "deskTop AM V2.0" on disk
.1a97	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1a9a	a5 11		lda $11		        LDA r7H
.1a9c	f0 04		beq $1aa2	        BEQ b1AA2
.1a9e	a2 05		ldx #$05	        LDX #$05
.1aa0	d0 0b		bne $1aad	        BNE b1AAD
.1aa2	a5 0d		lda $0d		b1AA2   LDA r5H
.1aa4	85 15		sta $15		        STA r9H
.1aa6	a5 0c		lda $0c		        LDA r5L
.1aa8	85 14		sta $14		        STA r9L
.1aaa	20 c2 1a	jsr $1ac2	        JSR s1AC2       ; Read file based on file header info
.1aad	60		rts		b1AAD   RTS
.1aae	20 74 25	jsr $2574	s1AAE   JSR s2574       ; set r10 to pointer of text "deskTop AM  V2.0"
.1ab1	a9 04		lda #$04	        LDA #$04
.1ab3	85 10		sta $10		        STA r7L         ; Search for SYSTEM ($04) file type
.1ab5	20 a1 c2	jsr $c2a1	s1AB5   JSR OpenDisk    ; Open the disk in the current drive
.1ab8	a9 01		lda #$01	        LDA #$01
.1aba	85 11		sta $11		        STA r7H         ; search for only one file
.1abc	20 6b 25	jsr $256b	        JSR s256B       ; load r6 with $8b80 address
.1abf	4c 3b c2	jmp $c23b	        JMP FindFTypes  ; Builds a list of files of a particular GEOS type from the current directory
.1ac2	20 29 c2	jsr $c229	s1AC2   JSR GetFHdrInfo ; Loads GEOS file header for a particular directory entry
.1ac5	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1ac8	a0 01		ldy #$01	        LDY #$01
.1aca	b1 14		lda ($14),y	        LDA (r9L),Y
.1acc	85 04		sta $04		        STA r1L
.1ace	c8		iny		        INY
.1acf	b1 14		lda ($14),y	        LDA (r9L),Y
.1ad1	85 05		sta $05		        STA r1H
.1ad3	20 e3 1d	jsr $1de3	        JSR s1DE3
.1ad6	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1ad9	ad 02 80	lda $8002	        LDA a8002
.1adc	85 04		sta $04		        STA r1L
.1ade	ad 03 80	lda $8003	        LDA a8003
.1ae1	85 05		sta $05		        STA r1H         ; track/sector of first data block (from $8002/03)
.1ae3	a9 ff		lda #$ff	        LDA #$FF
.1ae5	85 06		sta $06		        STA r2L         ; buffer size = $ffff (but readfile can only read 32258 bytes)
.1ae7	85 07		sta $07		        STA r2H
.1ae9	4c ff c1	jmp $c1ff	        JMP ReadFile
.1aec	ad 89 84	lda $8489	s1AEC   LDA curDrive
.1aef	49 01		eor #$01	        EOR #$01        ; toggles 8 and 9
.1af1	48		pha		s1AF1   PHA             ; save it
.1af2	20 b0 c2	jsr $c2b0	        JSR SetDevice   ; Establish communication with a new peripheral - switch to new drive number
.1af5	68		pla		        PLA             ; restore it
.1af6	c9 08		cmp #$08	        CMP #$08        ; compare with 8
.1af8	90 10		bcc $1b0a	        BCC b1B0A       ; jump ahead if the peripheral number is less than 8 (a printer?)
.1afa	cd f1 0a	cmp $0af1	        CMP a0AF1
.1afd	f0 0b		beq $1b0a	        BEQ b1B0A
.1aff	8d f1 0a	sta $0af1	        STA a0AF1
.1b02	ad f0 0a	lda $0af0	        LDA a0AF0
.1b05	f0 03		beq $1b0a	        BEQ b1B0A
.1b07	20 1c 1b	jsr $1b1c	        JSR s1B1C
.1b0a	ac 89 84	ldy $8489	b1B0A   LDY curDrive    ; y = current active disk drive number
.1b0d	b9 86 84	lda $8486,y	        LDA f8486,Y     ; get drive type
.1b10	8d c6 88	sta $88c6	        STA curType     ; store it in the current drive type
.1b13	a2 00		ldx #$00	        LDX #$00
.1b15	60		rts		        RTS
.1b16	20 f1 1a	jsr $1af1	s1B16   JSR s1AF1
.1b19	4c a1 c2	jmp $c2a1	        JMP OpenDisk    ; Open the disk in the current drive
.1b1c	20 22 1b	jsr $1b22	s1B1C   JSR s1B22
.1b1f	20 3c 1b	jsr $1b3c	        JSR s1B3C
.1b22	a0 05		ldy #$05	s1B22   LDY #$05
.1b24	b9 02 00	lda $0002,y	b1B24   LDA r0L,Y
.1b27	aa		tax		        TAX
.1b28	b9 36 1b	lda $1b36,y	        LDA f1B36,Y
.1b2b	99 02 00	sta $0002,y	        STA r0L,Y
.1b2e	8a		txa		        TXA
.1b2f	99 36 1b	sta $1b36,y	        STA f1B36,Y
.1b32	88		dey		        DEY
.1b33	10 ef		bpl $1b24	        BPL b1B24
.1b35	60		rts		        RTS
>1b36	00 90 f2 0a 80 0d		f1B36   .BYTE $00,$90,$F2,$0A,$80,$0D
.1b3c	a5 03		lda $03		s1B3C   LDA r0H
.1b3e	48		pha		        PHA
.1b3f	a5 05		lda $05		        LDA r1H
.1b41	48		pha		        PHA
.1b42	a5 07		lda $07		        LDA r2H
.1b44	48		pha		        PHA
.1b45	a0 00		ldy #$00	        LDY #$00
.1b47	a5 07		lda $07		b1B47   LDA r2H
.1b49	f0 16		beq $1b61	        BEQ b1B61
.1b4b	b1 02		lda ($02),y	b1B4B   LDA (r0L),Y
.1b4d	aa		tax		        TAX
.1b4e	b1 04		lda ($04),y	        LDA (r1L),Y
.1b50	91 02		sta ($02),y	        STA (r0L),Y
.1b52	8a		txa		        TXA
.1b53	91 04		sta ($04),y	        STA (r1L),Y
.1b55	c8		iny		        INY
.1b56	d0 f3		bne $1b4b	        BNE b1B4B
.1b58	e6 03		inc $03		        INC r0H
.1b5a	e6 05		inc $05		        INC r1H
.1b5c	c6 07		dec $07		        DEC r2H
.1b5e	b8		clv		        CLV
.1b5f	50 e6		bvc $1b47	        BVC b1B47
.1b61	c4 06		cpy $06		b1B61   CPY r2L
.1b63	f0 0d		beq $1b72	        BEQ b1B72
.1b65	b1 02		lda ($02),y	        LDA (r0L),Y
.1b67	aa		tax		        TAX
.1b68	b1 04		lda ($04),y	        LDA (r1L),Y
.1b6a	91 02		sta ($02),y	        STA (r0L),Y
.1b6c	8a		txa		        TXA
.1b6d	91 04		sta ($04),y	        STA (r1L),Y
.1b6f	c8		iny		        INY
.1b70	d0 ef		bne $1b61	        BNE b1B61
.1b72	68		pla		b1B72   PLA
.1b73	85 07		sta $07		        STA r2H
.1b75	68		pla		        PLA
.1b76	85 05		sta $05		        STA r1H
.1b78	68		pla		        PLA
.1b79	85 03		sta $03		        STA r0H
.1b7b	60		rts		        RTS
.1b7c	20 c4 1b	jsr $1bc4	s1B7C   JSR s1BC4
.1b7f	a9 ff		lda #$ff	        LDA #$FF
.1b81	20 fd 1c	jsr $1cfd	        JSR s1CFD    ;called when erasing a disk
.1b84	20 f8 1b	jsr $1bf8	b1B84   JSR s1BF8
.1b87	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.1b8a	20 2c 23	jsr $232c	        JSR s232C
.1b8d	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.1b90	20 63 1c	jsr $1c63	        JSR s1C63
.1b93	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.1b96	ad f4 04	lda $04f4	        LDA a04F4
.1b99	cd 22 05	cmp $0522	        CMP a0522
.1b9c	f0 02		beq $1ba0	        BEQ b1BA0
.1b9e	b0 07		bcs $1ba7	        BCS b1BA7
.1ba0	20 1e 23	jsr $231e	b1BA0   JSR s231E
.1ba3	8a		txa		        TXA
.1ba4	f0 de		beq $1b84	        BEQ b1B84
.1ba6	60		rts		b1BA6   RTS
.1ba7	ad 20 05	lda $0520	b1BA7   LDA a0520
.1baa	c9 01		cmp #$01	        CMP #$01
.1bac	d0 f8		bne $1ba6	        BNE b1BA6
.1bae	ad 21 05	lda $0521	        LDA a0521
.1bb1	c9 02		cmp #$02	        CMP #$02
.1bb3	d0 f1		bne $1ba6	        BNE b1BA6
.1bb5	8d 20 05	sta $0520	        STA a0520
.1bb8	20 47 c2	jsr $c247	        JSR GetDirHead
.1bbb	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1bbe	20 f0 1d	jsr $1df0	        JSR s1DF0
.1bc1	4c 4a c2	jmp $c24a	        JMP PutDirHead  ; write directory header and BAM to disk
.1bc4	ad f5 03	lda $03f5	s1BC4   LDA a03F5
.1bc7	85 09		sta $09		        STA r3H
.1bc9	ad f4 03	lda $03f4	        LDA a03F4
.1bcc	85 08		sta $08		        STA r3L
.1bce	a9 01		lda #$01	        LDA #>p0102
.1bd0	85 03		sta $03		        STA r0H
.1bd2	a9 02		lda #$02	        LDA #<p0102
.1bd4	85 02		sta $02		        STA r0L
.1bd6	a2 08		ldx #$08	        LDX #$08
.1bd8	a0 02		ldy #$02	        LDY #$02
.1bda	20 69 c1	jsr $c169	        JSR Ddiv
.1bdd	a5 08		lda $08		        LDA r3L
.1bdf	8d f1 04	sta $04f1	        STA a04F1
.1be2	06 08		asl $08		        ASL r3L
.1be4	26 09		rol $09		        ROL r3H
.1be6	ad f2 03	lda $03f2	        LDA a03F2
.1be9	18		clc		        CLC
.1bea	65 08		adc $08		        ADC r3L
.1bec	8d ef 04	sta $04ef	        STA a04EF
.1bef	ad f3 03	lda $03f3	        LDA a03F3
.1bf2	65 09		adc $09		        ADC r3H
.1bf4	8d f0 04	sta $04f0	        STA a04F0
.1bf7	60		rts		        RTS
.1bf8	20 14 c2	jsr $c214	s1BF8   JSR EnterTurbo  ; Activate disk drive turbo mode
.1bfb	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1bfe	20 5c c2	jsr $c25c	        JSR InitForIO   ; Prepare for IO across the serial bus
.1c01	20 4e 1c	jsr $1c4e	        JSR s1C4E       ; copy $03f2/f3 to r10 and $04ef/f0 to r11
.1c04	a9 00		lda #$00	        LDA #$00
.1c06	8d f2 04	sta $04f2	        STA a04F2
.1c09	ad f4 04	lda $04f4	b1C09   LDA a04F4
.1c0c	85 04		sta $04		        STA r1L         ; get TRACK from $04f4
.1c0e	cd 22 05	cmp $0522	        CMP a0522
.1c11	f0 02		beq $1c15	        BEQ b1C15
.1c13	b0 34		bcs $1c49	        BCS b1C49
.1c15	ad f3 04	lda $04f3	b1C15   LDA a04F3
.1c18	85 05		sta $05		        STA r1H         ; get SECTOR from $04f3
.1c1a	20 c0 1c	jsr $1cc0	        JSR s1CC0       ; copy r11 to r4
.1c1d	20 1a c2	jsr $c21a	        JSR ReadBlock   ; Very low level read block from disk
.1c20	8a		txa		        TXA
.1c21	d0 28		bne $1c4b	        BNE b1C4B
.1c23	a0 00		ldy #$00	        LDY #$00
.1c25	a5 04		lda $04		        LDA r1L
.1c27	91 16		sta ($16),y	        STA (r10L),Y
.1c29	c8		iny		        INY
.1c2a	a5 05		lda $05		        LDA r1H
.1c2c	91 16		sta ($16),y	        STA (r10L),Y
.1c2e	ee f2 04	inc $04f2	        INC a04F2
.1c31	20 41 25	jsr $2541	        JSR s2541       ; Add 2 to r10
.1c34	e6 19		inc $19		        INC r11H
.1c36	a9 30		lda #$30	        LDA #$30
.1c38	85 01		sta $01		        STA a01
.1c3a	20 21 1d	jsr $1d21	        JSR s1D21
.1c3d	a9 36		lda #$36	        LDA #$36
.1c3f	85 01		sta $01		        STA a01
.1c41	ad f2 04	lda $04f2	        LDA a04F2
.1c44	cd f1 04	cmp $04f1	        CMP a04F1
.1c47	90 c0		bcc $1c09	        BCC b1C09
.1c49	a2 00		ldx #$00	b1C49   LDX #$00
.1c4b	4c 5f c2	jmp $c25f	b1C4B   JMP DoneWithIO  ; restore system after IO across the serial bus
.1c4e	ad f3 03	lda $03f3	s1C4E   LDA a03F3
.1c51	85 17		sta $17		        STA r10H
.1c53	ad f2 03	lda $03f2	        LDA a03F2
.1c56	85 16		sta $16		        STA r10L
.1c58	ad f0 04	lda $04f0	        LDA a04F0
.1c5b	85 19		sta $19		        STA r11H
.1c5d	ad ef 04	lda $04ef	        LDA a04EF
.1c60	85 18		sta $18		        STA r11L
.1c62	60		rts		        RTS
.1c63	20 14 c2	jsr $c214	s1C63   JSR EnterTurbo  ; Activate disk drive turbo mode
.1c66	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1c69	8e f6 04	stx $04f6	        STX a04F6
.1c6c	20 5c c2	jsr $c25c	        JSR InitForIO   ; Prepare for IO across the serial bus
.1c6f	ad f2 04	lda $04f2	        LDA a04F2
.1c72	48		pha		        PHA
.1c73	20 86 1c	jsr $1c86	        JSR s1C86
.1c76	68		pla		        PLA
.1c77	8d f2 04	sta $04f2	        STA a04F2
.1c7a	8a		txa		        TXA
.1c7b	d0 06		bne $1c83	        BNE b1C83
.1c7d	ce f6 04	dec $04f6	        DEC a04F6
.1c80	20 86 1c	jsr $1c86	        JSR s1C86
.1c83	4c 5f c2	jmp $c25f	b1C83   JMP DoneWithIO  ; restore system after IO across the serial bus
.1c86	20 4e 1c	jsr $1c4e	s1C86   JSR s1C4E       ; copy $03f2/f3 to r10 and $04ef/f0 to r11
.1c89	ad f2 04	lda $04f2	b1C89   LDA a04F2
.1c8c	f0 2f		beq $1cbd	        BEQ b1CBD
.1c8e	a0 00		ldy #$00	        LDY #$00
.1c90	b1 16		lda ($16),y	        LDA (r10L),Y
.1c92	85 04		sta $04		        STA r1L         ; TRACK
.1c94	c8		iny		        INY
.1c95	b1 16		lda ($16),y	        LDA (r10L),Y
.1c97	85 05		sta $05		        STA r1H         ; SECTOR
.1c99	20 c9 1c	jsr $1cc9	        JSR s1CC9
.1c9c	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1c9f	20 c0 1c	jsr $1cc0	        JSR s1CC0       ; copy r11 to r4
.1ca2	ad f6 04	lda $04f6	        LDA a04F6
.1ca5	d0 06		bne $1cad	        BNE b1CAD
.1ca7	20 20 c2	jsr $c220	        JSR WriteBlock  ; Very low-level write block to disk
.1caa	b8		clv		        CLV
.1cab	50 03		bvc $1cb0	        BVC b1CB0
.1cad	20 23 c2	jsr $c223	b1CAD   JSR VerWriteBlock ; Very low level block on disk
.1cb0	20 3b 25	jsr $253b	b1CB0   JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1cb3	20 41 25	jsr $2541	        JSR s2541       ; Add 2 to r10
.1cb6	e6 19		inc $19		        INC r11H
.1cb8	ce f2 04	dec $04f2	        DEC a04F2
.1cbb	d0 cc		bne $1c89	        BNE b1C89
.1cbd	a2 00		ldx #$00	b1CBD   LDX #$00
.1cbf	60		rts		        RTS
.1cc0	a5 19		lda $19		s1CC0   LDA r11H
.1cc2	85 0b		sta $0b		        STA r4H
.1cc4	a5 18		lda $18		        LDA r11L
.1cc6	85 0a		sta $0a		        STA r4L
.1cc8	60		rts		        RTS
.1cc9	a5 04		lda $04		s1CC9   LDA r1L         ; TRACK
.1ccb	cd 23 05	cmp $0523	        CMP a0523
.1cce	d0 29		bne $1cf9	        BNE b1CF9
.1cd0	a5 05		lda $05		        LDA r1H         ; SECTOR
.1cd2	0d f6 04	ora $04f6	        ORA a04F6
.1cd5	d0 22		bne $1cf9	        BNE b1CF9
.1cd7	20 4d 25	jsr $254d	        JSR s254D       ; point r4 at diskBlkBuf
.1cda	20 1a c2	jsr $c21a	        JSR ReadBlock   ; Very low level read block from disk
.1cdd	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1ce0	a0 90		ldy #$90	        LDY #$90
.1ce2	a2 13		ldx #$13	        LDX #$13
.1ce4	b9 00 80	lda $8000,y	b1CE4   LDA diskBlkBuf,Y
.1ce7	91 18		sta ($18),y	        STA (r11L),Y
.1ce9	c8		iny		        INY
.1cea	ca		dex		        DEX
.1ceb	10 f7		bpl $1ce4	        BPL b1CE4
.1ced	a0 bd		ldy #$bd	        LDY #$BD
.1cef	a9 00		lda #$00	        LDA #$00
.1cf1	91 18		sta ($18),y	        STA (r11L),Y
.1cf3	c8		iny		        INY
.1cf4	91 18		sta ($18),y	        STA (r11L),Y
.1cf6	c8		iny		        INY
.1cf7	91 18		sta ($18),y	        STA (r11L),Y
.1cf9	a2 00		ldx #$00	b1CF9   LDX #$00
.1cfb	60		rts		        RTS
>1cfc	00				a1CFC   .BYTE $00
.1cfd	8d fc 1c	sta $1cfc	s1CFD   STA a1CFC
.1d00	ac 20 05	ldy $0520	        LDY a0520
.1d03	b9 34 1d	lda $1d34,y	        LDA f1D34,Y
.1d06	8d 22 05	sta $0522	        STA a0522
.1d09	b9 38 1d	lda $1d38,y	        LDA f1D38,Y
.1d0c	8d 23 05	sta $0523	        STA a0523
.1d0f	b9 3c 1d	lda $1d3c,y	        LDA f1D3C,Y
.1d12	8d 24 05	sta $0524	        STA a0524
.1d15	a0 01		ldy #$01	        LDY #$01
.1d17	8c f4 04	sty $04f4	        STY a04F4
.1d1a	88		dey		        DEY
.1d1b	8c f3 04	sty $04f3	        STY a04F3
.1d1e	20 40 1d	jsr $1d40	b1D1E   JSR s1D40
.1d21	20 a1 1d	jsr $1da1	s1D21   JSR s1DA1
.1d24	90 0d		bcc $1d33	        BCC b1D33
.1d26	ee f4 04	inc $04f4	        INC a04F4
.1d29	ad f4 04	lda $04f4	        LDA a04F4
.1d2c	cd 22 05	cmp $0522	        CMP a0522
.1d2f	90 ed		bcc $1d1e	        BCC b1D1E
.1d31	f0 eb		beq $1d1e	        BEQ b1D1E
.1d33	60		rts		b1D33   RTS
>1d34	23 23				f1D34   .BYTE $23,$23
>1d36	46 50				        .BYTE $46,$50
>1d38	12 12 12 28			f1D38   .BYTE $12,$12,$12,$28
>1d3c	01 01 01 03			f1D3C   .BYTE $01,$01,$01,$03
.1d40	a0 27		ldy #$27	s1D40   LDY #$27
.1d42	a9 00		lda #$00	        LDA #$00
.1d44	99 f7 04	sta $04f7,y	b1D44   STA f04F7,Y
.1d47	88		dey		        DEY
.1d48	10 fa		bpl $1d44	        BPL b1D44
.1d4a	ad 20 05	lda $0520	        LDA a0520
.1d4d	c9 03		cmp #$03	        CMP #$03
.1d4f	d0 07		bne $1d58	        BNE b1D58
.1d51	a9 28		lda #$28	        LDA #$28
.1d53	8d f5 04	sta $04f5	        STA a04F5
.1d56	d0 20		bne $1d78	        BNE b1D78
.1d58	ad f4 04	lda $04f4	b1D58   LDA a04F4
.1d5b	c9 24		cmp #$24	        CMP #$24
.1d5d	90 03		bcc $1d62	        BCC b1D62
.1d5f	38		sec		        SEC
.1d60	e9 23		sbc #$23	        SBC #$23
.1d62	20 7b 1e	jsr $1e7b	b1D62   JSR s1E7B
.1d65	bd 9c 1d	lda $1d9c,x	        LDA f1D9C,X
.1d68	8d f5 04	sta $04f5	        STA a04F5
.1d6b	a8		tay		        TAY
.1d6c	c0 15		cpy #$15	b1D6C   CPY #$15
.1d6e	f0 08		beq $1d78	        BEQ b1D78
.1d70	a9 ff		lda #$ff	        LDA #$FF
.1d72	99 f7 04	sta $04f7,y	        STA f04F7,Y
.1d75	c8		iny		        INY
.1d76	d0 f4		bne $1d6c	        BNE b1D6C
.1d78	ad fc 1c	lda $1cfc	b1D78   LDA a1CFC
.1d7b	f0 1e		beq $1d9b	        BEQ b1D9B
.1d7d	ad f4 04	lda $04f4	        LDA a04F4
.1d80	85 0e		sta $0e		        STA r6L         ; TRACK number of block
.1d82	a9 00		lda #$00	        LDA #$00
.1d84	85 0f		sta $0f		        STA r6H         ; SECTOR number of block
.1d86	20 ad c2	jsr $c2ad	b1D86   JSR FindBAMBit  ; Get disk block allocation status
.1d89	f0 07		beq $1d92	        BEQ b1D92
.1d8b	a4 0f		ldy $0f		        LDY r6H
.1d8d	a9 ff		lda #$ff	        LDA #$FF
.1d8f	99 f7 04	sta $04f7,y	        STA f04F7,Y
.1d92	e6 0f		inc $0f		b1D92   INC r6H
.1d94	a5 0f		lda $0f		        LDA r6H
.1d96	cd f5 04	cmp $04f5	        CMP a04F5
.1d99	90 eb		bcc $1d86	        BCC b1D86
.1d9b	60		rts		b1D9B   RTS
>1d9c	15 13 12 11			f1D9C   .BYTE $15,$13,$12,$11
>1da0	08				a1DA0   .BYTE $08
.1da1	ad a0 1d	lda $1da0	s1DA1   LDA a1DA0
.1da4	18		clc		        CLC
.1da5	6d f3 04	adc $04f3	        ADC a04F3
.1da8	cd f5 04	cmp $04f5	        CMP a04F5
.1dab	90 04		bcc $1db1	        BCC b1DB1
.1dad	38		sec		        SEC
.1dae	ed f5 04	sbc $04f5	        SBC a04F5
.1db1	a8		tay		b1DB1   TAY
.1db2	b9 f7 04	lda $04f7,y	        LDA f04F7,Y
.1db5	f0 19		beq $1dd0	        BEQ b1DD0
.1db7	ae f5 04	ldx $04f5	        LDX a04F5
.1dba	c8		iny		b1DBA   INY
.1dbb	cc f5 04	cpy $04f5	        CPY a04F5
.1dbe	90 06		bcc $1dc6	        BCC b1DC6
.1dc0	98		tya		        TYA
.1dc1	38		sec		        SEC
.1dc2	ed f5 04	sbc $04f5	        SBC a04F5
.1dc5	a8		tay		        TAY
.1dc6	b9 f7 04	lda $04f7,y	b1DC6   LDA f04F7,Y
.1dc9	f0 05		beq $1dd0	        BEQ b1DD0
.1dcb	ca		dex		        DEX
.1dcc	10 ec		bpl $1dba	        BPL b1DBA
.1dce	38		sec		        SEC
.1dcf	60		rts		        RTS
.1dd0	8c f3 04	sty $04f3	b1DD0   STY a04F3
.1dd3	a9 ff		lda #$ff	        LDA #$FF
.1dd5	99 f7 04	sta $04f7,y	        STA f04F7,Y
.1dd8	18		clc		        CLC
.1dd9	60		rts		        RTS
.1dda	b1 0c		lda ($0c),y	s1DDA   LDA (r5L),Y
.1ddc	85 04		sta $04		        STA r1L         ; TRACK
.1dde	c8		iny		        INY
.1ddf	b1 0c		lda ($0c),y	        LDA (r5L),Y
.1de1	85 05		sta $05		        STA r1H         ; SECTOR
.1de3	20 4d 25	jsr $254d	s1DE3   JSR s254D       ; point r4 at diskBlkBuf
.1de6	4c e4 c1	jmp $c1e4	        JMP GetBlock    ; General purpose routine to get a block from the current disk
.1de9	20 4d 25	jsr $254d	j1DE9   JSR s254D       ; point r4 at diskBlkBuf
.1dec	4c e7 c1	jmp $c1e7	        JMP PutBlock    ; General purpose routine to write a block to disk with verify
>1def	00				a1DEF   .BYTE $00
.1df0	a9 24		lda #$24	s1DF0   LDA #$24
.1df2	d0 0e		bne $1e02	        BNE b1E02
.1df4	a0 04		ldy #$04	        LDY #$04
.1df6	a9 00		lda #$00	        LDA #$00
.1df8	99 00 82	sta $8200,y	b1DF8   STA curDirHead,Y
.1dfb	c8		iny		        INY
.1dfc	c0 90		cpy #$90	        CPY #$90
.1dfe	d0 f8		bne $1df8	        BNE b1DF8
.1e00	a9 01		lda #$01	        LDA #$01
.1e02	8d ef 1d	sta $1def	b1E02   STA a1DEF
.1e05	a0 dd		ldy #$dd	        LDY #$DD
.1e07	a9 00		lda #$00	        LDA #$00
.1e09	99 00 82	sta $8200,y	b1E09   STA curDirHead,Y
.1e0c	c8		iny		        INY
.1e0d	d0 fa		bne $1e09	        BNE b1E09
.1e0f	ac 20 05	ldy $0520	        LDY a0520
.1e12	c0 02		cpy #$02	        CPY #$02
.1e14	90 17		bcc $1e2d	        BCC b1E2D
.1e16	d0 0a		bne $1e22	        BNE b1E22
.1e18	a0 00		ldy #$00	        LDY #$00
.1e1a	99 00 89	sta $8900,y	b1E1A   STA dir2Head,Y
.1e1d	c8		iny		        INY
.1e1e	d0 fa		bne $1e1a	        BNE b1E1A
.1e20	f0 0b		beq $1e2d	        BEQ b1E2D
.1e22	a0 10		ldy #$10	b1E22   LDY #$10
.1e24	99 00 89	sta $8900,y	b1E24   STA dir2Head,Y
.1e27	99 80 9c	sta $9c80,y	        STA f9C80,Y
.1e2a	c8		iny		        INY
.1e2b	d0 f7		bne $1e24	        BNE b1E24
.1e2d	a9 00		lda #$00	b1E2D   LDA #$00
.1e2f	20 fd 1c	jsr $1cfd	        JSR s1CFD       ; called when erasing a disk
.1e32	ad f3 04	lda $04f3	b1E32   LDA a04F3
.1e35	85 0f		sta $0f		        STA r6H
.1e37	ad f4 04	lda $04f4	        LDA a04F4
.1e3a	85 0e		sta $0e		        STA r6L
.1e3c	cd 22 05	cmp $0522	        CMP a0522
.1e3f	f0 02		beq $1e43	        BEQ b1E43
.1e41	b0 09		bcs $1e4c	        BCS b1E4C
.1e43	20 4d 1e	jsr $1e4d	b1E43   JSR s1E4D
.1e46	20 21 1d	jsr $1d21	        JSR s1D21
.1e49	b8		clv		        CLV
.1e4a	50 e6		bvc $1e32	        BVC b1E32
.1e4c	60		rts		b1E4C   RTS
.1e4d	ad 20 05	lda $0520	s1E4D   LDA a0520
.1e50	c9 02		cmp #$02	        CMP #$02
.1e52	90 16		bcc $1e6a	        BCC b1E6A
.1e54	d0 11		bne $1e67	        BNE b1E67       ; free disk block
.1e56	a5 0e		lda $0e		        LDA r6L
.1e58	cd ef 1d	cmp $1def	        CMP a1DEF
.1e5b	90 09		bcc $1e66	        BCC b1E66
.1e5d	c9 35		cmp #$35	        CMP #$35
.1e5f	d0 06		bne $1e67	        BNE b1E67       ; free a disk block
.1e61	a9 80		lda #$80	        LDA #$80
.1e63	8d 03 82	sta $8203	        STA a8203
.1e66	60		rts		b1E66   RTS
.1e67	4c b9 c2	jmp $c2b9	b1E67   JMP FreeBlock   ; Free an allocated disk block
.1e6a	20 ad c2	jsr $c2ad	b1E6A   JSR FindBAMBit  ; Get disk block allocation status
.1e6d	a5 13		lda $13		        LDA r8H
.1e6f	5d 00 82	eor $8200,x	        EOR curDirHead,X
.1e72	9d 00 82	sta $8200,x	        STA curDirHead,X
.1e75	a6 11		ldx $11		        LDX r7H
.1e77	fe 00 82	inc $8200,x	        INC curDirHead,X
.1e7a	60		rts		        RTS
.1e7b	a2 00		ldx #$00	s1E7B   LDX #$00
.1e7d	dd 86 1e	cmp $1e86,x	b1E7D   CMP f1E86,X
.1e80	90 03		bcc $1e85	        BCC b1E85
.1e82	e8		inx		        INX
.1e83	d0 f8		bne $1e7d	        BNE b1E7D
.1e85	60		rts		b1E85   RTS
>1e86	12 19 1f 24			f1E86   .BYTE $12,$19,$1F,$24
.1e8a	20 68 22	jsr $2268	s1E8A   JSR s2268
.1e8d	20 6d 20	jsr $206d	        JSR s206D
.1e90	20 97 20	jsr $2097	        JSR s2097
.1e93	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1e96	20 2c 23	jsr $232c	        JSR s232C
.1e99	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1e9c	a9 82		lda #$82	        LDA #>curDirHead
.1e9e	85 0d		sta $0d		        STA r5H         ; lo byte of curDirHead for CalcBlksFree
.1ea0	a9 00		lda #$00	        LDA #<curDirHead
.1ea2	85 0c		sta $0c		        STA r5L         ; hi byte of curDirHead for CalcBlksFree
.1ea4	20 db c1	jsr $c1db	        JSR CalcBlksFree ; Calculates total number of free blocks on the disk
.1ea7	a2 03		ldx #$03	        LDX #$03
.1ea9	ad 93 18	lda $1893	        LDA a1893
.1eac	c5 0b		cmp $0b		        CMP r4H         ; compare with hi byte of number of free blocks on disk (r4)
.1eae	d0 05		bne $1eb5	        BNE b1EB5
.1eb0	ad 92 18	lda $1892	        LDA a1892
.1eb3	c5 0a		cmp $0a		        CMP r4L         ; compare with lo byte of number of free blocks on disk (r4)
.1eb5	f0 02		beq $1eb9	b1EB5   BEQ b1EB9       ; free block sizes are equal - skip ahead
.1eb7	b0 47		bcs $1f00	        BCS b1F00
.1eb9	a5 fc		lda $fc		b1EB9   LDA aFC
.1ebb	85 16		sta $16		        STA r10L        ; DIRPAGE parameter for GetFreeDirBlk - directory page to begin searching
.1ebd	20 f6 c1	jsr $c1f6	        JSR GetFreeDirBlk ; Search cur dir for an empty slot for a new dir entry, allocate another block if needed
.1ec0	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1ec3	a5 16		lda $16		        LDA r10L
.1ec5	85 fc		sta $fc		        STA aFC
.1ec7	8c e0 04	sty $04e0	        STY a04E0
.1eca	a5 05		lda $05		        LDA r1H
.1ecc	8d e2 04	sta $04e2	        STA a04E2
.1ecf	a5 04		lda $04		        LDA r1L
.1ed1	8d e1 04	sta $04e1	        STA a04E1
.1ed4	20 4a c2	jsr $c24a	        JSR PutDirHead  ; Write directory header and BAM to disk
.1ed7	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1eda	20 01 1f	jsr $1f01	b1EDA   JSR s1F01       ; copy file
.1edd	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1ee0	98		tya		        TYA
.1ee1	d0 14		bne $1ef7	        BNE b1EF7
.1ee3	20 f3 22	jsr $22f3	        JSR s22F3
.1ee6	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1ee9	20 97 20	jsr $2097	        JSR s2097
.1eec	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1eef	20 50 23	jsr $2350	        JSR s2350
.1ef2	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1ef5	f0 e3		beq $1eda	        BEQ b1EDA
.1ef7	20 44 22	jsr $2244	b1EF7   JSR s2244
.1efa	20 3b 25	jsr $253b	        JSR s253B       ; transfer X to A, if A=0 return, else pull from stack
.1efd	20 4a c2	jsr $c24a	        JSR PutDirHead  ; Write directory header and BAM to disk
.1f00	60		rts		b1F00   RTS
.1f01	08		php		s1F01   PHP
.1f02	78		sei		        SEI
.1f03	ad f3 03	lda $03f3	        LDA a03F3
.1f06	85 13		sta $13		        STA r8H
.1f08	ad f2 03	lda $03f2	        LDA a03F2
.1f0b	85 12		sta $12		        STA r8L
.1f0d	20 af 22	jsr $22af	b1F0D   JSR s22AF    ;copy r8 to r10
.1f10	b1 16		lda ($16),y	        LDA (r10L),Y
.1f12	29 80		and #$80	        AND #$80
.1f14	d0 06		bne $1f1c	        BNE b1F1C
.1f16	20 db 1f	jsr $1fdb	        JSR s1FDB    ;allocate BAM and write file
.1f19	b8		clv		        CLV
.1f1a	50 03		bvc $1f1f	        BVC b1F1F
.1f1c	20 42 1f	jsr $1f42	b1F1C   JSR s1F42
.1f1f	8a		txa		b1F1F   TXA
.1f20	d0 1e		bne $1f40	        BNE b1F40
.1f22	a0 02		ldy #$02	        LDY #$02
.1f24	b1 16		lda ($16),y	        LDA (r10L),Y
.1f26	85 12		sta $12		        STA r8L
.1f28	c8		iny		        INY
.1f29	b1 16		lda ($16),y	        LDA (r10L),Y
.1f2b	85 13		sta $13		        STA r8H
.1f2d	a0 00		ldy #$00	        LDY #$00
.1f2f	b1 16		lda ($16),y	        LDA (r10L),Y
.1f31	29 30		and #$30	        AND #$30
.1f33	f0 d8		beq $1f0d	        BEQ b1F0D
.1f35	a2 00		ldx #$00	        LDX #$00
.1f37	29 10		and #$10	        AND #$10
.1f39	f0 05		beq $1f40	        BEQ b1F40
.1f3b	20 5e 1f	jsr $1f5e	        JSR s1F5E
.1f3e	a0 ff		ldy #$ff	        LDY #$FF
.1f40	28		plp		b1F40   PLP
.1f41	60		rts		        RTS
.1f42	a0 00		ldy #$00	s1F42   LDY #$00
.1f44	b1 16		lda ($16),y	        LDA (r10L),Y
.1f46	29 03		and #$03	        AND #$03
.1f48	a8		tay		        TAY
.1f49	b9 56 1f	lda $1f56,y	        LDA f1F56,Y
.1f4c	85 03		sta $03		        STA r0H
.1f4e	b9 5a 1f	lda $1f5a,y	        LDA f1F5A,Y
.1f51	85 02		sta $02		        STA r0L
.1f53	6c 02 00	jmp ($0002)	        JMP (r0L)
>1f56	1f 1f 1f 1f			f1F56   .BYTE $1F,$1F,$1F,$1F
>1f5a	7b b5 c5 41			f1F5A   .BYTE $7B,$B5,$C5,$41
.1f5e	ad 1b 04	lda $041b	s1F5E   LDA a041B
.1f61	c9 01		cmp #$01	        CMP #$01
.1f63	d0 15		bne $1f7a	        BNE b1F7A
.1f65	ad 08 04	lda $0408	        LDA a0408
.1f68	85 05		sta $05		        STA r1H
.1f6a	ad 07 04	lda $0407	        LDA a0407
.1f6d	85 04		sta $04		        STA r1L
.1f6f	a9 7d		lda #$7d	        LDA #>p7D00
.1f71	85 0b		sta $0b		        STA r4H
.1f73	a9 00		lda #$00	        LDA #<p7D00
.1f75	85 0a		sta $0a		        STA r4L
.1f77	20 e7 c1	jsr $c1e7	        JSR PutBlock
.1f7a	60		rts		b1F7A   RTS
.1f7b	20 db 1f	jsr $1fdb	        JSR s1FDB    ;allocate BAM and write file
.1f7e	8a		txa		        TXA
.1f7f	d0 29		bne $1faa	        BNE b1FAA
.1f81	ad ea 04	lda $04ea	        LDA a04EA
.1f84	8d 1a 04	sta $041a	        STA a041A
.1f87	ad e9 04	lda $04e9	        LDA a04E9
.1f8a	8d 19 04	sta $0419	        STA a0419
.1f8d	ad 1b 04	lda $041b	        LDA a041B
.1f90	c9 01		cmp #$01	        CMP #$01
.1f92	d0 16		bne $1faa	        BNE b1FAA
.1f94	20 ba 22	jsr $22ba	        JSR s22BA    ;load $04e8 to r3
.1f97	20 92 c2	jsr $c292	        JSR SetNextFree
.1f9a	a5 08		lda $08		        LDA r3L
.1f9c	8d e7 04	sta $04e7	        STA a04E7
.1f9f	8d 07 04	sta $0407	        STA a0407
.1fa2	a5 09		lda $09		        LDA r3H
.1fa4	8d e8 04	sta $04e8	        STA a04E8
.1fa7	8d 08 04	sta $0408	        STA a0408
.1faa	ad 96 20	lda $2096	b1FAA   LDA a2096
.1fad	f0 05		beq $1fb4	        BEQ b1FB4
.1faf	a9 23		lda #$23	        LDA #$23
.1fb1	8d e7 04	sta $04e7	        STA a04E7
.1fb4	60		rts		b1FB4   RTS
.1fb5	20 db 1f	jsr $1fdb	        JSR s1FDB    ;allocate BAM and write file
.1fb8	ad ea 04	lda $04ea	        LDA a04EA
.1fbb	8d 08 04	sta $0408	        STA a0408
.1fbe	ad e9 04	lda $04e9	        LDA a04E9
.1fc1	8d 07 04	sta $0407	        STA a0407
.1fc4	60		rts		        RTS
.1fc5	20 db 1f	jsr $1fdb	        JSR s1FDB    ;allocate BAM and write file
.1fc8	a0 01		ldy #$01	        LDY #$01
.1fca	b1 16		lda ($16),y	        LDA (r10L),Y
.1fcc	0a		asl a		        ASL
.1fcd	a8		tay		        TAY
.1fce	ad e9 04	lda $04e9	        LDA a04E9
.1fd1	99 02 7d	sta $7d02,y	        STA f7D02,Y
.1fd4	ad ea 04	lda $04ea	        LDA a04EA
.1fd7	99 03 7d	sta $7d03,y	        STA f7D03,Y
.1fda	60		rts		        RTS
.1fdb	a5 12		lda $12		s1FDB   LDA r8L
.1fdd	18		clc		        CLC
.1fde	69 04		adc #$04	        ADC #$04
.1fe0	85 10		sta $10		        STA r7L
.1fe2	a5 13		lda $13		        LDA r8H
.1fe4	69 00		adc #$00	        ADC #$00
.1fe6	85 11		sta $11		        STA r7H
.1fe8	a0 02		ldy #$02	        LDY #$02
.1fea	b1 16		lda ($16),y	        LDA (r10L),Y
.1fec	85 06		sta $06		        STA r2L
.1fee	c8		iny		        INY
.1fef	b1 16		lda ($16),y	        LDA (r10L),Y
.1ff1	85 07		sta $07		        STA r2H
.1ff3	a5 06		lda $06		        LDA r2L
.1ff5	38		sec		        SEC
.1ff6	e5 10		sbc $10		        SBC r7L
.1ff8	85 06		sta $06		        STA r2L      ;number of bytes to allocate space for (lo)
.1ffa	a5 07		lda $07		        LDA r2H
.1ffc	e5 11		sbc $11		        SBC r7H
.1ffe	85 07		sta $07		        STA r2H      ;number of bytes to allocate space for (hi)
.2000	20 ba 22	jsr $22ba	        JSR s22BA    ;load $04e8 to r3
.2003	20 64 20	jsr $2064	        JSR s2064    ;r6 = pointer to fileTrScTab (buffer used to hold track and sector chain for a file)
.2006	a5 11		lda $11		        LDA r7H
.2008	48		pha		        PHA
.2009	a5 10		lda $10		        LDA r7L
.200b	48		pha		        PHA
.200c	20 4d c2	jsr $c24d	        JSR NxtBlkAlloc ;     Special version of BlkAlloc that begins allocating from a specific block on the disk
.200f	68		pla		        PLA
.2010	85 10		sta $10		        STA r7L
.2012	68		pla		        PLA
.2013	85 11		sta $11		        STA r7H
.2015	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.2018	a0 00		ldy #$00	        LDY #$00
.201a	b1 16		lda ($16),y	        LDA (r10L),Y
.201c	29 80		and #$80	        AND #$80
.201e	f0 0f		beq $202f	        BEQ b202F
.2020	ad 01 83	lda $8301	        LDA a8301
.2023	8d ea 04	sta $04ea	        STA a04EA
.2026	ad 00 83	lda $8300	        LDA fileTrScTab
.2029	8d e9 04	sta $04e9	        STA a04E9
.202c	b8		clv		        CLV
.202d	50 25		bvc $2054	        BVC b2054
.202f	ad e8 04	lda $04e8	b202F   LDA a04E8
.2032	85 05		sta $05		        STA r1H      ;SECTOR parameter for GetBlock
.2034	ad e7 04	lda $04e7	        LDA a04E7
.2037	85 04		sta $04		        STA r1L      ;TRACK parameter for GetBlock
.2039	20 4d 25	jsr $254d	        JSR s254D    ;point r4 at diskBlkBuf
.203c	20 e4 c1	jsr $c1e4	        JSR GetBlock ;     General purpose routine to get a block from current disk
.203f	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.2042	ad 01 83	lda $8301	        LDA a8301
.2045	8d 01 80	sta $8001	        STA a8001
.2048	ad 00 83	lda $8300	        LDA fileTrScTab
.204b	8d 00 80	sta $8000	        STA diskBlkBuf
.204e	20 e7 c1	jsr $c1e7	        JSR PutBlock
.2051	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.2054	a5 09		lda $09		b2054   LDA r3H      ;pointer to start of DATA to write for WriteFile (hi)
.2056	8d e8 04	sta $04e8	        STA a04E8
.2059	a5 08		lda $08		        LDA r3L      ;pointer to start of DATA to write for WriteFile (lo)
.205b	8d e7 04	sta $04e7	        STA a04E7
.205e	20 64 20	jsr $2064	        JSR s2064    ;r6 = pointer to fileTrScTab (buffer used to hold track and sector chain for a file)
.2061	4c f9 c1	jmp $c1f9	        JMP WriteFile ;     Write data to a chained list of disk blocks
.2064	a9 83		lda #$83	s2064   LDA #>fileTrScTab
.2066	85 0f		sta $0f		        STA r6H
.2068	a9 00		lda #$00	        LDA #<fileTrScTab
.206a	85 0e		sta $0e		        STA r6L
.206c	60		rts		        RTS
.206d	a9 40		lda #$40	s206D   LDA #$40
.206f	8d e3 04	sta $04e3	        STA a04E3
.2072	a9 00		lda #$00	        LDA #$00
.2074	8d 96 20	sta $2096	        STA a2096
.2077	a4 70		ldy $70		        LDY a70
.2079	b9 86 84	lda $8486,y	        LDA f8486,Y  ;$8476 = disk that current printer driver resides on
.207c	c9 03		cmp #$03	        CMP #$03
.207e	d0 07		bne $2087	        BNE b2087
.2080	8d 96 20	sta $2096	        STA a2096
.2083	a9 27		lda #$27	        LDA #$27
.2085	d0 02		bne $2089	        BNE b2089
.2087	a9 01		lda #$01	b2087   LDA #<p01
.2089	8d e7 04	sta $04e7	b2089   STA a04E7
.208c	a9 00		lda #$00	        LDA #>p01
.208e	8d e8 04	sta $04e8	        STA a04E8
.2091	8d 95 20	sta $2095	        STA a2095
.2094	60		rts		        RTS
>2095	00				a2095   .BYTE $00
>2096	00				a2096   .BYTE $00
.2097	08		php		s2097   PHP
.2098	78		sei		        SEI
.2099	ad f3 03	lda $03f3	        LDA a03F3
.209c	85 13		sta $13		        STA r8H
.209e	ad f2 03	lda $03f2	        LDA a03F2
.20a1	85 12		sta $12		        STA r8L
.20a3	ad f5 03	lda $03f5	        LDA a03F5
.20a6	85 15		sta $15		        STA r9H
.20a8	ad f4 03	lda $03f4	        LDA a03F4
.20ab	85 14		sta $14		        STA r9L
.20ad	a9 04		lda #$04	        LDA #>a04E3
.20af	85 17		sta $17		        STA r10H
.20b1	a9 e3		lda #$e3	        LDA #<a04E3
.20b3	85 16		sta $16		        STA r10L
.20b5	a5 15		lda $15		b20B5   LDA r9H
.20b7	f0 31		beq $20ea	        BEQ b20EA
.20b9	c9 01		cmp #$01	        CMP #$01
.20bb	d0 06		bne $20c3	        BNE b20C3
.20bd	a5 14		lda $14		        LDA r9L
.20bf	c9 04		cmp #$04	        CMP #$04
.20c1	90 27		bcc $20ea	        BCC b20EA
.20c3	a0 00		ldy #$00	b20C3   LDY #$00
.20c5	b1 16		lda ($16),y	        LDA (r10L),Y
.20c7	29 40		and #$40	        AND #$40
.20c9	d0 06		bne $20d1	        BNE b20D1
.20cb	20 53 21	jsr $2153	        JSR s2153
.20ce	b8		clv		        CLV
.20cf	50 03		bvc $20d4	        BVC b20D4
.20d1	20 f9 20	jsr $20f9	b20D1   JSR s20F9
.20d4	8a		txa		b20D4   TXA
.20d5	d0 20		bne $20f7	        BNE b20F7
.20d7	a0 00		ldy #$00	        LDY #$00
.20d9	b1 16		lda ($16),y	        LDA (r10L),Y
.20db	29 40		and #$40	        AND #$40
.20dd	f0 0b		beq $20ea	        BEQ b20EA
.20df	ad 95 20	lda $2095	        LDA a2095
.20e2	c9 04		cmp #$04	        CMP #$04
.20e4	d0 cf		bne $20b5	        BNE b20B5
.20e6	a9 30		lda #$30	        LDA #$30
.20e8	d0 02		bne $20ec	        BNE b20EC
.20ea	a9 20		lda #$20	b20EA   LDA #$20
.20ec	a0 00		ldy #$00	b20EC   LDY #$00
.20ee	11 16		ora ($16),y	        ORA (r10L),Y
.20f0	91 16		sta ($16),y	        STA (r10L),Y
.20f2	8d e3 04	sta $04e3	        STA a04E3
.20f5	a2 00		ldx #$00	        LDX #$00
.20f7	28		plp		b20F7   PLP
.20f8	60		rts		        RTS
.20f9	ac 95 20	ldy $2095	s20F9   LDY a2095
.20fc	b9 09 21	lda $2109,y	        LDA f2109,Y
.20ff	85 03		sta $03		        STA r0H
.2101	b9 0d 21	lda $210d,y	        LDA f210D,Y
.2104	85 02		sta $02		        STA r0L
.2106	6c 02 00	jmp ($0002)	        JMP (r0L)
>2109	21 21 21 21			f2109   .BYTE $21,$21,$21,$21
>210d	11 39 6d 8d			f210D   .BYTE $11,$39,$6D,$8D
.2111	ad 89 18	lda $1889	        LDA a1889
.2114	f0 23		beq $2139	        BEQ b2139
.2116	20 af 22	jsr $22af	        JSR s22AF    ;copy r8 to r10
.2119	a9 80		lda #$80	        LDA #$80
.211b	91 16		sta ($16),y	        STA (r10L),Y
.211d	ad 8a 18	lda $188a	        LDA a188A
.2120	85 05		sta $05		        STA r1H
.2122	ad 89 18	lda $1889	        LDA a1889
.2125	85 04		sta $04		        STA r1L
.2127	20 df 21	jsr $21df	        JSR s21DF    ;set up and read file into memory
.212a	a0 01		ldy #$01	        LDY #$01
.212c	ad 8b 18	lda $188b	        LDA a188B
.212f	c9 01		cmp #$01	        CMP #$01
.2131	d0 02		bne $2135	        BNE b2135
.2133	a0 02		ldy #$02	        LDY #$02
.2135	8c 95 20	sty $2095	b2135   STY a2095
.2138	60		rts		        RTS
.2139	20 af 22	jsr $22af	b2139   JSR s22AF    ;copy r8 to r10
.213c	a9 81		lda #$81	        LDA #$81
.213e	91 16		sta ($16),y	        STA (r10L),Y
.2140	ad 78 18	lda $1878	        LDA a1878
.2143	85 05		sta $05		        STA r1H
.2145	ad 77 18	lda $1877	        LDA a1877
.2148	85 04		sta $04		        STA r1L
.214a	20 df 21	jsr $21df	        JSR s21DF    ;set up and read file into memory
.214d	a9 04		lda #$04	        LDA #$04
.214f	8d 95 20	sta $2095	        STA a2095
.2152	60		rts		        RTS
.2153	a0 00		ldy #$00	s2153   LDY #$00
.2155	b1 16		lda ($16),y	        LDA (r10L),Y
.2157	48		pha		        PHA
.2158	20 af 22	jsr $22af	        JSR s22AF    ;copy r8 to r10
.215b	68		pla		        PLA
.215c	29 0f		and #$0f	        AND #$0F
.215e	91 16		sta ($16),y	        STA (r10L),Y
.2160	ad e6 04	lda $04e6	        LDA a04E6
.2163	85 05		sta $05		        STA r1H
.2165	ad e5 04	lda $04e5	        LDA a04E5
.2168	85 04		sta $04		        STA r1L
.216a	4c df 21	jmp $21df	        JMP s21DF    ;set up and read file into memory
.216d	a9 ff		lda #$ff	        LDA #$FF
.216f	8d e4 04	sta $04e4	        STA a04E4
.2172	ad 78 18	lda $1878	        LDA a1878
.2175	85 05		sta $05		        STA r1H      ;SECTOR
.2177	ad 77 18	lda $1877	        LDA a1877
.217a	85 04		sta $04		        STA r1L      ;TRACK
.217c	a9 7d		lda #$7d	        LDA #>p7D00
.217e	85 0b		sta $0b		        STA r4H      ;hi byte of BUFFER to place block ($7D00)
.2180	a9 00		lda #$00	        LDA #<p7D00
.2182	85 0a		sta $0a		        STA r4L      ;low byte of BUFFER to place block ($7D00)
.2184	20 e4 c1	jsr $c1e4	        JSR GetBlock ;     General puspose routine to get a block from the current disk
.2187	a9 03		lda #$03	        LDA #$03
.2189	8d 95 20	sta $2095	        STA a2095
.218c	60		rts		        RTS
.218d	ad e4 04	lda $04e4	        LDA a04E4
.2190	85 02		sta $02		        STA r0L
.2192	20 c6 21	jsr $21c6	        JSR s21C6
.2195	ad 95 20	lda $2095	        LDA a2095
.2198	c9 04		cmp #$04	        CMP #$04
.219a	f0 29		beq $21c5	        BEQ b21C5
.219c	20 af 22	jsr $22af	        JSR s22AF    ;copy r8 to r10
.219f	a5 02		lda $02		        LDA r0L
.21a1	8d e4 04	sta $04e4	        STA a04E4
.21a4	0a		asl a		        ASL
.21a5	aa		tax		        TAX
.21a6	bd 02 7d	lda $7d02,x	        LDA f7D02,X
.21a9	85 04		sta $04		        STA r1L
.21ab	bd 03 7d	lda $7d03,x	        LDA f7D03,X
.21ae	85 05		sta $05		        STA r1H
.21b0	a9 82		lda #$82	        LDA #$82
.21b2	91 16		sta ($16),y	        STA (r10L),Y
.21b4	c8		iny		        INY
.21b5	a5 02		lda $02		        LDA r0L
.21b7	91 16		sta ($16),y	        STA (r10L),Y
.21b9	a5 02		lda $02		        LDA r0L
.21bb	48		pha		        PHA
.21bc	20 df 21	jsr $21df	        JSR s21DF    ;set up and read file into memory
.21bf	68		pla		        PLA
.21c0	85 02		sta $02		        STA r0L
.21c2	8a		txa		        TXA
.21c3	f0 01		beq $21c6	        BEQ s21C6
.21c5	60		rts		b21C5   RTS
.21c6	e6 02		inc $02		s21C6   INC r0L
.21c8	a5 02		lda $02		        LDA r0L
.21ca	c9 7f		cmp #$7f	        CMP #$7F
.21cc	b0 09		bcs $21d7	        BCS b21D7
.21ce	0a		asl a		        ASL
.21cf	aa		tax		        TAX
.21d0	bd 02 7d	lda $7d02,x	        LDA f7D02,X
.21d3	f0 f1		beq $21c6	        BEQ s21C6
.21d5	d0 05		bne $21dc	        BNE b21DC
.21d7	a9 04		lda #$04	b21D7   LDA #$04
.21d9	8d 95 20	sta $2095	        STA a2095
.21dc	a2 00		ldx #$00	b21DC   LDX #$00
.21de	60		rts		        RTS
.21df	a5 16		lda $16		s21DF   LDA r10L     ;r1 = start track/sector of first data block
.21e1	18		clc		        CLC
.21e2	69 04		adc #$04	        ADC #$04
.21e4	85 10		sta $10		        STA r7L      ;pointer to buffer where data will be read into (lo)
.21e6	a5 17		lda $17		        LDA r10H
.21e8	69 00		adc #$00	        ADC #$00
.21ea	85 11		sta $11		        STA r7H      ;pointer to buffer where data will be read into (hi)
.21ec	38		sec		        SEC
.21ed	a5 14		lda $14		        LDA r9L
.21ef	e9 04		sbc #$04	        SBC #$04
.21f1	85 06		sta $06		        STA r2L      ;size of buffer for ReadFile (lo)
.21f3	a5 15		lda $15		        LDA r9H
.21f5	e9 00		sbc #$00	        SBC #$00
.21f7	85 07		sta $07		        STA r2H      ;size of buffer for ReadFile (hi)
.21f9	20 ff c1	jsr $c1ff	        JSR ReadFile ;     Read a chained list of blocks into memory
.21fc	e0 0b		cpx #$0b	        CPX #$0B
.21fe	d0 0e		bne $220e	        BNE b220E
.2200	a5 05		lda $05		        LDA r1H
.2202	8d e6 04	sta $04e6	        STA a04E6
.2205	a5 04		lda $04		        LDA r1L
.2207	8d e5 04	sta $04e5	        STA a04E5
.220a	a2 00		ldx #$00	        LDX #$00
.220c	f0 08		beq $2216	        BEQ b2216
.220e	a0 00		ldy #$00	b220E   LDY #$00
.2210	b1 16		lda ($16),y	        LDA (r10L),Y
.2212	09 40		ora #$40	        ORA #$40
.2214	91 16		sta ($16),y	        STA (r10L),Y
.2216	a5 11		lda $11		b2216   LDA r7H
.2218	85 13		sta $13		        STA r8H
.221a	a5 10		lda $10		        LDA r7L
.221c	85 12		sta $12		        STA r8L
.221e	a5 12		lda $12		        LDA r8L
.2220	38		sec		        SEC
.2221	e5 16		sbc $16		        SBC r10L
.2223	85 02		sta $02		        STA r0L
.2225	a5 13		lda $13		        LDA r8H
.2227	e5 17		sbc $17		        SBC r10H
.2229	85 03		sta $03		        STA r0H
.222b	a5 14		lda $14		        LDA r9L
.222d	38		sec		        SEC
.222e	e5 02		sbc $02		        SBC r0L
.2230	85 14		sta $14		        STA r9L
.2232	a5 15		lda $15		        LDA r9H
.2234	e5 03		sbc $03		        SBC r0H
.2236	85 15		sta $15		        STA r9H
.2238	a5 12		lda $12		        LDA r8L
.223a	a0 02		ldy #$02	        LDY #$02
.223c	91 16		sta ($16),y	        STA (r10L),Y
.223e	a5 13		lda $13		        LDA r8H
.2240	c8		iny		        INY
.2241	91 16		sta ($16),y	        STA (r10L),Y
.2243	60		rts		        RTS
.2244	ad e2 04	lda $04e2	s2244   LDA a04E2
.2247	85 05		sta $05		        STA r1H
.2249	ad e1 04	lda $04e1	        LDA a04E1
.224c	85 04		sta $04		        STA r1L
.224e	20 e3 1d	jsr $1de3	        JSR s1DE3
.2251	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.2254	ac e0 04	ldy $04e0	        LDY a04E0
.2257	a2 00		ldx #$00	        LDX #$00
.2259	bd 06 04	lda $0406,x	b2259   LDA f0406,X
.225c	99 00 80	sta $8000,y	        STA diskBlkBuf,Y
.225f	e8		inx		        INX
.2260	c8		iny		        INY
.2261	e0 1e		cpx #$1e	        CPX #$1E
.2263	d0 f4		bne $2259	        BNE b2259
.2265	4c e9 1d	jmp $1de9	        JMP j1DE9    ;Put the diskBlkBuf to disk
.2268	a0 1d		ldy #$1d	s2268   LDY #$1D
.226a	b1 0c		lda ($0c),y	b226A   LDA (r5L),Y
.226c	99 76 18	sta $1876,y	        STA f1876,Y
.226f	99 06 04	sta $0406,y	        STA f0406,Y
.2272	88		dey		        DEY
.2273	10 f5		bpl $226a	        BPL b226A
.2275	ad fd 03	lda $03fd	        LDA a03FD
.2278	85 09		sta $09		        STA r3H
.227a	ad fc 03	lda $03fc	        LDA a03FC
.227d	85 08		sta $08		        STA r3L
.227f	a9 ff		lda #$ff	        LDA #$FF
.2281	85 05		sta $05		        STA r1H
.2283	a2 03		ldx #$03	        LDX #$03
.2285	a0 00		ldy #$00	        LDY #$00
.2287	b1 08		lda ($08),y	b2287   LDA (r3L),Y
.2289	d0 06		bne $2291	        BNE b2291
.228b	a9 00		lda #$00	        LDA #$00
.228d	85 05		sta $05		        STA r1H
.228f	a9 a0		lda #$a0	b228F   LDA #$A0
.2291	9d 06 04	sta $0406,x	b2291   STA f0406,X
.2294	e8		inx		        INX
.2295	c8		iny		        INY
.2296	c0 10		cpy #$10	        CPY #$10
.2298	f0 06		beq $22a0	        BEQ b22A0
.229a	a5 05		lda $05		        LDA r1H
.229c	d0 e9		bne $2287	        BNE b2287
.229e	f0 ef		beq $228f	        BEQ b228F
.22a0	a9 00		lda #$00	b22A0   LDA #$00
.22a2	8d 07 04	sta $0407	        STA a0407
.22a5	8d 08 04	sta $0408	        STA a0408
.22a8	8d 19 04	sta $0419	        STA a0419
.22ab	8d 1a 04	sta $041a	        STA a041A
.22ae	60		rts		        RTS
.22af	a5 13		lda $13		s22AF   LDA r8H
.22b1	85 17		sta $17		        STA r10H
.22b3	a5 12		lda $12		        LDA r8L
.22b5	85 16		sta $16		        STA r10L
.22b7	a0 00		ldy #$00	        LDY #$00
.22b9	60		rts		        RTS
.22ba	ad e8 04	lda $04e8	s22BA   LDA a04E8
.22bd	85 09		sta $09		        STA r3H
.22bf	ad e7 04	lda $04e7	        LDA a04E7
.22c2	85 08		sta $08		        STA r3L
.22c4	60		rts		        RTS
.22c5	ad b2 84	lda $84b2	s22C5   LDA RecoverVector_HI
.22c8	8d ff 03	sta $03ff	        STA a03FF
.22cb	ad b1 84	lda $84b1	        LDA RecoverVector_LO
.22ce	8d fe 03	sta $03fe	        STA a03FE
.22d1	a9 22		lda #$22	        LDA #>p22E9
.22d3	8d b2 84	sta $84b2	        STA RecoverVector_HI
.22d6	a9 e9		lda #$e9	        LDA #<p22E9
.22d8	8d b1 84	sta $84b1	        STA RecoverVector_LO
.22db	60		rts		        RTS
.22dc	ad ff 03	lda $03ff	s22DC   LDA a03FF
.22df	8d b2 84	sta $84b2	        STA RecoverVector_HI
.22e2	ad fe 03	lda $03fe	        LDA a03FE
.22e5	8d b1 84	sta $84b1	        STA RecoverVector_LO
.22e8	60		rts		        RTS
.22e9	a9 80		lda #$80	p22E9   LDA #$80     ;draw to the foreground screen
.22eb	85 2f		sta $2f		        STA displayBufferOn
.22ed	20 47 24	jsr $2447	        JSR s2447    ;Set the rectangle pattern based on A
.22f0	4c 24 c1	jmp $c124	        JMP Rectangle
.22f3	a0 00		ldy #$00	s22F3   LDY #$00
.22f5	b9 00 82	lda $8200,y	b22F5   LDA curDirHead,Y
.22f8	99 80 8a	sta $8a80,y	        STA spr2pic,Y
.22fb	b9 00 89	lda $8900,y	        LDA dir2Head,Y
.22fe	99 00 7e	sta $7e00,y	        STA f7E00,Y
.2301	c8		iny		        INY
.2302	d0 f1		bne $22f5	        BNE b22F5
.2304	a4 70		ldy $70		        LDY a70
.2306	b9 86 84	lda $8486,y	        LDA f8486,Y  ;disk name which contains current printer driver ($8476)
.2309	29 0f		and #$0f	        AND #$0F
.230b	c9 03		cmp #$03	        CMP #$03
.230d	d0 0f		bne $231e	        BNE s231E
.230f	98		tya		        TYA
.2310	20 f1 1a	jsr $1af1	        JSR s1AF1
.2313	a0 00		ldy #$00	        LDY #$00
.2315	b9 80 9c	lda $9c80,y	b2315   LDA f9C80,Y
.2318	99 00 7f	sta $7f00,y	        STA f7F00,Y
.231b	c8		iny		        INY
.231c	d0 f7		bne $2315	        BNE b2315
.231e	ad f7 03	lda $03f7	s231E   LDA a03F7
.2321	85 05		sta $05		        STA r1H
.2323	ad f6 03	lda $03f6	        LDA a03F6
.2326	85 04		sta $04		        STA r1L
.2328	a5 fe		lda $fe		        LDA aFE
.232a	d0 0c		bne $2338	        BNE b2338
.232c	ad f9 03	lda $03f9	s232C   LDA a03F9
.232f	85 05		sta $05		        STA r1H
.2331	ad f8 03	lda $03f8	        LDA a03F8
.2334	85 04		sta $04		        STA r1L
.2336	a5 70		lda $70		        LDA a70
.2338	20 f1 1a	jsr $1af1	b2338   JSR s1AF1
.233b	ad ed 04	lda $04ed	        LDA a04ED
.233e	f0 0d		beq $234d	        BEQ b234D
.2340	ad eb 04	lda $04eb	        LDA a04EB
.2343	c9 02		cmp #$02	        CMP #$02
.2345	90 03		bcc $234a	        BCC b234A
.2347	a2 00		ldx #$00	        LDX #$00
.2349	60		rts		        RTS
.234a	ee eb 04	inc $04eb	b234A   INC a04EB
.234d	4c 83 23	jmp $2383	b234D   JMP j2383
.2350	20 2c 23	jsr $232c	s2350   JSR s232C
.2353	a0 00		ldy #$00	        LDY #$00
.2355	b9 80 8a	lda $8a80,y	b2355   LDA spr2pic,Y
.2358	99 00 82	sta $8200,y	        STA curDirHead,Y
.235b	b9 00 7e	lda $7e00,y	        LDA f7E00,Y
.235e	99 00 89	sta $8900,y	        STA dir2Head,Y
.2361	c8		iny		        INY
.2362	d0 f1		bne $2355	        BNE b2355
.2364	a4 70		ldy $70		        LDY a70
.2366	b9 86 84	lda $8486,y	        LDA f8486,Y  ;disk name which contains current printer driver ($8476)
.2369	29 0f		and #$0f	        AND #$0F
.236b	c9 03		cmp #$03	        CMP #$03
.236d	d0 0b		bne $237a	        BNE b237A
.236f	a0 00		ldy #$00	        LDY #$00
.2371	b9 00 7f	lda $7f00,y	b2371   LDA f7F00,Y
.2374	99 80 9c	sta $9c80,y	        STA f9C80,Y
.2377	c8		iny		        INY
.2378	d0 f7		bne $2371	        BNE b2371
.237a	60		rts		b237A   RTS
.237b	20 f1 1a	jsr $1af1	        JSR s1AF1
.237e	20 71 38	jsr $3871	s237E   JSR s3871
.2381	f0 f7		beq $237a	        BEQ b237A
.2383	20 e4 23	jsr $23e4	j2383   JSR s23E4
.2386	08		php		        PHP
.2387	a2 00		ldx #$00	        LDX #$00
.2389	28		plp		        PLP
.238a	d0 06		bne $2392	        BNE b2392
.238c	a0 ff		ldy #$ff	        LDY #$FF
.238e	8c 4d 02	sty $024d	        STY a024D
.2391	60		rts		        RTS
.2392	20 59 25	jsr $2559	b2392   JSR s2559    ;load r5 with $8b80
.2395	a2 04		ldx #$04	        LDX #$04
.2397	a0 0c		ldy #$0c	        LDY #$0C
.2399	a9 12		lda #$12	        LDA #$12
.239b	20 18 24	jsr $2418	        JSR s2418    ;copies printer driver and disk name from $6d85 to $8465
.239e	ad 89 84	lda $8489	        LDA curDrive ;using current drive number...
.23a1	18		clc		        CLC
.23a2	69 39		adc #$39	        ADC #$39     ;...determine PETSCII value
.23a4	8d 5d 27	sta $275d	        STA a275D    ;and store at $275D for Drive A,B.C text message string
.23a7	a5 05		lda $05		        LDA r1H
.23a9	48		pha		        PHA
.23aa	a5 04		lda $04		        LDA r1L
.23ac	48		pha		        PHA
.23ad	a2 23		ldx #$23	        LDX #$23
.23af	a9 ff		lda #$ff	        LDA #$FF
.23b1	20 83 24	jsr $2483	        JSR s2483    ;COMMON DIALOG BOX ROUTINE ============================
.23b4	68		pla		        PLA
.23b5	85 04		sta $04		        STA r1L
.23b7	68		pla		        PLA
.23b8	85 05		sta $05		        STA r1H
.23ba	a2 0c		ldx #$0c	        LDX #$0C
.23bc	a5 02		lda $02		        LDA r0L
.23be	c9 02		cmp #$02	        CMP #$02
.23c0	d0 c1		bne $2383	        BNE j2383
.23c2	ad ec 04	lda $04ec	j23C2   LDA a04EC
.23c5	f0 0f		beq $23d6	        BEQ b23D6
.23c7	a9 51		lda #$51	        LDA #>p5175
.23c9	85 11		sta $11		        STA r7H      ;start address of application
.23cb	a9 75		lda #$75	        LDA #<p5175
.23cd	85 10		sta $10		        STA r7L      ;start address of application
.23cf	a9 00		lda #$00	        LDA #$00
.23d1	85 02		sta $02		        STA r0L      ;options byte: %00xxxxxx = not passing data, not printing
.23d3	4c 2f c2	jmp $c22f	        JMP StartAppl ;warm start GEOS and jsr to application already in memory
.23d6	20 15 25	jsr $2515	b23D6   JSR s2515
.23d9	4c 2c c2	jmp $c22c	        JMP EnterDeskTop
.23dc	a5 79		lda $79		s23DC   LDA a79
.23de	4c f1 1a	jmp $1af1	        JMP s1AF1
.23e1	20 71 38	jsr $3871	s23E1   JSR s3871
.23e4	a5 05		lda $05		s23E4   LDA r1H
.23e6	48		pha		        PHA
.23e7	a5 04		lda $04		        LDA r1L
.23e9	48		pha		        PHA
.23ea	20 a1 c2	jsr $c2a1	        JSR OpenDisk ;     Open the disk in the current drive
.23ed	68		pla		        PLA
.23ee	85 04		sta $04		        STA r1L
.23f0	68		pla		        PLA
.23f1	85 05		sta $05		        STA r1H
.23f3	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.23f6	a2 0c		ldx #$0c	        LDX #$0C     ;zero page address of pointer to source string
.23f8	a0 04		ldy #$04	        LDY #$04     ;zero page address of pointer to destination string
.23fa	a9 12		lda #$12	        LDA #$12     ;length of strings
.23fc	4c 6e c2	jmp $c26e	        JMP CmpFString ;     Compare two fixed length strings
>23ff	81 0b 10 10 5f 27 0b 10		        .BYTE $81,$0B,$10,$10,$5F,$27,$0B,$10
>2407	20 80 8b 0b 10 30 51 27		        .BYTE $20,$80,$8B,$0B,$10,$30,$51,$27
>240f	01 01 48 02 11 48 00		        .BYTE $01,$01,$48,$02,$11,$48,$00
.2416	a9 10		lda #$10	s2416   LDA #$10
.2418	8e 26 24	stx $2426	s2418   STX a2426
.241b	8c 28 24	sty $2428	        STY a2428
.241e	8c 3a 24	sty $243a	        STY a243A
.2421	85 20		sta $20		        STA r15L
.2423	a0 00		ldy #$00	        LDY #$00
=9254					a2426   =*+$01
.2425	b1 00		lda ($00),y	b2425   LDA (p00),Y
=9256					a2428   =*+$01
.2427	91 00		sta ($00),y	        STA (p00),Y
.2429	c9 a0		cmp #$a0	        CMP #$A0
.242b	f0 02		beq $242f	        BEQ b242F
.242d	84 21		sty $21		        STY r15H
.242f	c8		iny		b242F   INY
.2430	c6 20		dec $20		        DEC r15L
.2432	d0 f1		bne $2425	        BNE b2425
.2434	a4 21		ldy $21		        LDY r15H
.2436	c8		iny		        INY
.2437	a9 00		lda #$00	        LDA #$00
=9274					a243A   =*+$01
.2439	91 00		sta ($00),y	        STA (p00),Y
.243b	60		rts		        RTS
.243c	ac 89 84	ldy $8489	        LDY curDrive
.243f	b9 86 84	lda $8486,y	s243F   LDA f8486,Y
.2442	29 07		and #$07	        AND #$07
.2444	c9 02		cmp #$02	        CMP #$02
.2446	60		rts		        RTS
.2447	a9 00		lda #$00	s2447   LDA #$00
=9290					s244A   =*+$01
.2449	2c a9 02	bit $02a9	        BIT a02A9    ;LDA #$02
.244c	4c 39 c1	jmp $c139	        JMP SetPattern
>244f	27 2c 2d 30 31 2c 2d		f244F   .BYTE $27,$2C,$2D,$30,$31,$2C,$2D
>2456	38 d8 18 ee 22 fc 48		f2456   .BYTE $38,$D8,$18,$EE,$22,$FC,$48
>245d	27 2c 2d 31 31 2d 2d		f245D   .BYTE $27,$2C,$2D,$31,$31,$2D,$2D
>2464	27 f4 33 07 42 33 66		f2464   .BYTE $27,$F4,$33,$07,$42,$33,$66
.246b	b9 56 24	lda $2456,y	s246B   LDA f2456,Y
.246e	85 0c		sta $0c		        STA r5L
.2470	b9 4f 24	lda $244f,y	        LDA f244F,Y
.2473	85 0d		sta $0d		        STA r5H
.2475	b9 64 24	lda $2464,y	        LDA f2464,Y
.2478	85 0e		sta $0e		        STA r6L
.247a	b9 5d 24	lda $245d,y	        LDA f245D,Y
.247d	85 0f		sta $0f		        STA r6H
.247f	a2 25		ldx #$25	        LDX #>p2504
.2481	a9 04		lda #$04	        LDA #<p2504
.2483	86 03		stx $03		s2483   STX r0H
.2485	85 02		sta $02		        STA r0L
.2487	a5 0d		lda $0d		        LDA r5H
.2489	48		pha		        PHA
.248a	a5 0c		lda $0c		        LDA r5L
.248c	48		pha		        PHA
.248d	a5 0f		lda $0f		        LDA r6H
.248f	48		pha		        PHA
.2490	a5 0e		lda $0e		        LDA r6L
.2492	48		pha		        PHA
.2493	a5 11		lda $11		        LDA r7H
.2495	48		pha		        PHA
.2496	a5 10		lda $10		        LDA r7L
.2498	48		pha		        PHA
.2499	20 f0 24	jsr $24f0	        JSR s24F0    ;restores RecoverVector if a dialog box has altered it
.249c	f0 05		beq $24a3	        BEQ b24A3
.249e	a2 00		ldx #$00	        LDX #$00
.24a0	20 a4 4d	jsr $4da4	        JSR s4DA4    ;before drawing menus or dialog boxes
.24a3	ad 88 8e	lda $8e88	b24A3   LDA a8E88
.24a6	48		pha		        PHA
.24a7	ad c0 8c	lda $8cc0	        LDA a8CC0
.24aa	48		pha		        PHA
.24ab	a9 00		lda #$00	        LDA #>r3L
.24ad	85 09		sta $09		        STA r3H
.24af	a9 08		lda #$08	        LDA #<r3L
.24b1	85 08		sta $08		        STA r3L
.24b3	a9 00		lda #$00	        LDA #>r15L
.24b5	85 0b		sta $0b		        STA r4H
.24b7	a9 20		lda #$20	        LDA #<r15L
.24b9	85 0a		sta $0a		        STA r4L
.24bb	a9 04		lda #$04	        LDA #<p1004
.24bd	85 06		sta $06		        STA r2L
.24bf	a9 10		lda #$10	        LDA #>p1004
.24c1	85 07		sta $07		        STA r2H
.24c3	ad 1e 85	lda $851e	        LDA screencolors
.24c6	85 0e		sta $0e		        STA r6L
.24c8	20 87 26	jsr $2687	        JSR s2687
.24cb	68		pla		        PLA
.24cc	8d c0 8c	sta $8cc0	        STA a8CC0
.24cf	68		pla		        PLA
.24d0	8d 88 8e	sta $8e88	        STA a8E88
.24d3	68		pla		        PLA
.24d4	85 10		sta $10		        STA r7L
.24d6	68		pla		        PLA
.24d7	85 11		sta $11		        STA r7H
.24d9	68		pla		        PLA
.24da	85 0e		sta $0e		        STA r6L
.24dc	68		pla		        PLA
.24dd	85 0f		sta $0f		        STA r6H
.24df	68		pla		        PLA
.24e0	85 0c		sta $0c		        STA r5L
.24e2	68		pla		        PLA
.24e3	85 0d		sta $0d		        STA r5H
.24e5	20 56 c2	jsr $c256	        JSR DoDlgBox ;     Actually starts the dialog box handler
.24e8	20 f0 24	jsr $24f0	        JSR s24F0    ;restores RecoverVector if a dialog box has altered it
.24eb	d0 16		bne $2503	        BNE b2503
.24ed	4c f4 26	jmp $26f4	        JMP j26F4    ;comes here after drawing pad and disk info - seems to draw file icons
.24f0	a2 ff		ldx #$ff	s24F0   LDX #$FF
.24f2	ad b1 84	lda $84b1	        LDA RecoverVector_LO
.24f5	c9 77		cmp #$77	        CMP #$77
.24f7	d0 07		bne $2500	        BNE b2500
.24f9	ad b2 84	lda $84b2	        LDA RecoverVector_HI
.24fc	c9 4d		cmp #$4d	        CMP #$4D
.24fe	f0 02		beq $2502	        BEQ b2502
.2500	a2 00		ldx #$00	b2500   LDX #$00
.2502	8a		txa		b2502   TXA
.2503	60		rts		b2503   RTS
>2504	81 0c 10 20 0c 0c 10 30		p2504   .BYTE $81,$0C,$10,$20,$0C,$0C,$10,$30
>250c	0e 01 11 48 00			        .BYTE $0E,$01,$11,$48,$00
.2511	a9 c0		lda #$c0	s2511   LDA #$C0     ;draw on both foreground and background screens
.2513	85 2f		sta $2f		        STA displayBufferOn
.2515	a5 15		lda $15		s2515   LDA r9H
.2517	48		pha		        PHA
.2518	a5 14		lda $14		        LDA r9L
.251a	48		pha		        PHA
.251b	20 fa 26	jsr $26fa	        JSR s26FA
.251e	20 a8 c1	jsr $c1a8	        JSR i_GraphicsString ;new pattern (2), move pen to X=0,Y=0, rectangle to x=319, y=199
>2521	05 02 01 00 00 00 03 3f		        .BYTE $05,$02,$01,$00,$00,$00,$03,$3F
>2529	01 c7 00			        .BYTE $01,$C7,$00
.252c	68		pla		        PLA
.252d	85 14		sta $14		        STA r9L
.252f	68		pla		        PLA
.2530	85 15		sta $15		        STA r9H
.2532	60		rts		        RTS
.2533	48		pha		s2533   PHA
.2534	ad 0f c0	lda $c00f	        LDA version
.2537	c9 20		cmp #$20	        CMP #$20
.2539	68		pla		        PLA
.253a	60		rts		        RTS
.253b	8a		txa		s253B   TXA
.253c	f0 02		beq $2540	        BEQ b2540
.253e	68		pla		        PLA
.253f	68		pla		        PLA
.2540	60		rts		b2540   RTS
.2541	18		clc		s2541   CLC
.2542	a9 02		lda #$02	        LDA #$02
.2544	65 16		adc $16		        ADC r10L
.2546	85 16		sta $16		        STA r10L
.2548	90 02		bcc $254c	        BCC b254C
.254a	e6 17		inc $17		        INC r10H
.254c	60		rts		b254C   RTS
.254d	a9 80		lda #$80	s254D   LDA #>diskBlkBuf
.254f	85 0b		sta $0b		        STA r4H
.2551	a9 00		lda #$00	        LDA #<diskBlkBuf
.2553	85 0a		sta $0a		        STA r4L
.2555	60		rts		        RTS
.2556	20 62 25	jsr $2562	        JSR s2562    ;load r6 with $8be4
.2559	a9 8b		lda #$8b	s2559   LDA #>p8B80
.255b	85 0d		sta $0d		        STA r5H
.255d	a9 80		lda #$80	        LDA #<p8B80
.255f	85 0c		sta $0c		        STA r5L
.2561	60		rts		        RTS
.2562	a9 8b		lda #$8b	s2562   LDA #>p8BE4
.2564	85 0f		sta $0f		        STA r6H
.2566	a9 e4		lda #$e4	        LDA #<p8BE4
.2568	85 0e		sta $0e		        STA r6L
.256a	60		rts		        RTS
.256b	a9 8b		lda #$8b	s256B   LDA #>p8B80
.256d	85 0f		sta $0f		        STA r6H
.256f	a9 80		lda #$80	        LDA #<p8B80
.2571	85 0e		sta $0e		        STA r6L
.2573	60		rts		        RTS
.2574	a9 27		lda #$27	s2574   LDA #>p2727
.2576	85 17		sta $17		        STA r10H
.2578	a9 27		lda #$27	        LDA #<p2727
.257a	85 16		sta $16		        STA r10L
.257c	60		rts		        RTS
.257d	a5 0d		lda $0d		        LDA r5H
.257f	f0 19		beq $259a	        BEQ s259A
.2581	8a		txa		        TXA
.2582	48		pha		        PHA
.2583	a5 0c		lda $0c		        LDA r5L
.2585	18		clc		        CLC
.2586	69 03		adc #$03	        ADC #$03
.2588	85 0c		sta $0c		        STA r5L
.258a	90 02		bcc $258e	        BCC b258E
.258c	e6 0d		inc $0d		        INC r5H
.258e	a2 0c		ldx #$0c	b258E   LDX #$0C
.2590	a0 0c		ldy #$0c	        LDY #$0C
.2592	20 16 24	jsr $2416	        JSR s2416
.2595	68		pla		        PLA
.2596	aa		tax		        TAX
.2597	b8		clv		        CLV
.2598	50 08		bvc $25a2	        BVC b25A2
.259a	a9 25		lda #$25	s259A   LDA #>p25EE
.259c	85 0d		sta $0d		        STA r5H
.259e	a9 ee		lda #$ee	        LDA #<p25EE
.25a0	85 0c		sta $0c		        STA r5L
.25a2	a9 00		lda #$00	b25A2   LDA #$00
.25a4	85 7d		sta $7d		        STA a7D
.25a6	e0 ff		cpx #$ff	        CPX #$FF
.25a8	f0 2b		beq $25d5	        BEQ b25D5
.25aa	e0 0c		cpx #$0c	        CPX #$0C
.25ac	f0 27		beq $25d5	        BEQ b25D5
.25ae	8a		txa		        TXA
.25af	f0 24		beq $25d5	        BEQ b25D5
.25b1	20 ef 25	jsr $25ef	        JSR s25EF
.25b4	8a		txa		        TXA
.25b5	8d 5f 26	sta $265f	        STA a265F
.25b8	a0 00		ldy #$00	        LDY #$00
.25ba	d9 50 26	cmp $2650,y	b25BA   CMP f2650,Y
.25bd	f0 05		beq $25c4	        BEQ b25C4
.25bf	c8		iny		        INY
.25c0	c8		iny		        INY
.25c1	c8		iny		        INY
.25c2	d0 f6		bne $25ba	        BNE b25BA
.25c4	b9 51 26	lda $2651,y	b25C4   LDA f2651,Y
.25c7	85 0e		sta $0e		        STA r6L
.25c9	b9 52 26	lda $2652,y	        LDA f2652,Y
.25cc	85 0f		sta $0f		        STA r6H
.25ce	a2 25		ldx #$25	        LDX #$25
.25d0	a9 d8		lda #$d8	        LDA #$D8
.25d2	20 83 24	jsr $2483	        JSR s2483    ;COMMON DIALOG BOX ROUTINE ============================
.25d5	a2 00		ldx #$00	b25D5   LDX #$00
.25d7	60		rts		        RTS
>25d8	81 0b 0c 16 74 27 0b 0c		        .BYTE $81,$0B,$0C,$16,$74,$27,$0B,$0C
>25e0	26 8f 27 0c 0c 36 0e 0c		        .BYTE $26,$8F,$27,$0C,$0C,$36,$0E,$0C
>25e8	0c 46 0c 01 11 48		        .BYTE $0C,$46,$0C,$01,$11,$48
>25ee	00				p25EE   .BYTE $00
.25ef	8a		txa		s25EF   TXA
.25f0	a0 02		ldy #$02	        LDY #$02
.25f2	20 09 26	jsr $2609	        JSR s2609
.25f5	ad 89 84	lda $8489	        LDA curDrive
.25f8	18		clc		        CLC
.25f9	69 39		adc #$39	        ADC #$39
.25fb	8d 35 26	sta $2635	        STA a2635
.25fe	a5 04		lda $04		        LDA r1L
.2600	a0 15		ldy #$15	        LDY #$15
.2602	20 09 26	jsr $2609	        JSR s2609
.2605	a5 05		lda $05		        LDA r1H
.2607	a0 1f		ldy #$1f	        LDY #$1F
.2609	48		pha		s2609   PHA
.260a	20 18 26	jsr $2618	        JSR s2618
.260d	99 28 26	sta $2628,y	        STA f2628,Y
.2610	68		pla		        PLA
.2611	20 1c 26	jsr $261c	        JSR s261C
.2614	99 29 26	sta $2629,y	        STA f2629,Y
.2617	60		rts		        RTS
.2618	4a		lsr a		s2618   LSR
.2619	4a		lsr a		        LSR
.261a	4a		lsr a		        LSR
.261b	4a		lsr a		        LSR
.261c	29 0f		and #$0f	s261C   AND #$0F
.261e	09 30		ora #$30	        ORA #$30
.2620	c9 3a		cmp #$3a	        CMP #$3A
.2622	90 03		bcc $2627	        BCC b2627
.2624	18		clc		        CLC
.2625	69 07		adc #$07	        ADC #$07
.2627	60		rts		b2627   RTS
>2628	49				f2628   .BYTE $49
>2629	3a 32 33 20 20 1b 44 72		f2629   .BYTE $3A,$32,$33,$20,$20,$1B,$44,$72
>2631	69 76 65 20			        .BYTE $69,$76,$65,$20
>2635	41 20 74 72 61 63 6b 20		a2635   .BYTE $41,$20,$74,$72,$61,$63,$6B,$20
>263d	30 32 20 73 65 63 74 6f		        .BYTE $30,$32,$20,$73,$65,$63,$74,$6F
>2645	72 20 30 36 20 28 68 65		        .BYTE $72,$20,$30,$36,$20,$28,$68,$65
>264d	78 29 00			        .BYTE $78,$29,$00
>2650	03				f2650   .BYTE $03
>2651	9b				f2651   .BYTE $9B
>2652	27 04 a5 27 21 b5 27 26		f2652   .BYTE $27,$04,$A5,$27,$21,$B5,$27,$26
>265a	d2 27 80 ed 27			        .BYTE $D2,$27,$80,$ED,$27
>265f	00 28 26			a265F   .BYTE $00,$28,$26
.2662	a0 00		ldy #$00	MainMenuHandler LDY #$00
.2664	b1 02		lda ($02),y	b2664   LDA (r0L),Y
.2666	99 06 00	sta $0006,y	        STA r2L,Y
.2669	c8		iny		        INY
.266a	c0 06		cpy #$06	        CPY #$06
.266c	d0 f6		bne $2664	        BNE b2664
.266e	ad 27 8c	lda $8c27	        LDA a8C27
.2671	85 0e		sta $0e		        STA r6L
.2673	a2 06		ldx #$06	        LDX #$06
.2675	20 d1 26	jsr $26d1	        JSR s26D1    ;divide the register rX by 8
.2678	a2 07		ldx #$07	        LDX #$07
.267a	20 d1 26	jsr $26d1	        JSR s26D1    ;divide the register rX by 8
.267d	a2 08		ldx #$08	        LDX #$08
.267f	20 d1 26	jsr $26d1	        JSR s26D1    ;divide the register rX by 8
.2682	a2 0a		ldx #$0a	        LDX #$0A
.2684	20 d1 26	jsr $26d1	        JSR s26D1    ;divide the register rX by 8
.2687	a5 0a		lda $0a		s2687   LDA r4L
.2689	38		sec		        SEC
.268a	e5 08		sbc $08		        SBC r3L
.268c	85 0a		sta $0a		        STA r4L
.268e	a5 07		lda $07		        LDA r2H
.2690	38		sec		        SEC
.2691	e5 06		sbc $06		        SBC r2L
.2693	85 07		sta $07		        STA r2H
.2695	a5 06		lda $06		        LDA r2L
.2697	85 0c		sta $0c		        STA r5L
.2699	a9 00		lda #$00	        LDA #$00
.269b	85 0d		sta $0d		        STA r5H
.269d	20 d9 26	jsr $26d9	        JSR s26D9
.26a0	18		clc		        CLC
.26a1	a9 00		lda #$00	        LDA #$00
.26a3	65 0c		adc $0c		        ADC r5L
.26a5	85 0c		sta $0c		        STA r5L
.26a7	a9 8c		lda #$8c	        LDA #$8C
.26a9	65 0d		adc $0d		        ADC r5H
.26ab	85 0d		sta $0d		        STA r5H
.26ad	a5 08		lda $08		        LDA r3L
.26af	18		clc		        CLC
.26b0	65 0c		adc $0c		        ADC r5L
.26b2	85 0c		sta $0c		        STA r5L
.26b4	90 02		bcc $26b8	        BCC b26B8
.26b6	e6 0d		inc $0d		        INC r5H
.26b8	a4 0a		ldy $0a		b26B8   LDY r4L
.26ba	a5 0e		lda $0e		b26BA   LDA r6L
.26bc	91 0c		sta ($0c),y	        STA (r5L),Y
.26be	88		dey		        DEY
.26bf	10 f9		bpl $26ba	        BPL b26BA
.26c1	18		clc		        CLC
.26c2	a9 28		lda #$28	        LDA #$28
.26c4	65 0c		adc $0c		        ADC r5L
.26c6	85 0c		sta $0c		        STA r5L
.26c8	90 02		bcc $26cc	        BCC b26CC
.26ca	e6 0d		inc $0d		        INC r5H
.26cc	c6 07		dec $07		b26CC   DEC r2H
.26ce	10 e8		bpl $26b8	        BPL b26B8
.26d0	60		rts		        RTS
.26d1	b5 00		lda $00,x	s26D1   LDA f00,X
.26d3	4a		lsr a		        LSR
.26d4	4a		lsr a		        LSR
.26d5	4a		lsr a		        LSR
.26d6	95 00		sta $00,x	        STA f00,X
.26d8	60		rts		        RTS
.26d9	a5 0c		lda $0c		s26D9   LDA r5L
.26db	0a		asl a		        ASL
.26dc	26 0d		rol $0d		        ROL r5H
.26de	0a		asl a		        ASL
.26df	26 0d		rol $0d		        ROL r5H
.26e1	18		clc		        CLC
.26e2	65 0c		adc $0c		        ADC r5L
.26e4	90 02		bcc $26e8	        BCC b26E8
.26e6	e6 0d		inc $0d		        INC r5H
.26e8	0a		asl a		b26E8   ASL
.26e9	26 0d		rol $0d		        ROL r5H
.26eb	0a		asl a		        ASL
.26ec	26 0d		rol $0d		        ROL r5H
.26ee	0a		asl a		        ASL
.26ef	26 0d		rol $0d		        ROL r5H
.26f1	85 0c		sta $0c		        STA r5L
.26f3	60		rts		        RTS
.26f4	ad f0 8f	lda $8ff0	j26F4   LDA a8FF0
.26f7	b8		clv		        CLV
.26f8	50 03		bvc $26fd	        BVC b26FD
.26fa	ad 1e 85	lda $851e	s26FA   LDA screencolors
.26fd	20 33 25	jsr $2533	b26FD   JSR s2533    ;compare version to 32
.2700	90 24		bcc $2726	        BCC b2726
.2702	a8		tay		        TAY
.2703	a5 02		lda $02		        LDA r0L
.2705	48		pha		        PHA
.2706	a9 02		lda #$02	        LDA #<p1102
.2708	85 06		sta $06		        STA r2L
.270a	a9 11		lda #$11	        LDA #>p1102
.270c	85 07		sta $07		        STA r2H
.270e	a9 00		lda #$00	        LDA #>p01
.2710	85 09		sta $09		        STA r3H
.2712	a9 01		lda #$01	        LDA #<p01
.2714	85 08		sta $08		        STA r3L
.2716	a9 00		lda #$00	        LDA #>r15L
.2718	85 0b		sta $0b		        STA r4H
.271a	a9 20		lda #$20	        LDA #<r15L
.271c	85 0a		sta $0a		        STA r4L
.271e	84 0e		sty $0e		        STY r6L
.2720	20 87 26	jsr $2687	        JSR s2687
.2723	68		pla		        PLA
.2724	85 02		sta $02		        STA r0L
.2726	60		rts		b2726   RTS
>2727	64 65 73 6b 54 6f 70 20		p2727   .TEXT "deskTop AM  V2.0", $00
>272f	41 4d 20 20 56 32 2e 30 00
>2738	18 50 6c 65 61 73 65 20		        .TEXT $18, "Please insert disk with", $00
>2740	69 6e 73 65 72 74 20 64 69 73 6b 20 77 69 74 68
>2750	00
>2751	18 49 6e 20 64 72 69 76		        .TEXT $18, "In drive:  "
>2759	65 3a 20 20
>275d	41 00				a275D   .TEXT "A", $00
>275f	18 50 6c 65 61 73 65 20		        .TEXT $18, "Please insert disk:", $00
>2767	69 6e 73 65 72 74 20 64 69 73 6b 3a 00
>2774	18 4f 70 65 72 61 74 69		        .TEXT $18, "Operation canceled due to", $00
>277c	6f 6e 20 63 61 6e 63 65 6c 65 64 20 64 75 65 20
>278c	74 6f 00
>278f	64 69 73 6b 20 65 72 72		        .TEXT "disk error:", $00
>2797	6f 72 3a 00
>279b	44 69 73 6b 20 66 75 6c		        .TEXT "Disk full", $00
>27a3	6c 00
>27a5	44 69 72 65 63 74 6f 72		        .TEXT "Directory full.", $00
>27ad	79 20 66 75 6c 6c 2e 00
>27b5	4d 69 73 73 69 6e 67 20		        .TEXT "Missing or unformatted disk.", $00
>27bd	6f 72 20 75 6e 66 6f 72 6d 61 74 74 65 64 20 64
>27cd	69 73 6b 2e 00
>27d2	57 72 69 74 65 20 70 72		        .TEXT "Write protect tab on disk.", $00
>27da	6f 74 65 63 74 20 74 61 62 20 6f 6e 20 64 69 73
>27ea	6b 2e 00
>27ed	44 6f 75 62 6c 65 2d 73		        .TEXT "Double-sided disk in 1541.", $00
>27f5	69 64 65 64 20 64 69 73 6b 20 69 6e 20 31 35 34
>2805	31 2e 00
>2808	c2 55 ff d5			p2808   .TEXT $C2, "U", $FF, $D5
>280c	be 21 7e e4 51 13 be 4a		        .BYTE $BE,$21,$7E,$E4,$51,$13,$BE,$4A
>2814	7d c1 ff 83 c0 00 45 a2		        .BYTE $7D,$C1,$FF,$83,$C0,$00,$45,$A2
>281c	10 45 a2 10 ab a5 28 ab		        .BYTE $10,$45,$A2,$10,$AB,$A5,$28,$AB
>2824	95 29 11 98 c5 11 88 c6		        .BYTE $95,$29,$11,$98,$C5,$11,$88,$C6
>282c	11 48 82 2b d8 c2 2a 54		        .BYTE $11,$48,$82,$2B,$D8,$C2,$2A,$54
>2834	c6 27 e5 45 46 65 29 43		        .BYTE $C6,$27,$E5,$45,$46,$65,$29,$43
>283c	c2 28 82 72 10 8d ae 10		        .BYTE $C2,$28,$82,$72,$10,$8D,$AE,$10
>2844	7a 55 ff d5 aa aa aa b3		        .BYTE $7A,$55,$FF,$D5,$AA,$AA,$AA,$B3
>284c	ab ff aa 55 00 55 aa bc		        .BYTE $AB,$FF,$AA,$55,$00,$55,$AA,$BC
>2854	2a 55 80 35 ab 1c 6a 56		        .BYTE $2A,$55,$80,$35,$AB,$1C,$6A,$56
>285c	00 ff ae 3c a3 59 00 75		        .BYTE $00,$FF,$AE,$3C,$A3,$59,$00,$75
>2864	b3 ff e9 67 ff 9d c0 00		        .BYTE $B3,$FF,$E9,$67,$FF,$9D,$C0,$00
>286c	3d ff ff df 80 00 5e 9f		        .BYTE $3D,$FF,$FF,$DF,$80,$00,$5E,$9F
>2874	c0 5d 80 06 5a 80 00 75		        .BYTE $C0,$5D,$80,$06,$5A,$80,$00,$75
>287c	ff ff ea bf ff ff ff 80		        .BYTE $FF,$FF,$EA,$BF,$FF,$FF,$FF,$80
>2884	00 01 80 00 01 80 00 01		        .BYTE $00,$01,$80,$00,$01,$80,$00,$01
>288c	80 00 03 80 3c 02 80 66		        .BYTE $80,$00,$03,$80,$3C,$02,$80,$66
>2894	03 80 c3 01 80 c3 01 80		        .BYTE $03,$80,$C3,$01,$80,$C3,$01,$80
>289c	66 01 80 3c c1 80 00 c1		        .BYTE $66,$01,$80,$3C,$C1,$80,$00,$C1
>28a4	80 00 01 80 00 01 80 18		        .BYTE $80,$00,$01,$80,$00,$01,$80,$18
>28ac	01 80 18 01 80 18 01 80		        .BYTE $01,$80,$18,$01,$80,$18,$01,$80
>28b4	18 01 80 18 01 80 00 01		        .BYTE $18,$01,$80,$18,$01,$80,$00,$01
>28bc	ff ff ff bf ff ff ff 80		        .BYTE $FF,$FF,$FF,$BF,$FF,$FF,$FF,$80
>28c4	00 01 80 00 01 80 00 01		        .BYTE $00,$01,$80,$00,$01,$80,$00,$01
>28cc	80 78 07 80 fc 04 81 86		        .BYTE $80,$78,$07,$80,$FC,$04,$81,$86
>28d4	07 81 86 01 80 0e 01 80		        .BYTE $07,$81,$86,$01,$80,$0E,$01,$80
>28dc	1c 01 80 38 01 80 30 01		        .BYTE $1C,$01,$80,$38,$01,$80,$30,$01
>28e4	80 30 01 80 00 01 80 30		        .BYTE $80,$30,$01,$80,$00,$01,$80,$30
>28ec	01 80 30 01 80 00 01 80		        .BYTE $01,$80,$30,$01,$80,$00,$01,$80
>28f4	00 01 80 00 01 80 00 01		        .BYTE $00,$01,$80,$00,$01,$80,$00,$01
>28fc	ff ff ff bf 00 00 fc 00		        .BYTE $FF,$FF,$FF,$BF,$00,$00,$FC,$00
>2904	01 02 ff fe 01 80 00 01		        .BYTE $01,$02,$FF,$FE,$01,$80,$00,$01
>290c	80 fc 01 81 fc 01 83 83		        .BYTE $80,$FC,$01,$81,$FC,$01,$83,$83
>2914	e1 83 83 c1 83 80 01 83		        .BYTE $E1,$83,$83,$C1,$83,$80,$01,$83
>291c	83 c1 83 83 e1 81 fc 01		        .BYTE $83,$C1,$83,$83,$E1,$81,$FC,$01
>2924	80 fc 01 80 00 01 81 c1		        .BYTE $80,$FC,$01,$80,$00,$01,$81,$C1
>292c	01 82 03 01 83 c5 01 82		        .BYTE $01,$82,$03,$01,$83,$C5,$01,$82
>2934	2f 81 81 c1 01 80 00 01		        .BYTE $2F,$81,$81,$C1,$01,$80,$00,$01
>293c	ff ff ff a0 ff ff 81 02		        .BYTE $FF,$FF,$FF,$A0,$FF,$FF,$81,$02
>2944	83 82 87 c2 8f e2 9f f2		        .BYTE $83,$82,$87,$C2,$8F,$E2,$9F,$F2
>294c	83 82 80 02 80 02 83 82		        .BYTE $83,$82,$80,$02,$80,$02,$83,$82
>2954	9f f2 8f e2 87 c2 83 82		        .BYTE $9F,$F2,$8F,$E2,$87,$C2,$83,$82
>295c	81 02 ff ff a0 ff ff c0		        .BYTE $81,$02,$FF,$FF,$A0,$FF,$FF,$C0
>2964	01 a0 01 90 01 88 01 84		        .BYTE $01,$A0,$01,$90,$01,$88,$01,$84
>296c	01 82 01 81 01 80 81 80		        .BYTE $01,$82,$01,$81,$01,$80,$81,$80
>2974	41 80 21 80 11 80 09 80		        .BYTE $41,$80,$21,$80,$11,$80,$09,$80
>297c	05 80 03 80 01 96 ff ff		        .BYTE $05,$80,$03,$80,$01,$96,$FF,$FF
>2984	80 01 80 01 80 01 87 e1		        .BYTE $80,$01,$80,$01,$80,$01,$87,$E1
>298c	87 e1 87 e1 80 01 80 01		        .BYTE $87,$E1,$87,$E1,$80,$01,$80,$01
>2994	80 01 ff ff			        .BYTE $80,$01,$FF,$FF
>2998	04 32 00 06 08 00 ca 00		p2998   .BYTE $04,$32,$00,$06,$08,$00,$CA,$00
>29a0	00 00 03 00 05 00 09 00		        .BYTE $00,$00,$03,$00,$05,$00,$09,$00
>29a8	0f 00 13 00 19 00 1f 00		        .BYTE $0F,$00,$13,$00,$19,$00,$1F,$00
>29b0	21 00 24 00 27 00 2d 00		        .BYTE $21,$00,$24,$00,$27,$00,$2D,$00
>29b8	31 00 34 00 38 00 3a 00		        .BYTE $31,$00,$34,$00,$38,$00,$3A,$00
>29c0	3f 00 43 00 46 00 4a 00		        .BYTE $3F,$00,$43,$00,$46,$00,$4A,$00
>29c8	4e 00 52 00 56 00 5a 00		        .BYTE $4E,$00,$52,$00,$56,$00,$5A,$00
>29d0	5e 00 62 00 66 00 68 00		        .BYTE $5E,$00,$62,$00,$66,$00,$68,$00
>29d8	6b 00 6e 00 72 00 75 00		        .BYTE $6B,$00,$6E,$00,$72,$00,$75,$00
>29e0	79 00 7e 00 83 00 88 00		        .BYTE $79,$00,$7E,$00,$83,$00,$88,$00
>29e8	8c 00 91 00 95 00 99 00		        .BYTE $8C,$00,$91,$00,$95,$00,$99,$00
>29f0	9e 00 a3 00 a5 00 a8 00		        .BYTE $9E,$00,$A3,$00,$A5,$00,$A8,$00
>29f8	ad 00 b1 00 b7 00 bc 00		        .BYTE $AD,$00,$B1,$00,$B7,$00,$BC,$00
>2a00	c1 00 c6 00 cb 00 d0 00		        .BYTE $C1,$00,$C6,$00,$CB,$00,$D0,$00
>2a08	d4 00 d8 00 dd 00 e3 00		        .BYTE $D4,$00,$D8,$00,$DD,$00,$E3,$00
>2a10	e9 00 ed 00 f1 00 f5 00		        .BYTE $E9,$00,$ED,$00,$F1,$00,$F5,$00
>2a18	f8 00 fe 00 01 01 05 01		        .BYTE $F8,$00,$FE,$00,$01,$01,$05,$01
>2a20	0c 01 0f 01 13 01 17 01		        .BYTE $0C,$01,$0F,$01,$13,$01,$17,$01
>2a28	1a 01 1e 01 22 01 25 01		        .BYTE $1A,$01,$1E,$01,$22,$01,$25,$01
>2a30	29 01 2d 01 2f 01 32 01		        .BYTE $29,$01,$2D,$01,$2F,$01,$32,$01
>2a38	36 01 38 01 3e 01 42 01		        .BYTE $36,$01,$38,$01,$3E,$01,$42,$01
>2a40	46 01 4a 01 4e 01 51 01		        .BYTE $46,$01,$4A,$01,$4E,$01,$51,$01
>2a48	55 01 58 01 5c 01 60 01		        .BYTE $55,$01,$58,$01,$5C,$01,$60,$01
>2a50	66 01 6a 01 6e 01 72 01		        .BYTE $66,$01,$6A,$01,$6E,$01,$72,$01
>2a58	76 01 78 01 7c 01 81 01		        .BYTE $76,$01,$78,$01,$7C,$01,$81,$01
>2a60	88 01 0a 94 4c 90 94 a8		        .BYTE $88,$01,$0A,$94,$4C,$90,$94,$A8
>2a68	00 00 45 98 5c 9c 88 00		        .BYTE $00,$00,$45,$98,$5C,$9C,$88,$00
>2a70	03 18 ce 37 3b 9d 29 4a		        .BYTE $03,$18,$CE,$37,$3B,$9D,$29,$4A
>2a78	22 93 38 ce 37 4a 2a aa		        .BYTE $22,$93,$38,$CE,$37,$4A,$2A,$AA
>2a80	bb 41 80 04 08 04 08 22		        .BYTE $BB,$41,$80,$04,$08,$04,$08,$22
>2a88	51 00 00 00 02 00 00 00		        .BYTE $51,$00,$00,$00,$02,$00,$00,$00
>2a90	0d 62 80 00 0a be 6d 24		        .BYTE $0D,$62,$80,$00,$0A,$BE,$6D,$24
>2a98	a2 71 00 02 ac 44 d1 05		        .BYTE $A2,$71,$00,$02,$AC,$44,$D1,$05
>2aa0	54 05 d0 a5 29 44 a2 21		        .BYTE $54,$05,$D0,$A5,$29,$44,$A2,$21
>2aa8	29 52 36 d4 a5 29 42 4a		        .BYTE $29,$52,$36,$D4,$A5,$29,$42,$4A
>2ab0	2a aa 8a 20 80 02 6c 4c		        .BYTE $2A,$AA,$8A,$20,$80,$02,$6C,$4C
>2ab8	99 b0 15 69 89 8c 9b 55		        .BYTE $99,$B0,$15,$69,$89,$8C,$9B,$55
>2ac0	55 55 c9 25 00 00 08		        .BYTE $55,$55,$C9,$25,$00,$00,$08
>2ac7	14 c2				        .BYTE $14,$C2
>2ac9	1e 22 fb 87 04 a4 89 59		        .BYTE $1E,$22,$FB,$87,$04,$A4,$89,$59
>2ad1	88 8d 28 09 2d 2e 44 bb		        .BYTE $88,$8D,$28,$09,$2D,$2E,$44,$BB
>2ad9	a1 e9 62 2a b4 a5 29 22		        .BYTE $A1,$E9,$62,$2A,$B4,$A5,$29,$22
>2ae1	4a 2a 92 92 10 90 00 aa		        .BYTE $4A,$2A,$92,$92,$10,$90,$00,$AA
>2ae9	95 52 aa 59 55 55 55 32		        .BYTE $95,$52,$AA,$59,$55,$55,$55,$32
>2af1	55 54 94 91 10 00 00 00		        .BYTE $55,$54,$94,$91,$10,$00,$00,$00
>2af9	3e 65 a4 22 71 00 08 a5		        .BYTE $3E,$65,$A4,$22,$71,$00,$08,$A5
>2b01	05 c5 49 44 05 d0 2d e9		        .BYTE $05,$C5,$49,$44,$05,$D0,$2D,$E9
>2b09	44 a2 25 29 52 22 94 b9		        .BYTE $44,$A2,$25,$29,$52,$22,$94,$B9
>2b11	2e 12 49 4a a9 22 08 a8		        .BYTE $2E,$12,$49,$4A,$A9,$22,$08,$A8
>2b19	00 aa 95 92 aa 59 55 55		        .BYTE $00,$AA,$95,$92,$AA,$59,$55,$55
>2b21	55 1a 55 54 95 11 10 00		        .BYTE $55,$1A,$55,$54,$95,$11,$10,$00
>2b29	00 08 14 c9 9c 22 a8 10		        .BYTE $00,$08,$14,$C9,$9C,$22,$A8,$10
>2b31	50 45 d8 58 88 89 20 01		        .BYTE $50,$45,$D8,$58,$88,$89,$20,$01
>2b39	11 2e 37 3a 1d 2a 4b a2		        .BYTE $11,$2E,$37,$3A,$1D,$2A,$4B,$A2
>2b41	93 20 c9 62 30 85 29 3a		        .BYTE $93,$20,$C9,$62,$30,$85,$29,$3A
>2b49	04 80 00 6c 4c d1 aa 55		        .BYTE $04,$80,$00,$6C,$4C,$D1,$AA,$55
>2b51	55 49 8d 31 32 29 4d c9		        .BYTE $55,$49,$8D,$31,$32,$29,$4D,$C9
>2b59	20 00 00 00 00 40 00 14		        .BYTE $20,$00,$00,$00,$00,$40,$00,$14
>2b61	00 20 00 00			        .TEXT $00, " ", $00, $00
>2b65	00 00 00 00 40 00 00 00		        .BYTE $00,$00,$00,$00,$40,$00,$00,$00
>2b6d	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>2b75	40 00 00 00 00			        .BYTE $40,$00,$00,$00,$00
>2b7a	03 01 87 e0 00 00 01 00		        .TEXT $03, $01, $87, $E0, $00, $00, $01, $00, $80, $00, $01, $04, $00, $00, $00, $08, $0D, "`", $00, $00
>2b82	80 00 01 04 00 00 00 08 0d 60 00 00
>2b8e	18 54 68 69 73 20 69 73		        .TEXT $18, "This is a NON-GEOS disk", $00
>2b96	20 61 20 4e 4f 4e 2d 47 45 4f 53 20 64 69 73 6b
>2ba6	00
>2ba7	43 6f 6e 76 65 72 74 20		        .TEXT "Convert it?", $00
>2baf	69 74 3f 00
>2bb3	20 4b 62 79 74 65 73 20		        .TEXT " Kbytes used", $00
>2bbb	75 73 65 64 00
>2bc0	20 4b 62 79 74 65 73 20		        .TEXT " Kbytes "
>2bc8	66 72 65 65 00 50 72 65		p2BC8   .TEXT "free", $00, "Preferences"
>2bd0	66 65 72 65 6e 63 65 73
>2bd8	a0 a0 a0 a0 a0 50 61 64		p2BD8   .TEXT $A0, $A0, $A0, $A0, $A0, "Pad Colo"
>2be0	20 43 6f 6c 6f
>2be5	72 20 50 72 65 66 a0 a0		        .TEXT "r Pref", $A0, $A0, "DRIVE A", $00, "DRIVE B", $00, "DRIVE C", $00, "Non-GEOS"
>2bed	44 52 49 56 45 20 41 00 44 52 49 56 45 20 42 00
>2bfd	44 52 49 56 45 20 43 00 4e 6f 6e 2d 47 45 4f 53
>2c0d	20 46 69 6c 65			        .TEXT " File"
>2c12	00 42 41 53 49 43 20 50		        .TEXT $00, "BASIC Prg.", $00, "Assembly Prg.", $00, "Data File"
>2c1a	72 67 2e 00 41 73 73 65 6d 62 6c 79 20 50 72 67
>2c2a	2e 00 44 61 74 61 20 46 69 6c 65
>2c35	00 61 20 53 79 73 74 65		        .TEXT $00, "a System File"
>2c3d	6d 20 46 69 6c 65
>2c43	00 44 65 73 6b 20 41 63		        .TEXT $00, "Desk Accessory", $00, "Application", $00, "Appl."
>2c4b	63 65 73 73 6f 72 79 00 41 70 70 6c 69 63 61 74
>2c5b	69 6f 6e 00 41 70 70 6c 2e
>2c64	20 44 61 74 61 00 46 6f		        .TEXT " Data", $00, "Font File"
>2c6c	6e 74 20 46 69 6c 65
>2c73	00 50 72 69 6e 74 65 72		        .TEXT $00, "Printer Driver"
>2c7b	20 44 72 69 76 65 72
>2c82	00				        .TEXT $00
>2c83	20 4e				p2C83   .TEXT " N"
>2c85	4f 54 20 4f 4e 20 44 49		        .TEXT "OT ON DISK ", $00, "C64 Input Driver", $00, "Disk Driver"
>2c8d	53 4b 20 00 43 36 34 20 49 6e 70 75 74 20 44 72
>2c9d	69 76 65 72 00 44 69 73 6b 20 44 72 69 76 65 72
>2cad	00				        .TEXT $00
>2cae	61 20 53 79 73 74 65 6d		p2CAE   .TEXT "a System Boot File"
>2cb6	20 42 6f 6f 74 20 46 69 6c 65
>2cc0	00 54 65 6d 70 00 41 75		        .TEXT $00, "Temp", $00, "Auto-Exec", $00, " AM", $00, " PM", $00, $18, "Only 8 files ma"
>2cc8	74 6f 2d 45 78 65 63 00 20 41 4d 00 20 50 4d 00
>2cd8	18 4f 6e 6c 79 20 38 20 66 69 6c 65 73 20 6d 61
>2ce8	79 20 62 65 20 6f 6e 20		        .TEXT "y be on the", $00, "border.", $00, $18, "This file can't be "
>2cf0	74 68 65 00 62 6f 72 64 65 72 2e 00 18 54 68 69
>2d00	73 20 66 69 6c 65 20 63 61 6e 27 74 20 62 65 20
>2d10	70 72 69 6e 74 65 64 00		        .TEXT "printed", $00, $18, "This file can't be opened", $00, "from "
>2d18	18 54 68 69 73 20 66 69 6c 65 20 63 61 6e 27 74
>2d28	20 62 65 20 6f 70 65 6e 65 64 00 66 72 6f 6d 20
>2d38	74 68 65 20 64 65 73 6b		        .TEXT "the deskTop.", $00, "in", $00, $18, "Can't proceed if applic"
>2d40	54 6f 70 2e 00 69 6e 00 18 43 61 6e 27 74 20 70
>2d50	72 6f 63 65 65 64 20 69 66 20 61 70 70 6c 69 63
>2d60	61 74 69 6f 6e 00 69 73		        .TEXT "ation", $00, "is on a different disk.", $00, $18, "must firs"
>2d68	20 6f 6e 20 61 20 64 69 66 66 65 72 65 6e 74 20
>2d78	64 69 73 6b 2e 00 18 6d 75 73 74 20 66 69 72 73
>2d88	74 20 62 65 20 64 65 6c		        .TEXT "t be dele"
>2d90	65
>2d91	74 65 64 20 66 72 6f 6d		        .TEXT "ted from", $00, "is on the disk.", $00, "OK to overwrite"
>2d99	00 69 73 20 6f 6e 20 74 68 65 20 64 69 73 6b 2e
>2da9	00 4f 4b 20 74 6f 20 6f 76 65 72 77 72 69 74 65
>2db9	3f 00 18 41 00 18 54 68		        .TEXT "?", $00, $18, "A", $00, $18, "The file"
>2dc1	65 20 66 69 6c 65
>2dc7	1b 00 18 50 6c 65 61 73		        .TEXT $1B, $00, $18, "Please insert destination disk", $00, $18, "Put d"
>2dcf	65 20 69 6e 73 65 72 74 20 64 65 73 74 69 6e 61
>2ddf	74 69 6f 6e 20 64 69 73 6b 00 18 50 75 74 20 64
>2def	69 73 6b 20 74 6f 20 66		        .TEXT "isk to format in drive:  "
>2df7	6f 72 6d 61 74 20 69 6e 20 64 72 69 76 65 3a 20
>2e07	20
>2e08	41 00 61			a2E08   .TEXT "A", $00, "a"
>2e0b	6e 64 20 65 6e 74 65 72		        .TEXT "nd enter a name for it:", $1B, $00, $18, "Repla"
>2e13	20 61 20 6e 61 6d 65 20 66 6f 72 20 69 74 3a 1b
>2e23	00 18 52 65 70 6c 61
>2e2a	63 65 20 63 6f 6e 74 65		        .TEXT "ce contents of", $00, "with contents of", $00, $18, "The ope"
>2e32	6e 74 73 20 6f 66 00 77 69 74 68 20 63 6f 6e 74
>2e42	65 6e 74 73 20 6f 66 00 18 54 68 65 20 6f 70 65
>2e52	72 61 74 69 6f 6e 20 72		        .TEXT "ration requested", $00, "may not be performed on"
>2e5a	65 71 75 65 73 74 65 64 00 6d 61 79 20 6e 6f 74
>2e6a	20 62 65 20 70 65 72 66 6f 72 6d 65 64 20 6f 6e
>2e7a	00 74 68 65 20 47 45 4f		        .TEXT $00, "the GEOS Boot disk.", $00, "a Master disk.", $00, "a fi"
>2e82	53 20 42 6f 6f 74 20 64 69 73 6b 2e 00 61 20 4d
>2e92	61 73 74 65 72 20 64 69 73 6b 2e 00 61 20 66 69
>2ea2	6c 65 20 66 72 6f 6d 20		        .TEXT "le from another disk.", $00, " files,", $00, " selected", $00
>2eaa	61 6e 6f 74 68 65 72 20 64 69 73 6b 2e 00 20 66
>2eba	69 6c 65 73 2c 00 20 73 65 6c 65 63 74 65 64 00
>2eca	18 50 6c 65 61 73 65 20		        .TEXT $18, "Please enter new disk name:", $1B, $00, "DESK TOP", $00, $18
>2ed2	65 6e 74 65 72 20 6e 65 77 20 64 69 73 6b 20 6e
>2ee2	61 6d 65 3a 1b 00 44 45 53 4b 20 54 4f 50 00 18
>2ef2	53 65 6c 65 63 74 00 50		        .TEXT "Select", $00, "Printer", $00, " ", $00, "Input", $00, "Device", $00, "geos", $00, "file", $00
>2efa	72 69 6e 74 65 72 00 20 00 49 6e 70 75 74 00 44
>2f0a	65 76 69 63 65 00 67 65 6f 73 00 66 69 6c 65 00
>2f1a	76 69 65 77 00 73 65 6c		        .TEXT "view", $00, "select", $00, "page", $00, "options", $00, "GEOS info", $00, "deskT"
>2f22	65 63 74 00 70 61 67 65 00 6f 70 74 69 6f 6e 73
>2f32	00 47 45 4f 53 20 69 6e 66 6f 00 64 65 73 6b 54
>2f42	6f 70 20 69 6e 66 6f 14		        .TEXT "op info", $14, "\", $00, $80, $18, "Q", $1B, $00, "select printer", $00, "select inp"
>2f4a	5c 00 80 18 51 1b 00 73 65 6c 65 63 74 20 70 72
>2f5a	69 6e 74 65 72 00 73 65 6c 65 63 74 20 69 6e 70
>2f6a	75 74 14 3c 00 80 18 49		        .TEXT "ut", $14, "<", $00, $80, $18, "I", $1B, $00, "open", $14, "\", $00, $80, $18, "Z", $1B, $00, "duplicate", $14, "\", $00, $80, $18, "H", $1B, $00, "r"
>2f72	1b 00 6f 70 65 6e 14 5c 00 80 18 5a 1b 00 64 75
>2f82	70 6c 69 63 61 74 65 14 5c 00 80 18 48 1b 00 72
>2f92	65 6e 61 6d 65 14 5c 00		        .TEXT "ename", $14, "\", $00, $80, $18, "M", $1B, $00, "print", $14, "\", $00, $80, $18, "P", $1B, $00, "delete", $14, "\", $00, $80, $18, "D", $1B, $00
>2f9a	80 18 4d 1b 00 70 72 69 6e 74 14 5c 00 80 18 50
>2faa	1b 00 64 65 6c 65 74 65 14 5c 00 80 18 44 1b 00
>2fba	75 6e 64 6f 20 64 65 6c		        .TEXT "undo delete", $14, "\", $00, $80, $18, "U", $1B, $00, "by icon", $00, "by name", $00, "by da"
>2fc2	65 74 65 14 5c 00 80 18 55 1b 00 62 79 20 69 63
>2fd2	6f 6e 00 62 79 20 6e 61 6d 65 00 62 79 20 64 61
>2fe2	74 65 00 62 79 20 73 69		        .TEXT "te", $00, "by size", $00, "by type", $00, "open", $14, "y", $00, $80, $18, "O", $1B, $00, "close", $14, "y", $00, $80
>2fea	7a 65 00 62 79 20 74 79 70 65 00 6f 70 65 6e 14
>2ffa	79 00 80 18 4f 1b 00 63 6c 6f 73 65 14 79 00 80
>300a	18 43 1b 00 72 65 6e 61		        .TEXT $18, "C", $1B, $00, "rename", $14, "y", $00, $80, $18, "N", $1B, $00, "copy", $14, "y", $00, $80, $18, "K", $1B, $00, "erase", $14, "y", $00, $80, $18
>3012	6d 65 14 79 00 80 18 4e 1b 00 63 6f 70 79 14 79
>3022	00 80 18 4b 1b 00 65 72 61 73 65 14 79 00 80 18
>3032	45 1b 00 76 61 6c 69 64		        .TEXT "E", $1B, $00, "validate", $14, "y", $00, $80, $18, "V", $1B, $00, "format", $14, "y", $00, $80, $18, "F", $1B, $00, "append", $14
>303a	61 74 65 14 79 00 80 18 56 1b 00 66 6f 72 6d 61
>304a	74 14 79 00 80 18 46 1b 00 61 70 70 65 6e 64 14
>305a	b1 00 80 18 53 1b 00 64		        .TEXT $B1, $00, $80, $18, "S", $1B, $00, "delete", $14, $B1, $00, $80, $18, "T", $1B, $00, "all pages", $14, $A1, $00, $80, $18, "W", $1B, $00, "pa"
>3062	65 6c 65 74 65 14 b1 00 80 18 54 1b 00 61 6c 6c
>3072	20 70 61 67 65 73 14 a1 00 80 18 57 1b 00 70 61
>3082	67 65 20 66 69 6c 65 73		        .TEXT "ge files", $14, $A1, $00, $80, $18, "X", $1B, $00, "border files", $14, $A1, $00, $80, $18, "Y", $1B, $00, "set "
>308a	14 a1 00 80 18 58 1b 00 62 6f 72 64 65 72 20 66
>309a	69 6c 65 73 14 a1 00 80 18 59 1b 00 73 65 74 20
>30aa	63 6c 6f 63 6b 00 42 41		        .TEXT "clock", $00, "BASIC", $00, "RESET", $14, $D1, $00, $80, $18, "R", $1B, $00, "shortcuts", $00, $18, "Disk"
>30b2	53 49 43 00 52 45 53 45 54 14 d1 00 80 18 52 1b
>30c2	00 73 68 6f 72 74 63 75 74 73 00 18 44 69 73 6b
>30d2	20 69 73 20 65 6d 70 74		        .TEXT " is empty.", $00, "Copy blank disk?", $00, $18, "Disk copy c"
>30da	79 2e 00 43 6f 70 79 20 62 6c 61 6e 6b 20 64 69
>30ea	73 6b 3f 00 18 44 69 73 6b 20 63 6f 70 79 20 63
>30fa	61 6e 27 74 20 62 65 20		        .TEXT "an't be done", $00, "between these disk formats", $00
>3102	64 6f 6e 65 00 62 65 74 77 65 65 6e 20 74 68 65
>3112	73 65 20 64 69 73 6b 20 66 6f 72 6d 61 74 73 00
>3122	18 4e 6f 20 6d 75 6c 74		        .TEXT $18, "No multiple file operation for", $00, "this fea"
>312a	69 70 6c 65 20 66 69 6c 65 20 6f 70 65 72 61 74
>313a	69 6f 6e 20 66 6f 72 00 74 68 69 73 20 66 65 61
>314a	74 75 72 65 2e 00		        .TEXT "ture.", $00
.3150	20 9a 25	jsr $259a	j3150   JSR s259A
.3153	ad 8a 84	lda $848a	j3153   LDA diskOpenFlg
.3156	f0 0c		beq $3164	        BEQ b3164
.3158	20 7e 23	jsr $237e	        JSR s237E
.315b	20 c3 47	jsr $47c3	        JSR s47C3
.315e	20 e3 47	jsr $47e3	        JSR s47E3
.3161	20 ac 31	jsr $31ac	        JSR s31AC
.3164	8a		txa		b3164   TXA
.3165	f0 06		beq $316d	        BEQ b316D
.3167	20 9a 25	jsr $259a	        JSR s259A
.316a	20 01 36	jsr $3601	        JSR s3601
.316d	60		rts		b316D   RTS
.316e	20 1c 40	jsr $401c	b316E   JSR s401C    ;clear common GEOS dekstop variable locations
.3171	20 1a 32	jsr $321a	        JSR s321A    ;CLICK DISK ICON HANDLER
.3174	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.3177	85 fb		sta $fb		        STA aFB
.3179	a9 00		lda #$00	        LDA #$00
.317b	85 7d		sta $7d		        STA a7D
.317d	ad 8b 84	lda $848b	        LDA isGEOS   ;is this a GEOS disk?
.3180	d0 30		bne $31b2	        BNE b31B2    ;if so, skip ahead
.3182	a2 32		ldx #$32	        LDX #$32
.3184	a9 49		lda #$49	        LDA #$49     ;open a dialog box with "This is not a GEOS disk, would you like to convert it?"
.3186	20 83 24	jsr $2483	        JSR s2483    ;COMMON DIALOG BOX ROUTINE ============================
.3189	a5 02		lda $02		        LDA r0L
.318b	c9 03		cmp #$03	        CMP #$03     ;$04 = no,  $03=yes
.318d	d0 23		bne $31b2	        BNE b31B2    ;Do not convert - skip ahead
.318f	20 47 c2	jsr $c247	        JSR GetDirHead ;     Convert this disk to GEOS format. Read directory header and BAM
.3192	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.3195	20 a2 35	jsr $35a2	        JSR s35A2    ;allocate a disk block
.3198	e0 06		cpx #$06	        CPX #$06
.319a	f0 09		beq $31a5	        BEQ b31A5
.319c	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.319f	20 4a c2	jsr $c24a	        JSR PutDirHead ;     write directory header back to the disk (Updates BAM)
.31a2	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.31a5	20 ea c1	jsr $c1ea	b31A5   JSR SetGEOSDisk ;     Make this a GEOS disk
.31a8	8a		txa		        TXA
.31a9	f0 c3		beq $316e	        BEQ b316E    ;Open a disk
.31ab	60		rts		        RTS
.31ac	20 1a 32	jsr $321a	s31AC   JSR s321A    ;CLICK DISK ICON HANDLER
.31af	8a		txa		        TXA
.31b0	d0 40		bne $31f2	        BNE b31F2
.31b2	20 f3 40	jsr $40f3	b31B2   JSR s40F3
.31b5	20 5b 32	jsr $325b	        JSR s325B    ;check for serial number
.31b8	20 83 32	jsr $3283	        JSR s3283
.31bb	8a		txa		        TXA
.31bc	d0 2f		bne $31ed	        BNE b31ED
.31be	20 77 34	jsr $3477	        JSR s3477    ;Set pad preferences (mouse, pad color)
.31c1	20 3c 3b	jsr $3b3c	        JSR s3B3C
.31c4	ad 65 84	lda $8465	        LDA PrntFilename ;load 1st byte of current printer driver name
.31c7	d0 1c		bne $31e5	        BNE b31E5
.31c9	ae 58 02	ldx $0258	        LDX a0258
.31cc	f0 17		beq $31e5	        BEQ b31E5
.31ce	a9 11		lda #$11	        LDA #$11
.31d0	20 66 48	jsr $4866	        JSR s4866    ;clear / restore a rectangle (disk icons and pad) with pattern
.31d3	ae 58 02	ldx $0258	        LDX a0258
.31d6	ac 57 02	ldy $0257	        LDY a0257
.31d9	a9 84		lda #$84	        LDA #$84
.31db	85 09		sta $09		        STA r3H
.31dd	a9 65		lda #$65	        LDA #$65
.31df	20 0d 32	jsr $320d	        JSR s320D
.31e2	20 9c 3a	jsr $3a9c	        JSR s3A9C
.31e5	20 f3 31	jsr $31f3	b31E5   JSR s31F3    ;get input driver
.31e8	20 34 56	jsr $5634	        JSR j5634
.31eb	a2 00		ldx #$00	        LDX #$00
.31ed	a9 ff		lda #$ff	b31ED   LDA #$FF
.31ef	8d 8a 84	sta $848a	        STA diskOpenFlg
.31f2	60		rts		b31F2   RTS
.31f3	ad cb 88	lda $88cb	s31F3   LDA inputDevName ;first byte of input driver name
.31f6	d0 14		bne $320c	        BNE b320C
.31f8	ae 56 02	ldx $0256	        LDX a0256
.31fb	f0 0f		beq $320c	        BEQ b320C
.31fd	ac 55 02	ldy $0255	        LDY a0255
.3200	a9 88		lda #$88	        LDA #$88
.3202	85 09		sta $09		        STA r3H
.3204	a9 cb		lda #$cb	        LDA #$CB
.3206	20 0d 32	jsr $320d	        JSR s320D
.3209	20 d9 3a	jsr $3ad9	        JSR s3AD9    ;Load input driver
.320c	60		rts		b320C   RTS
.320d	85 08		sta $08		s320D   STA r3L
.320f	86 07		stx $07		        STX r2H
.3211	84 06		sty $06		        STY r2L
.3213	a2 06		ldx #$06	        LDX #$06
.3215	a0 08		ldy #$08	        LDY #$08
.3217	4c 16 24	jmp $2416	        JMP s2416
.321a	20 20 32	jsr $3220	s321A   JSR s3220
.321d	4c a1 c2	jmp $c2a1	        JMP OpenDisk    ; Open the disk in the current drive
.3220	a9 04		lda #$04	s3220   LDA #$04
.3222	85 02		sta $02		s3222   STA r0L
.3224	09 80		ora #$80	        ORA #$80
.3226	8d 27 4c	sta $4c27	        STA a4C27
.3229	a9 0e		lda #$0e	        LDA #$0E
.322b	85 04		sta $04		        STA r1L
.322d	a0 02		ldy #$02	        LDY #$02
.322f	a2 04		ldx #$04	        LDX #$04
.3231	20 60 c1	jsr $c160	        JSR BBMult
.3234	18		clc		        CLC
.3235	69 0c		adc #$0c	        ADC #$0C
.3237	18		clc		        CLC
.3238	69 07		adc #$07	        ADC #$07
.323a	29 f8		and #$f8	        AND #$F8
.323c	38		sec		        SEC
.323d	e9 01		sbc #$01	        SBC #$01
.323f	8d 22 4c	sta $4c22	        STA a4C22
.3242	18		clc		        CLC
.3243	69 02		adc #$02	        ADC #$02
.3245	8d a6 4e	sta $4ea6	        STA a4EA6
.3248	60		rts		        RTS
>3249	81 0b 0c			        .BYTE $81,$0B,$0C
>324c	20 8e 2b 0b 0c 30 a7 2b		        .BYTE $20,$8E,$2B,$0B,$0C,$30,$A7,$2B
>3254	03 01 48 04 11 48 00		        .BYTE $03,$01,$48,$04,$11,$48,$00
.325b	ad bd 82	lda $82bd	s325B   LDA a82BD
.325e	c9 50		cmp #$50	        CMP #$50
.3260	f0 01		beq $3263	        BEQ b3263    ;check for serial number
.3262	60		rts		b3262   RTS
.3263	ad be 82	lda $82be	b3263   LDA a82BE
.3266	0d bf 82	ora $82bf	        ORA a82BF
.3269	d0 f7		bne $3262	        BNE b3262
.326b	20 96 c1	jsr $c196	        JSR GetSerialNumber ;     return the 16-bit serial number or pointer to the serial string for GEOS kernal
.326e	a5 02		lda $02		        LDA r0L      ;serial # x 2, rol, update hi byte, store back to $82be/$82bf
.3270	0a		asl a		        ASL
.3271	26 03		rol $03		        ROL r0H
.3273	69 00		adc #$00	        ADC #$00
.3275	8d be 82	sta $82be	        STA a82BE
.3278	a5 03		lda $03		        LDA r0H
.327a	8d bf 82	sta $82bf	        STA a82BF
.327d	20 4a c2	jsr $c24a	        JSR PutDirHead ;     Write directory header to disk (and BAM)
.3280	4c 47 c2	jmp $c247	        JMP GetDirHead ;     Get directory header from disk
.3283	20 bb 32	jsr $32bb	s3283   JSR s32BB    ;Draw Pad Lines
.3286	20 cb 39	jsr $39cb	        JSR s39CB
.3289	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.328c	ac 89 84	ldy $8489	        LDY curDrive
.328f	b9 86 84	lda $8486,y	        LDA f8486,Y
.3292	29 0f		and #$0f	        AND #$0F
.3294	c9 01		cmp #$01	        CMP #$01
.3296	d0 07		bne $329f	        BNE b329F
.3298	a2 80		ldx #$80	        LDX #$80
.329a	2c 03 82	bit $8203	        BIT a8203
.329d	30 1b		bmi $32ba	        BMI b32BA
.329f	20 7d 38	jsr $387d	b329F   JSR s387D    ;called when opening a disk (disk name text?)
.32a2	a5 15		lda $15		        LDA r9H
.32a4	f0 06		beq $32ac	        BEQ b32AC
.32a6	20 b4 39	jsr $39b4	        JSR s39B4    ;Free / delete blocks in a GEOS file
.32a9	b8		clv		        CLV
.32aa	50 f3		bvc $329f	        BVC b329F
.32ac	20 fa 32	jsr $32fa	b32AC   JSR s32FA
.32af	20 26 34	jsr $3426	        JSR s3426
.32b2	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.32b5	20 18 33	jsr $3318	        JSR s3318    ;When opening a disk - draws pad and disk data
.32b8	a2 00		ldx #$00	        LDX #$00
.32ba	60		rts		b32BA   RTS
.32bb	20 a8 c1	jsr $c1a8	s32BB   JSR i_GraphicsString ;Draw the pad using the graphics string commands.
>32be	05 00 01 08 00 10 03 07		        .BYTE $05,$00,$01,$08,$00,$10,$03,$07
>32c6	01 8f 07 08 00 10 01 08		        .BYTE $01,$8F,$07,$08,$00,$10,$01,$08
>32ce	00 1c 02 07 01 1c 01 08		        .BYTE $00,$1C,$02,$07,$01,$1C,$01,$08
>32d6	00 28 02 07 01 28 01 08		        .BYTE $00,$28,$02,$07,$01,$28,$01,$08
>32de	00 8b 02 07 01 8b		        .BYTE $00,$8B,$02,$07,$01,$8B
>32e4	01 08 00 8d 02 07 01 8d		        .BYTE $01,$08,$00,$8D,$02,$07,$01,$8D
>32ec	05 09 01 09 00 11 03 06		        .BYTE $05,$09,$01,$09,$00,$11,$03,$06
>32f4	01 1b 00			        .BYTE $01,$1B,$00
.32f7	4c f4 26	jmp $26f4	        JMP j26F4    ;comes here after drawing pad and disk info - seems to draw file icons
.32fa	a9 82		lda #$82	s32FA   LDA #>p8290
.32fc	85 03		sta $03		        STA r0H
.32fe	a9 90		lda #$90	        LDA #<p8290
.3300	85 02		sta $02		        STA r0L
.3302	a2 04		ldx #$04	        LDX #$04
.3304	20 4f 38	jsr $384f	        JSR s384F    ;Put the disk name at 8290
.3307	20 0f 33	jsr $330f	        JSR s330F
.330a	a2 04		ldx #$04	        LDX #$04
.330c	20 29 38	jsr $3829	        JSR s3829
.330f	a2 02		ldx #$02	s330F   LDX #$02     ;$02 = pointer to $8290 (disk name)
.3311	a0 04		ldy #$04	        LDY #$04     ;$04 = pointer to destination ($0212)
.3313	a9 12		lda #$12	        LDA #$12
.3315	4c 68 c2	jmp $c268	        JMP CopyFString ;Copy disk name from $8290 to $0212
.3318	20 47 24	jsr $2447	s3318   JSR s2447    ;Set the rectangle pattern based on A
.331b	20 9f c1	jsr $c19f	        JSR i_Rectangle ;draw the actual pad rectangle
>331e	1d 27 09 00 06 01		        .BYTE $1D,$27,$09,$00,$06,$01 ;y1=29, y2=39, x1=9, x2=262
.3324	a2 82		ldx #$82	        LDX #$82
.3326	a9 90		lda #$90	        LDA #$90
.3328	20 8f 57	jsr $578f	        JSR s578F
.332b	20 c0 59	jsr $59c0	        JSR s59C0    ;load $8b80 to r0
.332e	a9 00		lda #$00	        LDA #>p88
.3330	85 19		sta $19		        STA r11H
.3332	a9 88		lda #$88	        LDA #<p88
.3334	85 18		sta $18		        STA r11L
.3336	a9 18		lda #$18	        LDA #$18
.3338	85 05		sta $05		        STA r1H
.333a	20 d7 57	jsr $57d7	        JSR s57D7    ;Print file names on pad (saved to 8b80)
.333d	20 ac 33	jsr $33ac	        JSR s33AC    ;Print number of files at top of pad
.3340	20 8e 33	jsr $338e	        JSR s338E    ;Calculate blocks free
.3343	a0 02		ldy #$02	        LDY #$02     ;number of times to shift the word
.3345	a2 02		ldx #$02	        LDX #$02     ;address of zero page word to shift
.3347	20 62 c2	jsr $c262	        JSR DShiftRight ;     Arithmetically right-shift a zero page word
.334a	a9 00		lda #$00	        LDA #>p71
.334c	85 19		sta $19		        STA r11H
.334e	a9 71		lda #$71	        LDA #<p71
.3350	85 18		sta $18		        STA r11L
.3352	20 a7 33	jsr $33a7	        JSR s33A7    ;Display 16-bit Integer
.3355	a2 2b		ldx #$2b	        LDX #$2B
.3357	a9 b3		lda #$b3	        LDA #$B3
.3359	20 7f 58	jsr $587f	        JSR s587F    ;print chars for top of pad (x files, 0 selected, etc) from 2ec0
.335c	20 8e 33	jsr $338e	        JSR s338E    ;Calculate blocks free
.335f	a5 0b		lda $0b		        LDA r4H
.3361	4a		lsr a		        LSR
.3362	66 0a		ror $0a		        ROR r4L
.3364	4a		lsr a		        LSR
.3365	66 0a		ror $0a		        ROR r4L
.3367	85 03		sta $03		        STA r0H
.3369	a5 0a		lda $0a		        LDA r4L
.336b	85 02		sta $02		        STA r0L
.336d	a9 00		lda #$00	        LDA #>pC0
.336f	85 19		sta $19		        STA r11H
.3371	a9 c0		lda #$c0	        LDA #<pC0
.3373	85 18		sta $18		        STA r11L
.3375	20 a7 33	jsr $33a7	        JSR s33A7    ;Display 16-bit Integer
.3378	a2 2b		ldx #$2b	        LDX #$2B
.337a	a9 c0		lda #$c0	        LDA #$C0
.337c	20 7f 58	jsr $587f	        JSR s587F    ;print chars for top of pad (x files, 0 selected, etc) from 2ec0
.337f	a2 02		ldx #$02	        LDX #$02
.3381	20 29 38	jsr $3829	        JSR s3829
.3384	20 c3 47	jsr $47c3	        JSR s47C3
.3387	a2 c0		ldx #$c0	        LDX #$C0
.3389	86 04		stx $04		        STX r1L
.338b	4c 4b 36	jmp $364b	        JMP j364B
.338e	a9 82		lda #$82	s338E   LDA #>curDirHead ;Get DIRHEAD (address of directory header) and put in r5
.3390	85 0d		sta $0d		        STA r5H
.3392	a9 00		lda #$00	        LDA #<curDirHead
.3394	85 0c		sta $0c		        STA r5L
.3396	20 db c1	jsr $c1db	        JSR CalcBlksFree ;r4= # of free blocks, r3=# of available blocks
.3399	a5 08		lda $08		        LDA r3L
.339b	38		sec		        SEC
.339c	e5 0a		sbc $0a		        SBC r4L
.339e	85 02		sta $02		        STA r0L
.33a0	a5 09		lda $09		        LDA r3H
.33a2	e5 0b		sbc $0b		        SBC r4H
.33a4	85 03		sta $03		        STA r0H
.33a6	60		rts		        RTS
.33a7	a9 c0		lda #$c0	s33A7   LDA #$C0     ;Format = left justified, supress leading zeros ($C0=%11000000)
.33a9	4c 84 c1	jmp $c184	        JMP PutDecimal
.33ac	20 7d 38	jsr $387d	s33AC   JSR s387D    ;called when opening a disk (disk name text?)
.33af	a5 02		lda $02		        LDA r0L
.33b1	48		pha		        PHA
.33b2	68		pla		        PLA
.33b3	85 02		sta $02		        STA r0L      ;r0 contains number of files on disk
.33b5	85 7b		sta $7b		        STA a7B
.33b7	a9 00		lda #$00	        LDA #$00
.33b9	85 03		sta $03		        STA r0H
.33bb	a9 00		lda #$00	        LDA #>r7L
.33bd	85 19		sta $19		        STA r11H
.33bf	a9 10		lda #$10	        LDA #<r7L
.33c1	85 18		sta $18		        STA r11L     ;X Position
.33c3	a9 24		lda #$24	        LDA #$24
.33c5	85 05		sta $05		        STA r1H      ;Y Position
.33c7	20 a7 33	jsr $33a7	        JSR s33A7    ;Display 16-bit Integer
.33ca	a2 2e		ldx #$2e	        LDX #$2E
.33cc	a9 b8		lda #$b8	        LDA #$B8
.33ce	20 7f 58	jsr $587f	        JSR s587F    ;print chars for top of pad (x files, 0 selected, etc) from 2ec0
.33d1	a9 00		lda #$00	        LDA #>p42
.33d3	85 19		sta $19		        STA r11H
.33d5	a9 42		lda #$42	        LDA #<p42
.33d7	85 18		sta $18		        STA r11L
.33d9	a2 2e		ldx #$2e	        LDX #$2E
.33db	a9 c0		lda #$c0	        LDA #$C0
.33dd	20 7f 58	jsr $587f	        JSR s587F    ;print chars for top of pad (x files, 0 selected, etc) from 2ec0
.33e0	a5 03		lda $03		s33E0   LDA r0H
.33e2	48		pha		        PHA
.33e3	a5 02		lda $02		        LDA r0L
.33e5	48		pha		        PHA
.33e6	a5 04		lda $04		        LDA r1L
.33e8	48		pha		        PHA
.33e9	a9 00		lda #$00	        LDA #>leftMarginLo
.33eb	85 19		sta $19		        STA r11H
.33ed	a9 35		lda #$35	        LDA #<leftMarginLo
.33ef	85 18		sta $18		        STA r11L
.33f1	a9 24		lda #$24	        LDA #$24
.33f3	85 05		sta $05		        STA r1H      ;Y position
.33f5	20 21 34	jsr $3421	        JSR s3421    ;print space char
.33f8	20 21 34	jsr $3421	        JSR s3421    ;print space char
.33fb	a9 00		lda #$00	        LDA #>r14L
.33fd	85 19		sta $19		        STA r11H     ;X position  HI
.33ff	a9 1e		lda #$1e	        LDA #<r14L
.3401	85 18		sta $18		        STA r11L     ;X position LO
.3403	a5 78		lda $78		        LDA a78
.3405	24 71		bit $71		        BIT a71
.3407	10 03		bpl $340c	        BPL b340C
.3409	18		clc		        CLC
.340a	69 01		adc #$01	        ADC #$01
.340c	85 02		sta $02		b340C   STA r0L      ;number to print
.340e	a9 00		lda #$00	        LDA #$00
.3410	85 03		sta $03		        STA r0H      ;number to print
.3412	a9 64		lda #$64	        LDA #$64     ;Format=right justify, suppress leading zero, 24 field width
.3414	20 84 c1	jsr $c184	        JSR PutDecimal
.3417	68		pla		        PLA
.3418	85 04		sta $04		        STA r1L
.341a	68		pla		        PLA
.341b	85 02		sta $02		        STA r0L
.341d	68		pla		        PLA
.341e	85 03		sta $03		        STA r0H
.3420	60		rts		        RTS
.3421	a9 20		lda #$20	s3421   LDA #$20
.3423	4c 45 c1	jmp $c145	        JMP PutChar
.3426	a9 02		lda #$02	s3426   LDA #$02
.3428	85 0c		sta $0c		        STA r5L
.342a	a9 6d		lda #$6d	        LDA #$6D
.342c	18		clc		        CLC
.342d	65 fb		adc $fb		        ADC aFB
.342f	85 0d		sta $0d		        STA r5H
.3431	a9 08		lda #$08	        LDA #$08
.3433	85 12		sta $12		        STA r8L
.3435	a9 08		lda #$08	        LDA #>p0846  ;buffer contains disk info like name, etc
.3437	85 1d		sta $1d		        STA r13H
.3439	a9 46		lda #$46	        LDA #<p0846
.343b	85 1c		sta $1c		        STA r13L
.343d	a0 00		ldy #$00	b343D   LDY #$00
.343f	b1 0c		lda ($0c),y	        LDA (r5L),Y
.3441	f0 17		beq $345a	        BEQ b345A
.3443	a0 16		ldy #$16	        LDY #$16
.3445	b1 0c		lda ($0c),y	        LDA (r5L),Y
.3447	f0 11		beq $345a	        BEQ b345A
.3449	a0 13		ldy #$13	        LDY #$13
.344b	20 da 1d	jsr $1dda	        JSR s1DDA    ;Get block from disk
.344e	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.3451	a2 0a		ldx #$0a	        LDX #$0A
.3453	a0 1c		ldy #$1c	        LDY #$1C
.3455	a9 44		lda #$44	        LDA #$44
.3457	20 68 c2	jsr $c268	        JSR CopyFString ;Print disk name
.345a	18		clc		b345A   CLC
.345b	a9 44		lda #$44	        LDA #$44
.345d	65 1c		adc $1c		        ADC r13L
.345f	85 1c		sta $1c		        STA r13L
.3461	90 02		bcc $3465	        BCC b3465
.3463	e6 1d		inc $1d		        INC r13H
.3465	18		clc		b3465   CLC
.3466	a9 20		lda #$20	        LDA #$20
.3468	65 0c		adc $0c		        ADC r5L
.346a	85 0c		sta $0c		        STA r5L
.346c	90 02		bcc $3470	        BCC b3470
.346e	e6 0d		inc $0d		        INC r5H
.3470	c6 12		dec $12		b3470   DEC r8L
.3472	d0 c9		bne $343d	        BNE b343D
.3474	a2 00		ldx #$00	        LDX #$00
.3476	60		rts		        RTS
.3477	ad 51 02	lda $0251	s3477   LDA a0251
.347a	f0 5a		beq $34d6	        BEQ b34D6
.347c	85 04		sta $04		        STA r1L
.347e	ad 52 02	lda $0252	        LDA a0252
.3481	85 05		sta $05		        STA r1H
.3483	20 e3 1d	jsr $1de3	        JSR s1DE3
.3486	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.3489	ad 02 80	lda $8002	        LDA a8002    ;read from disk block buffer
.348c	8d 01 85	sta $8501	        STA maxMouseSpeed
.348f	ad 03 80	lda $8003	        LDA a8003    ;read from disk block buffer
.3492	8d 02 85	sta $8502	        STA minMouseSpeed
.3495	ad 04 80	lda $8004	        LDA a8004    ;read from disk block buffer
.3498	8d 03 85	sta $8503	        STA mouseAccel
.349b	ad 05 80	lda $8005	        LDA a8005    ;read from disk block buffer
.349e	0d 06 80	ora $8006	        ORA a8006    ;read from disk block buffer
.34a1	cd 1e 85	cmp $851e	        CMP screencolors
.34a4	f0 0e		beq $34b4	        BEQ b34B4
.34a6	8d 1e 85	sta $851e	        STA screencolors
.34a9	8d b3 34	sta $34b3	        STA a34B3
.34ac	20 b4 c1	jsr $c1b4	        JSR i_FillRam ;fill $8c00 with 1000 screencolor
>34af	e8 03 00 8c			        .BYTE $E8,$03,$00,$8C
>34b3	00				a34B3   .BYTE $00
.34b4	a4 01		ldy $01		b34B4   LDY a01
.34b6	a9 35		lda #$35	        LDA #$35
.34b8	85 01		sta $01		        STA a01
.34ba	ad 07 80	lda $8007	        LDA a8007    ;read from disk block buffer
.34bd	8d 27 d0	sta $d027	        STA $D027    ;Sprite 0 Color
.34c0	8d 28 d0	sta $d028	        STA $D028    ;Sprite 1 Color
.34c3	ad 47 80	lda $8047	        LDA a8047    ;read from disk block buffer
.34c6	8d 20 d0	sta $d020	        STA $D020    ;Border Color
.34c9	84 01		sty $01		        STY a01
.34cb	a0 3e		ldy #$3e	        LDY #$3E
.34cd	b9 08 80	lda $8008,y	b34CD   LDA f8008,Y  ;loop through (backwards) and read mouse pic data, store to $84c1
.34d0	99 c1 84	sta $84c1,y	        STA f84C1,Y  ;$84c1 = mousePicData
.34d3	88		dey		        DEY
.34d4	10 f7		bpl $34cd	        BPL b34CD
.34d6	ad 53 02	lda $0253	b34D6   LDA a0253
.34d9	f0 1b		beq $34f6	        BEQ b34F6
.34db	85 04		sta $04		        STA r1L
.34dd	ad 54 02	lda $0254	        LDA a0254
.34e0	85 05		sta $05		        STA r1H
.34e2	20 e3 1d	jsr $1de3	        JSR s1DE3
.34e5	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.34e8	a2 08		ldx #$08	        LDX #$08
.34ea	bd 02 80	lda $8002,x	b34EA   LDA a8002,X
.34ed	9d e8 8f	sta $8fe8,x	        STA f8FE8,X
.34f0	ca		dex		        DEX
.34f1	10 f7		bpl $34ea	        BPL b34EA
.34f3	20 f4 26	jsr $26f4	        JSR j26F4    ;comes here after drawing pad and disk info - seems to draw file icons
.34f6	60		rts		b34F6   RTS
.34f7	a9 03		lda #$03	s34F7   LDA #$03
.34f9	2d 0a 85	and $850a	        AND random
.34fc	d0 44		bne $3542	        BNE b3542
.34fe	ad bd 82	lda $82bd	        LDA a82BD
.3501	c9 42		cmp #$42	        CMP #$42
.3503	d0 3d		bne $3542	        BNE b3542
.3505	a0 09		ldy #$09	        LDY #$09
.3507	b9 25 6d	lda $6d25,y	b3507   LDA f6D25,Y
.350a	d9 1a 4d	cmp $4d1a,y	        CMP f4D1A,Y  ;Compare against 'GEOS BOOT' string
.350d	d0 05		bne $3514	        BNE b3514
.350f	88		dey		        DEY
.3510	10 f5		bpl $3507	        BPL b3507
.3512	30 08		bmi $351c	        BMI b351C
.3514	ad 38 6d	lda $6d38	b3514   LDA a6D38
.3517	c9 0c		cmp #$0c	        CMP #$0C
.3519	f0 28		beq $3543	        BEQ b3543
.351b	60		rts		        RTS
.351c	ae 04 6d	ldx $6d04	b351C   LDX a6D04
.351f	ad 03 6d	lda $6d03	        LDA a6D03
.3522	20 52 35	jsr $3552	        JSR s3552
.3525	d0 1b		bne $3542	        BNE b3542
.3527	c0 19		cpy #$19	        CPY #$19
.3529	d0 18		bne $3543	        BNE b3543
.352b	c9 fa		cmp #$fa	        CMP #$FA
.352d	d0 14		bne $3543	        BNE b3543
.352f	ae 24 6d	ldx $6d24	        LDX a6D24
.3532	ad 23 6d	lda $6d23	        LDA a6D23
.3535	20 52 35	jsr $3552	        JSR s3552
.3538	d0 08		bne $3542	        BNE b3542
.353a	c0 4a		cpy #$4a	        CPY #$4A
.353c	d0 05		bne $3543	        BNE b3543
.353e	c9 e7		cmp #$e7	        CMP #$E7
.3540	d0 01		bne $3543	        BNE b3543
.3542	60		rts		b3542   RTS
.3543	a9 00		lda #$00	b3543   LDA #$00
.3545	a0 02		ldy #$02	        LDY #$02
.3547	99 00 6d	sta $6d00,y	b3547   STA dirBuffer_6d00,Y
.354a	c8		iny		        INY
.354b	c0 60		cpy #$60	        CPY #$60
.354d	d0 f8		bne $3547	        BNE b3547
.354f	4c 7d 3a	jmp $3a7d	        JMP j3A7D
.3552	86 05		stx $05		s3552   STX r1H
.3554	85 04		sta $04		        STA r1L
.3556	a9 8a		lda #$8a	        LDA #>spr2pic
.3558	85 03		sta $03		        STA r0H
.355a	a9 80		lda #$80	        LDA #<spr2pic
.355c	85 02		sta $02		        STA r0L
.355e	a0 00		ldy #$00	        LDY #$00
.3560	98		tya		        TYA
.3561	91 02		sta ($02),y	b3561   STA (r0L),Y
.3563	c8		iny		        INY
.3564	d0 fb		bne $3561	        BNE b3561
.3566	20 e3 1d	jsr $1de3	b3566   JSR s1DE3
.3569	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.356c	ac 01 80	ldy $8001	        LDY a8001
.356f	84 05		sty $05		        STY r1H
.3571	c8		iny		        INY
.3572	a9 00		lda #$00	        LDA #$00
.3574	ae 00 80	ldx $8000	        LDX diskBlkBuf
.3577	86 04		stx $04		        STX r1L
.3579	f0 03		beq $357e	        BEQ b357E
.357b	a8		tay		        TAY
.357c	a9 02		lda #$02	        LDA #$02
=13695					p357F   =*+$01
.357e	85 06		sta $06		b357E   STA r2L
.3580	18		clc		        CLC
.3581	88		dey		b3581   DEY
.3582	b9 00 80	lda $8000,y	        LDA diskBlkBuf,Y
.3585	71 02		adc ($02),y	        ADC (r0L),Y
.3587	91 02		sta ($02),y	        STA (r0L),Y
.3589	c4 06		cpy $06		        CPY r2L
.358b	d0 f4		bne $3581	        BNE b3581
.358d	a5 04		lda $04		        LDA r1L
.358f	d0 d5		bne $3566	        BNE b3566
.3591	a0 00		ldy #$00	        LDY #$00
.3593	84 04		sty $04		        STY r1L
.3595	c8		iny		        INY
.3596	84 05		sty $05		        STY r1H
.3598	20 0e c2	jsr $c20e	        JSR CRC
.359b	a4 07		ldy $07		        LDY r2H
.359d	a5 06		lda $06		        LDA r2L
.359f	a2 00		ldx #$00	        LDX #$00
.35a1	60		rts		        RTS
.35a2	20 ab 35	jsr $35ab	s35A2   JSR s35AB
.35a5	d0 03		bne $35aa	        BNE b35AA
.35a7	20 cd 35	jsr $35cd	        JSR s35CD    ;Allocate a disk block
.35aa	60		rts		b35AA   RTS
.35ab	a0 01		ldy #$01	s35AB   LDY #$01
.35ad	84 04		sty $04		        STY r1L
.35af	88		dey		        DEY
.35b0	84 05		sty $05		        STY r1H
.35b2	20 e3 1d	jsr $1de3	        JSR s1DE3
.35b5	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.35b8	a0 00		ldy #$00	        LDY #$00
.35ba	b1 0a		lda ($0a),y	        LDA (r4L),Y
.35bc	c9 43		cmp #$43	        CMP #$43
.35be	d0 0c		bne $35cc	        BNE b35CC
.35c0	c8		iny		        INY
.35c1	b1 0a		lda ($0a),y	        LDA (r4L),Y
.35c3	c9 42		cmp #$42	        CMP #$42
.35c5	d0 05		bne $35cc	        BNE b35CC
.35c7	c8		iny		        INY
.35c8	b1 0a		lda ($0a),y	        LDA (r4L),Y
.35ca	c9 4d		cmp #$4d	        CMP #$4D
.35cc	60		rts		b35CC   RTS
.35cd	a5 05		lda $05		s35CD   LDA r1H
.35cf	85 0f		sta $0f		        STA r6H      ;sector
.35d1	a5 04		lda $04		        LDA r1L
.35d3	85 0e		sta $0e		        STA r6L      ;track
.35d5	ad 20 05	lda $0520	        LDA a0520
.35d8	c9 02		cmp #$02	        CMP #$02
.35da	90 03		bcc $35df	        BCC b35DF
.35dc	4c 48 90	jmp $9048	        JMP AllocateBlock
.35df	20 ad c2	jsr $c2ad	b35DF   JSR FindBAMBit
.35e2	f0 12		beq $35f6	        BEQ b35F6
.35e4	a5 13		lda $13		        LDA r8H
.35e6	49 ff		eor #$ff	        EOR #$FF
.35e8	3d 00 82	and $8200,x	        AND curDirHead,X
.35eb	9d 00 82	sta $8200,x	        STA curDirHead,X
.35ee	a6 11		ldx $11		        LDX r7H
.35f0	de 00 82	dec $8200,x	        DEC curDirHead,X
.35f3	a2 00		ldx #$00	        LDX #$00
.35f5	60		rts		        RTS
.35f6	a2 06		ldx #$06	b35F6   LDX #$06
.35f8	60		rts		        RTS
.35f9	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.35fc	ad 8a 84	lda $848a	        LDA diskOpenFlg
.35ff	f0 43		beq $3644	        BEQ b3644
.3601	20 f6 3f	jsr $3ff6	s3601   JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.3604	a9 02		lda #$02	        LDA #$02
.3606	85 1a		sta $1a		        STA r12L
.3608	a9 12		lda #$12	        LDA #$12
.360a	20 08 48	jsr $4808	        JSR s4808
.360d	20 bb 32	jsr $32bb	        JSR s32BB    ;Draw Pad Lines
.3610	20 c3 47	jsr $47c3	        JSR s47C3
.3613	20 e3 47	jsr $47e3	        JSR s47E3
.3616	a9 00		lda #$00	        LDA #$00
.3618	8d 00 02	sta $0200	        STA a0200
.361b	20 20 32	jsr $3220	        JSR s3220
.361e	a2 04		ldx #$04	s361E   LDX #$04
.3620	20 29 38	jsr $3829	        JSR s3829
.3623	a9 00		lda #$00	        LDA #$00
.3625	a8		tay		        TAY
.3626	91 04		sta ($04),y	        STA (r1L),Y
.3628	ac 89 84	ldy $8489	        LDY curDrive
.362b	a2 02		ldx #$02	        LDX #$02
.362d	20 23 3b	jsr $3b23	        JSR s3B23
.3630	a9 00		lda #$00	        LDA #$00
.3632	85 04		sta $04		        STA r1L
.3634	20 c3 47	jsr $47c3	        JSR s47C3
.3637	20 4b 36	jsr $364b	        JSR j364B
.363a	20 56 59	jsr $5956	        JSR s5956    ;set coords and draw rectangle
.363d	a2 00		ldx #$00	        LDX #$00
.363f	86 7d		stx $7d		        STX a7D
.3641	8e 8a 84	stx $848a	        STX diskOpenFlg
.3644	60		rts		b3644   RTS
>3645	36 36 36			f3645   .BYTE $36,$36,$36
>3648	e7 ef f7			f3648   .BYTE $E7,$EF,$F7
.364b	a8		tay		j364B   TAY
.364c	a5 04		lda $04		        LDA r1L
.364e	8d a6 3d	sta $3da6	        STA a3DA6
.3651	a5 03		lda $03		        LDA r0H
.3653	48		pha		        PHA
.3654	a5 02		lda $02		        LDA r0L
.3656	48		pha		        PHA
.3657	98		tya		        TYA
.3658	20 e3 47	jsr $47e3	        JSR s47E3
.365b	a8		tay		        TAY
.365c	68		pla		        PLA
.365d	85 02		sta $02		        STA r0L
.365f	68		pla		        PLA
.3660	85 03		sta $03		        STA r0H
.3662	98		tya		        TYA
.3663	20 d3 47	jsr $47d3	        JSR s47D3    ;push A, shift A left (x2), LDA r0, STA as index into $03C4, pull A
.3666	48		pha		        PHA
.3667	38		sec		        SEC
.3668	e9 14		sbc #$14	        SBC #$14
.366a	a8		tay		        TAY
.366b	b9 45 36	lda $3645,y	        LDA f3645,Y
.366e	85 03		sta $03		        STA r0H
.3670	b9 48 36	lda $3648,y	        LDA f3648,Y
.3673	85 02		sta $02		        STA r0L
.3675	68		pla		        PLA
.3676	48		pha		        PHA
.3677	20 a6 49	jsr $49a6	        JSR s49A6
.367a	68		pla		        PLA
.367b	a8		tay		        TAY
.367c	ad a6 3d	lda $3da6	        LDA a3DA6
.367f	29 40		and #$40	        AND #$40
.3681	d0 14		bne $3697	        BNE b3697
.3683	98		tya		        TYA
.3684	48		pha		        PHA
.3685	a2 0c		ldx #$0c	        LDX #$0C
.3687	20 8d 49	jsr $498d	        JSR s498D
.368a	a9 bf		lda #$bf	        LDA #$BF
.368c	a0 00		ldy #$00	        LDY #$00
.368e	91 0c		sta ($0c),y	        STA (r5L),Y
.3690	c8		iny		        INY
.3691	a9 28		lda #$28	        LDA #$28
.3693	91 0c		sta ($0c),y	        STA (r5L),Y
.3695	68		pla		        PLA
.3696	a8		tay		        TAY
.3697	a9 01		lda #$01	b3697   LDA #>p0108
.3699	85 36		sta $36		        STA leftMarginHi
.369b	a9 08		lda #$08	        LDA #<p0108
.369d	85 35		sta $35		        STA leftMarginLo
.369f	98		tya		        TYA
.36a0	48		pha		        PHA
.36a1	20 cc 49	jsr $49cc	        JSR s49CC    ;draw a pad file icon and filename
.36a4	ad a6 3d	lda $3da6	        LDA a3DA6
.36a7	29 40		and #$40	        AND #$40
.36a9	f0 2c		beq $36d7	        BEQ b36D7
.36ab	68		pla		        PLA
.36ac	48		pha		        PHA
.36ad	c9 14		cmp #$14	        CMP #$14
.36af	d0 11		bne $36c2	        BNE b36C2
.36b1	a9 28		lda #$28	        LDA #$28
.36b3	85 05		sta $05		        STA r1H      ;YPOS=40
.36b5	a9 01		lda #$01	        LDA #>p011A
.36b7	85 19		sta $19		        STA r11H     ;XPOS
.36b9	a9 1a		lda #$1a	        LDA #<p011A
.36bb	85 18		sta $18		        STA r11L     ;XPOS
.36bd	a9 41		lda #$41	        LDA #$41     ;'A'
.36bf	b8		clv		        CLV
.36c0	50 12		bvc $36d4	        BVC b36D4
.36c2	c9 15		cmp #$15	b36C2   CMP #$15
.36c4	d0 11		bne $36d7	        BNE b36D7
.36c6	a9 4c		lda #$4c	        LDA #$4C
.36c8	85 05		sta $05		        STA r1H      ;YPOS=76
.36ca	a9 01		lda #$01	        LDA #>p011A
.36cc	85 19		sta $19		        STA r11H     ;XPOS
.36ce	a9 1a		lda #$1a	        LDA #<p011A
.36d0	85 18		sta $18		        STA r11L     ;XPOS
.36d2	a9 42		lda #$42	        LDA #$42     ;'B'
.36d4	20 45 c1	jsr $c145	b36D4   JSR PutChar
.36d7	68		pla		b36D7   PLA
.36d8	ae a6 3d	ldx $3da6	        LDX a3DA6
.36db	10 03		bpl $36e0	        BPL b36E0
.36dd	20 24 48	jsr $4824	        JSR s4824    ;invert icon
.36e0	a9 00		lda #$00	b36E0   LDA #$00
.36e2	85 35		sta $35		        STA leftMarginLo
.36e4	85 36		sta $36		        STA leftMarginHi
.36e6	60		rts		        RTS
>36e7	7f 28 23 18 03 15 ff 36		        .BYTE $7F,$28,$23,$18,$03,$15,$FF,$36
>36ef	7f 28 23 3c 03 15 ff 36		        .BYTE $7F,$28,$23,$3C,$03,$15,$FF,$36
>36f7	7f 28 23 68 03 15 71 37		        .BYTE $7F,$28,$23,$68,$03,$15,$71,$37
.36ff	ad 89 84	lda $8489	        LDA curDrive
.3702	85 79		sta $79		        STA a79
.3704	24 71		bit $71		        BIT a71
.3706	50 49		bvc $3751	        BVC b3751
.3708	a2 37		ldx #$37	        LDX #$37
.370a	a9 18		lda #$18	        LDA #$18
.370c	20 6c 55	jsr $556c	        JSR s556C
.370f	20 8a 46	jsr $468a	        JSR s468A
.3712	d0 03		bne $3717	        BNE b3717
.3714	4c ac 31	jmp $31ac	        JMP s31AC
.3717	60		rts		b3717   RTS
.3718	20 ed 46	jsr $46ed	        JSR s46ED    ;r9 = $77/$76, A=*(r9+Y)
.371b	c9 0c		cmp #$0c	        CMP #$0C     ;check if file is a SYSTEM BOOT file ($0c)
.371d	d0 03		bne $3722	        BNE b3722    ;it is not... skip ahead to copy file to other disk
.371f	4c 0b 51	jmp $510b	        JMP j510B
.3722	20 ba 37	jsr $37ba	b3722   JSR s37BA    ;copy file to same or different disk
.3725	20 aa 59	jsr $59aa	        JSR s59AA
.3728	20 78 3e	jsr $3e78	        JSR s3E78
.372b	a5 70		lda $70		        LDA a70
.372d	cd 89 84	cmp $8489	        CMP curDrive
.3730	d0 06		bne $3738	        BNE b3738
.3732	20 73 3f	jsr $3f73	        JSR s3F73
.3735	4c 53 31	jmp $3153	        JMP j3153
.3738	20 e1 23	jsr $23e1	b3738   JSR s23E1
.373b	f0 08		beq $3745	        BEQ b3745
.373d	a9 00		lda #$00	        LDA #$00
.373f	8d 4d 02	sta $024d	        STA a024D
.3742	20 7e 23	jsr $237e	        JSR s237E
.3745	20 cb 39	jsr $39cb	b3745   JSR s39CB
.3748	20 25 4a	jsr $4a25	        JSR s4A25
.374b	20 9c 59	jsr $599c	        JSR s599C
.374e	4c 6d 3f	jmp $3f6d	        JMP j3F6D
.3751	a5 02		lda $02		b3751   LDA r0L
.3753	20 e3 47	jsr $47e3	j3753   JSR s47E3
.3756	20 cc 47	jsr $47cc	        JSR s47CC    ;A = A - 20 + 8
.3759	85 79		sta $79		        STA a79
.375b	ae 8a 84	ldx $848a	        LDX diskOpenFlg
.375e	f0 0b		beq $376b	        BEQ b376B
.3760	cd 89 84	cmp $8489	        CMP curDrive
.3763	f0 06		beq $376b	        BEQ b376B
.3765	20 c3 47	jsr $47c3	        JSR s47C3
.3768	20 24 48	jsr $4824	        JSR s4824    ;invert icon
.376b	20 dc 23	jsr $23dc	b376B   JSR s23DC
.376e	4c 24 4f	jmp $4f24	        JMP j4F24
.3771	ad 4c 02	lda $024c	        LDA a024C
.3774	f0 03		beq $3779	        BEQ b3779
.3776	4c 00 41	jmp $4100	        JMP j4100    ;called after a click on page or border
.3779	24 71		bit $71		b3779   BIT a71
.377b	50 03		bvc $3780	        BVC b3780    ;Position mouse over sprite during "drag" operation
.377d	4c f6 3f	jmp $3ff6	        JMP s3FF6    ;unselect and un-reverse icon(s), 0 selected
.3780	20 f6 3f	jsr $3ff6	b3780   JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.3783	a9 16		lda #$16	        LDA #$16
.3785	20 4e 40	jsr $404e	        JSR s404E    ;draw and enable "drag" pad icon sprite
.3788	a9 01		lda #$01	        LDA #>p0108
.378a	8d bb 84	sta $84bb	        STA mouseLeft_HI
.378d	a9 08		lda #$08	        LDA #<p0108
.378f	8d ba 84	sta $84ba	        STA mouseLeft_LO
.3792	a9 8b		lda #$8b	        LDA #>p8B0D
.3794	8d b9 84	sta $84b9	        STA mouseBottom
.3797	a9 0d		lda #$0d	        LDA #<p8B0D
.3799	8d b8 84	sta $84b8	        STA mouseTop
.379c	a9 ff		lda #$ff	        LDA #$FF
.379e	8d 4c 02	sta $024c	        STA a024C
.37a1	60		rts		        RTS
.37a2	a9 08		lda #$08	        LDA #$08
.37a4	d0 09		bne $37af	        BNE b37AF
.37a6	ac 8d 84	ldy $848d	        LDY numDrives
.37a9	88		dey		        DEY
.37aa	d0 01		bne $37ad	        BNE b37AD
.37ac	60		rts		        RTS
.37ad	a9 09		lda #$09	b37AD   LDA #$09
.37af	48		pha		b37AF   PHA
.37b0	20 f6 3f	jsr $3ff6	        JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.37b3	68		pla		        PLA
.37b4	20 c6 47	jsr $47c6	        JSR s47C6
.37b7	4c 53 37	jmp $3753	        JMP j3753
.37ba	ad 89 84	lda $8489	s37BA   LDA curDrive
.37bd	85 79		sta $79		        STA a79
.37bf	a5 72		lda $72		        LDA a72
.37c1	85 73		sta $73		        STA a73
.37c3	a5 02		lda $02		        LDA r0L
.37c5	20 cc 47	jsr $47cc	        JSR s47CC    ;A = A - 20 + 8
.37c8	85 70		sta $70		        STA a70
.37ca	a8		tay		        TAY
.37cb	a2 04		ldx #$04	        LDX #$04
.37cd	20 2c 38	jsr $382c	        JSR s382C
.37d0	ad 8d 84	lda $848d	        LDA numDrives
.37d3	c9 02		cmp #$02	        CMP #$02
.37d5	90 04		bcc $37db	        BCC b37DB
.37d7	98		tya		        TYA
.37d8	49 01		eor #$01	        EOR #$01
.37da	a8		tay		        TAY
.37db	84 fe		sty $fe		b37DB   STY aFE
.37dd	a0 00		ldy #$00	        LDY #$00
.37df	b1 04		lda ($04),y	        LDA (r1L),Y
.37e1	f0 3c		beq $381f	        BEQ b381F
.37e3	a5 72		lda $72		        LDA a72
.37e5	a2 06		ldx #$06	        LDX #$06     ;zero page address of pointer to source string
.37e7	20 b4 46	jsr $46b4	        JSR s46B4
.37ea	a0 04		ldy #$04	        LDY #$04     ;zero page address of pointer to destination string
.37ec	a9 12		lda #$12	        LDA #$12     ;length of strings
.37ee	20 6e c2	jsr $c26e	        JSR CmpFString ;     Compares two fixed length strings (compare disk name for file copy)
.37f1	f0 2c		beq $381f	        BEQ b381F    ;if the disk name is the same, skip ahead
.37f3	a5 07		lda $07		        LDA r2H
.37f5	8d f7 03	sta $03f7	        STA a03F7
.37f8	a5 06		lda $06		        LDA r2L
.37fa	8d f6 03	sta $03f6	        STA a03F6
.37fd	a5 05		lda $05		        LDA r1H
.37ff	8d f9 03	sta $03f9	        STA a03F9
.3802	a5 04		lda $04		        LDA r1L
.3804	8d f8 03	sta $03f8	        STA a03F8
.3807	20 50 23	jsr $2350	        JSR s2350
.380a	8a		txa		        TXA
.380b	d0 14		bne $3821	        BNE b3821
.380d	20 a9 42	jsr $42a9	        JSR s42A9
.3810	8a		txa		        TXA
.3811	d0 0e		bne $3821	        BNE b3821
.3813	85 fc		sta $fc		        STA aFC
.3815	20 ab 19	jsr $19ab	        JSR s19AB    ;search for and copy a file
.3818	8a		txa		        TXA
.3819	d0 06		bne $3821	        BNE b3821
.381b	a2 00		ldx #$00	        LDX #$00
.381d	f0 02		beq $3821	        BEQ b3821
.381f	a2 ff		ldx #$ff	b381F   LDX #$FF
.3821	8a		txa		b3821   TXA
.3822	48		pha		        PHA
.3823	20 dc 23	jsr $23dc	        JSR s23DC
.3826	68		pla		        PLA
.3827	aa		tax		        TAX
.3828	60		rts		        RTS
.3829	ad 89 84	lda $8489	s3829   LDA curDrive
.382c	c9 08		cmp #$08	s382C   CMP #$08
.382e	f0 16		beq $3846	        BEQ b3846
.3830	c9 09		cmp #$09	        CMP #$09
.3832	f0 09		beq $383d	        BEQ b383D
.3834	a9 36		lda #$36	        LDA #$36
.3836	95 00		sta $00,x	        STA f00,X
.3838	a9 02		lda #$02	        LDA #$02
.383a	95 01		sta $01,x	        STA f01,X
.383c	60		rts		        RTS
.383d	a9 24		lda #$24	b383D   LDA #$24
.383f	95 00		sta $00,x	        STA f00,X
.3841	a9 02		lda #$02	        LDA #$02
.3843	95 01		sta $01,x	        STA f01,X
.3845	60		rts		        RTS
.3846	a9 12		lda #$12	b3846   LDA #$12
.3848	95 00		sta $00,x	        STA f00,X
.384a	a9 02		lda #$02	        LDA #$02
.384c	95 01		sta $01,x	        STA f01,X
.384e	60		rts		        RTS
.384f	a9 00		lda #$00	s384F   LDA #$00
.3851	95 00		sta $00,x	        STA f00,X
.3853	a9 02		lda #$02	        LDA #$02
.3855	95 01		sta $01,x	        STA f01,X
.3857	60		rts		        RTS
.3858	ad 8d 84	lda $848d	s3858   LDA numDrives ;how many drives do we have
.385b	c9 02		cmp #$02	        CMP #$02
.385d	90 0e		bcc $386d	        BCC b386D
.385f	20 ec 1a	jsr $1aec	        JSR s1AEC    ;seems to set drive A or drive B type
.3862	20 7e 23	jsr $237e	        JSR s237E
.3865	8a		txa		        TXA
.3866	48		pha		        PHA
.3867	20 ec 1a	jsr $1aec	        JSR s1AEC    ;seems to set drive A or drive B type
.386a	68		pla		        PLA
.386b	d0 03		bne $3870	        BNE b3870
.386d	20 7e 23	jsr $237e	b386D   JSR s237E
.3870	60		rts		b3870   RTS
.3871	a2 04		ldx #$04	s3871   LDX #$04
.3873	20 29 38	jsr $3829	        JSR s3829
.3876	a2 00		ldx #$00	        LDX #$00
.3878	a0 00		ldy #$00	        LDY #$00
.387a	b1 04		lda ($04),y	        LDA (r1L),Y
.387c	60		rts		        RTS
.387d	a9 00		lda #$00	s387D   LDA #$00     ;clear memory locations
.387f	85 02		sta $02		        STA r0L
.3881	8d 51 02	sta $0251	        STA a0251
.3884	8d 53 02	sta $0253	        STA a0253
.3887	8d 56 02	sta $0256	        STA a0256
.388a	8d 58 02	sta $0258	        STA a0258
.388d	85 15		sta $15		        STA r9H
.388f	85 08		sta $08		        STA r3L
.3891	a9 0a		lda #$0a	        LDA #>p0A62
.3893	85 05		sta $05		        STA r1H      ;load r1 with $0a62
.3895	a9 62		lda #$62	        LDA #<p0A62
.3897	85 04		sta $04		        STA r1L
.3899	a9 6d		lda #$6d	        LDA #>dirBuffer_6d00
.389b	85 07		sta $07		        STA r2H      ;load r2H with 6d00
.389d	a0 00		ldy #$00	b389D   LDY #<dirBuffer_6d00
.389f	84 06		sty $06		        STY r2L      ;load r2L with 6d00
.38a1	b1 06		lda ($06),y	        LDA (r2L),Y
.38a3	48		pha		        PHA
.38a4	20 f0 38	jsr $38f0	b38A4   JSR s38F0
.38a7	18		clc		        CLC
.38a8	a9 20		lda #$20	        LDA #$20
.38aa	65 06		adc $06		        ADC r2L
.38ac	85 06		sta $06		        STA r2L
.38ae	90 02		bcc $38b2	        BCC b38B2
.38b0	e6 07		inc $07		        INC r2H
.38b2	a5 06		lda $06		b38B2   LDA r2L
.38b4	d0 ee		bne $38a4	        BNE b38A4
.38b6	68		pla		        PLA
.38b7	d0 e4		bne $389d	        BNE b389D
.38b9	ad 8b 84	lda $848b	        LDA isGEOS   ;is this a GEOS formatted disk?
.38bc	f0 0b		beq $38c9	        BEQ b38C9    ;if no, skip ahead
.38be	a9 7f		lda #$7f	        LDA #$7F
.38c0	c5 07		cmp $07		        CMP r2H
.38c2	90 05		bcc $38c9	        BCC b38C9
.38c4	85 07		sta $07		        STA r2H
.38c6	b8		clv		        CLV
.38c7	50 d4		bvc $389d	        BVC b389D
.38c9	a5 02		lda $02		b38C9   LDA r0L
.38cb	48		pha		        PHA
.38cc	a5 08		lda $08		        LDA r3L
.38ce	18		clc		        CLC
.38cf	69 04		adc #$04	        ADC #$04
.38d1	20 22 32	jsr $3222	        JSR s3222
.38d4	a5 15		lda $15		        LDA r9H
.38d6	48		pha		        PHA
.38d7	a5 14		lda $14		        LDA r9L
.38d9	48		pha		        PHA
.38da	20 c6 58	jsr $58c6	        JSR s58C6
.38dd	68		pla		        PLA
.38de	85 14		sta $14		        STA r9L
.38e0	68		pla		        PLA
.38e1	85 15		sta $15		        STA r9H
.38e3	a9 ff		lda #$ff	        LDA #$FF
.38e5	8d 4d 02	sta $024d	        STA a024D
.38e8	68		pla		        PLA
.38e9	85 02		sta $02		        STA r0L
.38eb	a9 00		lda #$00	        LDA #$00
.38ed	85 03		sta $03		        STA r0H
.38ef	60		rts		        RTS
.38f0	a0 02		ldy #$02	s38F0   LDY #$02
.38f2	b1 06		lda ($06),y	        LDA (r2L),Y
.38f4	d0 01		bne $38f7	        BNE b38F7
.38f6	60		rts		        RTS
.38f7	e6 02		inc $02		b38F7   INC r0L
.38f9	a0 18		ldy #$18	        LDY #$18
.38fb	b1 06		lda ($06),y	        LDA (r2L),Y
.38fd	c9 05		cmp #$05	        CMP #$05
.38ff	d0 27		bne $3928	        BNE b3928
.3901	a5 08		lda $08		        LDA r3L
.3903	c9 08		cmp #$08	        CMP #$08
.3905	b0 21		bcs $3928	        BCS b3928
.3907	a0 15		ldy #$15	        LDY #$15
.3909	d0 06		bne $3911	        BNE b3911
.390b	b1 06		lda ($06),y	b390B   LDA (r2L),Y
.390d	c9 a0		cmp #$a0	        CMP #$A0
.390f	d0 02		bne $3913	        BNE b3913
.3911	a9 00		lda #$00	b3911   LDA #$00
.3913	88		dey		b3913   DEY
.3914	91 04		sta ($04),y	        STA (r1L),Y
.3916	c0 05		cpy #$05	        CPY #$05
.3918	b0 f1		bcs $390b	        BCS b390B
.391a	18		clc		        CLC
.391b	a9 11		lda #$11	        LDA #$11
.391d	65 04		adc $04		        ADC r1L
.391f	85 04		sta $04		        STA r1L
.3921	90 02		bcc $3925	        BCC b3925
.3923	e6 05		inc $05		        INC r1H
.3925	e6 08		inc $08		b3925   INC r3L
.3927	60		rts		        RTS
.3928	c9 0a		cmp #$0a	b3928   CMP #$0A
.392a	d0 15		bne $3941	        BNE b3941
.392c	ad 56 02	lda $0256	        LDA a0256
.392f	d0 10		bne $3941	        BNE b3941
.3931	a5 06		lda $06		        LDA r2L
.3933	18		clc		        CLC
.3934	69 05		adc #$05	        ADC #$05
.3936	8d 55 02	sta $0255	        STA a0255
.3939	a5 07		lda $07		        LDA r2H
.393b	69 00		adc #$00	        ADC #$00
.393d	8d 56 02	sta $0256	        STA a0256
.3940	60		rts		        RTS
.3941	c9 09		cmp #$09	b3941   CMP #$09
.3943	d0 15		bne $395a	        BNE b395A
.3945	ad 58 02	lda $0258	        LDA a0258
.3948	d0 10		bne $395a	        BNE b395A
.394a	a5 06		lda $06		        LDA r2L
.394c	18		clc		        CLC
.394d	69 05		adc #$05	        ADC #$05
.394f	8d 57 02	sta $0257	        STA a0257
.3952	a5 07		lda $07		        LDA r2H
.3954	69 00		adc #$00	        ADC #$00
.3956	8d 58 02	sta $0258	        STA a0258
.3959	60		rts		        RTS
.395a	c9 04		cmp #$04	b395A   CMP #$04
.395c	d0 36		bne $3994	        BNE b3994
.395e	a9 2b		lda #$2b	        LDA #>p2BC8
.3960	85 0d		sta $0d		        STA r5H
.3962	a9 c8		lda #$c8	        LDA #<p2BC8
.3964	85 0c		sta $0c		        STA r5L
.3966	20 a6 39	jsr $39a6	        JSR s39A6
.3969	d0 0e		bne $3979	        BNE b3979
.396b	a0 03		ldy #$03	        LDY #$03
.396d	b1 06		lda ($06),y	        LDA (r2L),Y
.396f	8d 51 02	sta $0251	        STA a0251
.3972	c8		iny		        INY
.3973	b1 06		lda ($06),y	        LDA (r2L),Y
.3975	8d 52 02	sta $0252	        STA a0252
.3978	60		rts		        RTS
.3979	a9 2b		lda #$2b	b3979   LDA #>p2BD8
.397b	85 0d		sta $0d		        STA r5H
.397d	a9 d8		lda #$d8	        LDA #<p2BD8
.397f	85 0c		sta $0c		        STA r5L
.3981	20 a6 39	jsr $39a6	        JSR s39A6
.3984	d0 1f		bne $39a5	        BNE b39A5
.3986	a0 03		ldy #$03	        LDY #$03
.3988	b1 06		lda ($06),y	        LDA (r2L),Y
.398a	8d 53 02	sta $0253	        STA a0253
.398d	c8		iny		        INY
.398e	b1 06		lda ($06),y	        LDA (r2L),Y
.3990	8d 54 02	sta $0254	        STA a0254
.3993	60		rts		        RTS
.3994	c9 0d		cmp #$0d	b3994   CMP #$0D
.3996	d0 0d		bne $39a5	        BNE b39A5
.3998	a5 06		lda $06		        LDA r2L
.399a	18		clc		        CLC
.399b	69 02		adc #$02	        ADC #$02
.399d	85 14		sta $14		        STA r9L
.399f	a5 07		lda $07		        LDA r2H
.39a1	69 00		adc #$00	        ADC #$00
.39a3	85 15		sta $15		        STA r9H
.39a5	60		rts		b39A5   RTS
.39a6	a0 05		ldy #$05	s39A6   LDY #$05
.39a8	b1 06		lda ($06),y	b39A8   LDA (r2L),Y
.39aa	d1 0c		cmp ($0c),y	        CMP (r5L),Y
.39ac	d0 05		bne $39b3	        BNE b39B3
.39ae	c8		iny		        INY
.39af	c0 15		cpy #$15	        CPY #$15
.39b1	90 f5		bcc $39a8	        BCC b39A8
.39b3	60		rts		b39B3   RTS
.39b4	20 26 c2	jsr $c226	s39B4   JSR FreeFile ;     Frees all blocks in a GEOS file without deleting dir entry (file header and index blocks deleted also)
.39b7	a0 00		ldy #$00	        LDY #$00
.39b9	98		tya		        TYA
.39ba	91 14		sta ($14),y	        STA (r9L),Y
.39bc	a5 15		lda $15		        LDA r9H
.39be	c9 7f		cmp #$7f	        CMP #$7F
.39c0	d0 03		bne $39c5	        BNE b39C5
.39c2	4c 6d 3a	jmp $3a6d	        JMP j3A6D
.39c5	38		sec		b39C5   SEC
.39c6	e9 6d		sbc #$6d	        SBC #$6D
.39c8	4c 7d 3a	jmp $3a7d	        JMP j3A7D
.39cb	a2 ff		ldx #$ff	s39CB   LDX #$FF
.39cd	a9 00		lda #$00	        LDA #$00
.39cf	9d ff 7e	sta $7eff,x	b39CF   STA f7EFF,X
.39d2	ca		dex		        DEX
.39d3	d0 fa		bne $39cf	        BNE b39CF
.39d5	a9 6d		lda #$6d	        LDA #>dirBuffer_6d00
.39d7	85 0b		sta $0b		        STA r4H
.39d9	a9 00		lda #$00	        LDA #<dirBuffer_6d00
.39db	85 0a		sta $0a		        STA r4L
.39dd	20 17 3a	jsr $3a17	        JSR s3A17
.39e0	84 05		sty $05		        STY r1H
.39e2	a9 12		lda #$12	        LDA #$12
.39e4	85 06		sta $06		        STA r2L
.39e6	20 42 3a	jsr $3a42	        JSR s3A42    ;read directory to *r4 ($6d00)
.39e9	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.39ec	a9 11		lda #$11	        LDA #$11
.39ee	38		sec		        SEC
.39ef	e5 06		sbc $06		        SBC r2L
.39f1	85 fd		sta $fd		        STA aFD
.39f3	a2 00		ldx #$00	        LDX #$00
.39f5	c9 0a		cmp #$0a	        CMP #$0A
.39f7	90 00		bcc $39f9	        BCC b39F9
.39f9	ad 8b 84	lda $848b	b39F9   LDA isGEOS
.39fc	f0 18		beq $3a16	        BEQ b3A16
.39fe	20 04 3a	jsr $3a04	        JSR s3A04    ;load r4 from $7f00 and r1 from $82ac
.3a01	4c e4 c1	jmp $c1e4	        JMP GetBlock
.3a04	a9 7f		lda #$7f	s3A04   LDA #>f7F00
.3a06	85 0b		sta $0b		        STA r4H
.3a08	a9 00		lda #$00	        LDA #<f7F00
.3a0a	85 0a		sta $0a		        STA r4L
.3a0c	ad ac 82	lda $82ac	        LDA a82AC
.3a0f	85 05		sta $05		        STA r1H
.3a11	ad ab 82	lda $82ab	        LDA a82AB
.3a14	85 04		sta $04		        STA r1L
.3a16	60		rts		b3A16   RTS
.3a17	a9 00		lda #$00	s3A17   LDA #$00
.3a19	85 05		sta $05		        STA r1H
.3a1b	20 2f 3a	jsr $3a2f	        JSR s3A2F
.3a1e	98		tya		        TYA
.3a1f	d0 07		bne $3a28	        BNE b3A28
.3a21	a9 12		lda #$12	        LDA #$12
.3a23	85 04		sta $04		        STA r1L
.3a25	a0 01		ldy #$01	        LDY #$01
.3a27	60		rts		        RTS
.3a28	a9 28		lda #$28	b3A28   LDA #$28
.3a2a	85 04		sta $04		        STA r1L
.3a2c	a0 03		ldy #$03	        LDY #$03
.3a2e	60		rts		        RTS
.3a2f	ac 89 84	ldy $8489	s3A2F   LDY curDrive
.3a32	b9 86 84	lda $8486,y	        LDA f8486,Y
.3a35	29 0f		and #$0f	        AND #$0F
.3a37	c9 03		cmp #$03	        CMP #$03
.3a39	f0 04		beq $3a3f	        BEQ b3A3F
.3a3b	a0 00		ldy #$00	        LDY #$00
.3a3d	f0 02		beq $3a41	        BEQ b3A41
.3a3f	a0 ff		ldy #$ff	b3A3F   LDY #$FF
.3a41	60		rts		b3A41   RTS
.3a42	20 14 c2	jsr $c214	s3A42   JSR EnterTurbo ;     Activate disk drive turbo mode
.3a45	8a		txa		        TXA
.3a46	d0 1e		bne $3a66	        BNE b3A66
.3a48	20 5c c2	jsr $c25c	        JSR InitForIO ;     Prepare for I/O across the serial bus
.3a4b	20 1a c2	jsr $c21a	b3A4B   JSR ReadBlock ;     Low level read block from disk (r1L=TRACK, r1H=SECTOR, r4=BUFFER)
.3a4e	8a		txa		        TXA
.3a4f	d0 15		bne $3a66	        BNE b3A66    ;if error, skip ahead
.3a51	c6 06		dec $06		        DEC r2L
.3a53	f0 11		beq $3a66	        BEQ b3A66
.3a55	a0 00		ldy #$00	        LDY #$00
.3a57	b1 0a		lda ($0a),y	        LDA (r4L),Y  ;get the first byte pointed to by r4 (read buffer)
.3a59	f0 0b		beq $3a66	        BEQ b3A66    ;if zero, skip ahead
.3a5b	85 04		sta $04		        STA r1L      ;store the first two bytes to r1
.3a5d	c8		iny		        INY
.3a5e	b1 0a		lda ($0a),y	        LDA (r4L),Y
.3a60	85 05		sta $05		        STA r1H
.3a62	e6 0b		inc $0b		        INC r4H      ;increase buffer pointer hi byte
.3a64	d0 e5		bne $3a4b	        BNE b3A4B    ;if not zero, read next block
.3a66	4c 5f c2	jmp $c25f	b3A66   JMP DoneWithIO ;     Restore system IO across the serial bus
.3a69	c9 08		cmp #$08	        CMP #$08
.3a6b	90 0e		bcc $3a7b	        BCC b3A7B
.3a6d	a2 00		ldx #$00	j3A6D   LDX #$00
.3a6f	ad 8b 84	lda $848b	        LDA isGEOS
.3a72	f0 06		beq $3a7a	        BEQ b3A7A
.3a74	20 04 3a	jsr $3a04	        JSR s3A04    ;load r4 from $7f00 and r1 from $82ac
.3a77	20 e7 c1	jsr $c1e7	        JSR PutBlock
.3a7a	60		rts		b3A7A   RTS
.3a7b	a5 fb		lda $fb		b3A7B   LDA aFB
.3a7d	48		pha		j3A7D   PHA
.3a7e	18		clc		        CLC
.3a7f	69 6c		adc #$6c	        ADC #$6C
.3a81	85 0b		sta $0b		        STA r4H
.3a83	a0 00		ldy #$00	        LDY #$00
.3a85	84 0a		sty $0a		        STY r4L
.3a87	c8		iny		        INY
.3a88	20 17 3a	jsr $3a17	        JSR s3A17
.3a8b	68		pla		        PLA
.3a8c	d0 03		bne $3a91	        BNE b3A91
.3a8e	98		tya		        TYA
.3a8f	d0 04		bne $3a95	        BNE b3A95
.3a91	a0 01		ldy #$01	b3A91   LDY #$01
.3a93	b1 0a		lda ($0a),y	        LDA (r4L),Y
.3a95	85 05		sta $05		b3A95   STA r1H
.3a97	e6 0b		inc $0b		        INC r4H
.3a99	4c e7 c1	jmp $c1e7	        JMP PutBlock
.3a9c	20 45 46	jsr $4645	s3A9C   JSR s4645
.3a9f	20 c6 58	jsr $58c6	        JSR s58C6
.3aa2	a2 0c		ldx #$0c	        LDX #$0C
.3aa4	20 4f 38	jsr $384f	        JSR s384F
.3aa7	a9 84		lda #$84	        LDA #>BootDiskName
.3aa9	85 0f		sta $0f		        STA r6H
.3aab	a9 76		lda #$76	        LDA #<BootDiskName
.3aad	85 0e		sta $0e		        STA r6L
.3aaf	a2 0c		ldx #$0c	        LDX #$0C
.3ab1	a0 0e		ldy #$0e	        LDY #$0E
.3ab3	a9 12		lda #$12	        LDA #$12
.3ab5	20 18 24	jsr $2418	        JSR s2418    ;copies printer driver and disk name from $6d85 to $8465
.3ab8	8a		txa		j3AB8   TXA
.3ab9	48		pha		        PHA
.3aba	ad c4 88	lda $88c4	        LDA sysRAMFlg
.3abd	29 20		and #$20	        AND #$20     ;if bit 5=1 $7900-$7dff is loaded with GEOS ram area $8400-$88ff by ToBasic routine
.3abf	f0 0e		beq $3acf	        BEQ b3ACF
.3ac1	a0 06		ldy #$06	        LDY #$06
.3ac3	b9 d2 3a	lda $3ad2,y	b3AC3   LDA f3AD2,Y  ;set up bytes to stash to RAM (StashRAM parameters at $3ad2)
.3ac6	99 02 00	sta $0002,y	        STA r0L,Y
.3ac9	88		dey		        DEY
.3aca	10 f7		bpl $3ac3	        BPL b3AC3
.3acc	20 c8 c2	jsr $c2c8	        JSR StashRAM
.3acf	68		pla		b3ACF   PLA
.3ad0	aa		tax		        TAX
.3ad1	60		rts		        RTS
>3ad2	00 84 00 79 00 05 00		f3AD2   .BYTE $00,$84,$00,$79,$00,$05,$00
.3ad9	a9 00		lda #$00	s3AD9   LDA #$00
.3adb	85 02		sta $02		        STA r0L
.3add	a9 88		lda #$88	        LDA #>inputDevName
.3adf	85 0f		sta $0f		        STA r6H      ;hi byte of filename
.3ae1	a9 cb		lda #$cb	        LDA #<inputDevName
.3ae3	85 0e		sta $0e		        STA r6L      ;lo byte of filename
.3ae5	20 08 c2	jsr $c208	        JSR GetFile
.3ae8	8a		txa		        TXA          ;error to A
.3ae9	d0 23		bne $3b0e	        BNE b3B0E    ;if error skip ahead
.3aeb	ad 0f c0	lda $c00f	        LDA version
.3aee	c9 13		cmp #$13	        CMP #$13
.3af0	90 15		bcc $3b07	        BCC b3B07
.3af2	ad c4 88	lda $88c4	        LDA sysRAMFlg ;get the sysRAMFlag
.3af5	29 20		and #$20	        AND #$20     ;if bit 5=1 $7900-$7dff is loaded with GEOS ram area $8400-$88ff by ToBasic routine
.3af7	f0 0e		beq $3b07	        BEQ b3B07
.3af9	a0 06		ldy #$06	        LDY #$06
.3afb	b9 15 3b	lda $3b15,y	b3AFB   LDA f3B15,Y  ;set up bytes to stash to RAM (StashRAM parameters at $3b15)
.3afe	99 02 00	sta $0002,y	        STA r0L,Y
.3b01	88		dey		        DEY
.3b02	10 f7		bpl $3afb	        BPL b3AFB
.3b04	20 c8 c2	jsr $c2c8	        JSR StashRAM
.3b07	20 80 fe	jsr $fe80	b3B07   JSR InitMouse ;     Initialize the input device
.3b0a	a2 00		ldx #$00	b3B0A   LDX #$00
.3b0c	f0 04		beq $3b12	        BEQ b3B12
.3b0e	e0 05		cpx #$05	b3B0E   CPX #$05
.3b10	f0 f8		beq $3b0a	        BEQ b3B0A
.3b12	4c b8 3a	jmp $3ab8	b3B12   JMP j3AB8
>3b15	80 fe c0 fa 7a 01 00 ad		f3B15   .BYTE $80,$FE,$C0,$FA,$7A,$01,$00,$AD
>3b1d	89 84 49 01 a8 60		        .BYTE $89,$84,$49,$01,$A8,$60
.3b23	98		tya		s3B23   TYA
.3b24	48		pha		        PHA
.3b25	38		sec		        SEC
.3b26	e9 08		sbc #$08	        SBC #$08
.3b28	a8		tay		        TAY
.3b29	b9 36 3b	lda $3b36,y	        LDA f3B36,Y
.3b2c	95 01		sta $01,x	        STA f01,X
.3b2e	b9 39 3b	lda $3b39,y	        LDA f3B39,Y
.3b31	95 00		sta $00,x	        STA f00,X
.3b33	68		pla		        PLA
.3b34	a8		tay		        TAY
.3b35	60		rts		        RTS
>3b36	2b 2b 2b			f3B36   .BYTE $2B,$2B,$2B
>3b39	ed f5 fd			f3B39   .BYTE $ED,$F5,$FD
.3b3c	a5 7d		lda $7d		s3B3C   LDA a7D
.3b3e	d0 03		bne $3b43	        BNE b3B43
.3b40	20 56 59	jsr $5956	        JSR s5956    ;set coords and draw rectangle
.3b43	20 4c 3b	jsr $3b4c	b3B43   JSR s3B4C
.3b46	20 a6 4b	jsr $4ba6	        JSR s4BA6
.3b49	4c ad 3b	jmp $3bad	        JMP j3BAD
.3b4c	20 86 58	jsr $5886	s3B4C   JSR s5886    ;Draw rectangle in pad for icons before displaying file icons
.3b4f	20 26 59	jsr $5926	        JSR s5926    ;if pad view mode is icon, then CARRY=1, else CARRY=0
.3b52	b0 13		bcs $3b67	        BCS b3B67
.3b54	a9 ff		lda #$ff	        LDA #$FF
.3b56	85 7f		sta $7f		        STA a7F
.3b58	20 dd 53	jsr $53dd	        JSR s53DD
.3b5b	f0 0a		beq $3b67	        BEQ b3B67
.3b5d	a9 00		lda #$00	        LDA #$00     ;this is the icon view mode of the pad
.3b5f	85 7a		sta $7a		        STA padViewMode ;save it
.3b61	20 6c 58	jsr $586c	        JSR s586C    ;changing pad page
.3b64	20 a6 4b	jsr $4ba6	        JSR s4BA6
.3b67	a4 7a		ldy $7a		b3B67   LDY padViewMode
.3b69	b9 72 3b	lda $3b72,y	        LDA f3B72,Y
.3b6c	be 77 3b	ldx $3b77,y	        LDX f3B77,Y
.3b6f	4c d8 c1	jmp $c1d8	        JMP CallRoutine
>3b72	7c fd 00			f3B72   .BYTE $7C,$FD,$00
>3b75	03 06				        .BYTE $03,$06
>3b77	3b 54 55 55 55			f3B77   .BYTE $3B,$54,$55,$55,$55
.3b7c	a9 00		lda #$00	j3B7C   LDA #$00
.3b7e	20 c4 44	jsr $44c4	b3B7E   JSR s44C4
.3b81	18		clc		        CLC
.3b82	69 01		adc #$01	        ADC #$01     ;count files
.3b84	c9 08		cmp #$08	        CMP #$08     ;8 files?
.3b86	90 f6		bcc $3b7e	        BCC b3B7E    ;loop through filenames up to 8 times (8 icons)
.3b88	38		sec		        SEC
.3b89	e9 01		sbc #$01	        SBC #$01
.3b8b	20 cc 49	jsr $49cc	b3B8B   JSR s49CC    ;draw a pad file icon and filename
.3b8e	38		sec		        SEC
.3b8f	e9 01		sbc #$01	        SBC #$01
.3b91	10 f8		bpl $3b8b	        BPL b3B8B    ;loop through each icon position (8), drawing them
.3b93	a9 00		lda #$00	        LDA #>p88
.3b95	85 19		sta $19		        STA r11H     ;X position = 136
.3b97	a9 88		lda #$88	        LDA #<p88
.3b99	85 18		sta $18		        STA r11L
.3b9b	a9 7f		lda #$7f	        LDA #$7F
.3b9d	85 05		sta $05		        STA r1H      ;Y position = 127
.3b9f	a9 00		lda #$00	        LDA #$00
.3ba1	85 03		sta $03		        STA r0H      ;page number will always be less than 255
.3ba3	a6 fb		ldx $fb		        LDX aFB      ;load page number
.3ba5	e8		inx		        INX          ;increment it
.3ba6	86 02		stx $02		        STX r0L      ;r0 = number to print
.3ba8	a9 c0		lda #$c0	        LDA #$C0     ;FORMAT=left justify, supress leading zero
.3baa	4c 84 c1	jmp $c184	        JMP PutDecimal
.3bad	24 71		bit $71		j3BAD   BIT a71
.3baf	30 22		bmi $3bd3	        BMI b3BD3
.3bb1	20 e9 3b	jsr $3be9	s3BB1   JSR s3BE9
.3bb4	a9 7f		lda #$7f	        LDA #>p7F02
.3bb6	85 1f		sta $1f		        STA r14H
.3bb8	a9 02		lda #$02	        LDA #<p7F02
.3bba	85 1e		sta $1e		        STA r14L
.3bbc	20 49 44	jsr $4449	b3BBC   JSR s4449
.3bbf	20 9c 59	jsr $599c	        JSR s599C
.3bc2	18		clc		        CLC
.3bc3	a9 20		lda #$20	        LDA #$20
.3bc5	65 1e		adc $1e		        ADC r14L
.3bc7	85 1e		sta $1e		        STA r14L
.3bc9	90 02		bcc $3bcd	        BCC b3BCD
.3bcb	e6 1f		inc $1f		        INC r14H
.3bcd	a5 1f		lda $1f		b3BCD   LDA r14H
.3bcf	c9 80		cmp #$80	        CMP #$80
.3bd1	90 e9		bcc $3bbc	        BCC b3BBC
.3bd3	20 39 46	jsr $4639	b3BD3   JSR s4639    ;Clear desktop border
.3bd6	20 1a 46	jsr $461a	        JSR s461A
.3bd9	a5 7d		lda $7d		        LDA a7D
.3bdb	f0 0b		beq $3be8	        BEQ b3BE8
.3bdd	a9 18		lda #$18	        LDA #>p1894
.3bdf	85 03		sta $03		        STA r0H
.3be1	a9 94		lda #$94	        LDA #<p1894
.3be3	85 02		sta $02		        STA r0L
.3be5	20 31 59	jsr $5931	        JSR s5931
.3be8	60		rts		b3BE8   RTS
.3be9	a2 1e		ldx #$1e	s3BE9   LDX #$1E
.3beb	20 4f 38	jsr $384f	        JSR s384F
.3bee	a9 03		lda #$03	        LDA #>p0334
.3bf0	85 21		sta $21		        STA r15H
.3bf2	a9 34		lda #$34	        LDA #<p0334
.3bf4	85 20		sta $20		        STA r15L
.3bf6	a9 08		lda #$08	        LDA #$08
.3bf8	85 75		sta $75		        STA a75
.3bfa	a2 20		ldx #$20	b3BFA   LDX #$20     ;zero page address of pointer to source string
.3bfc	a0 1e		ldy #$1e	        LDY #$1E     ;zero page address of pointer to destination string
.3bfe	a9 12		lda #$12	        LDA #$12     ;length of string (18 bytes)
.3c00	20 6e c2	jsr $c26e	        JSR CmpFString
.3c03	d0 16		bne $3c1b	        BNE b3C1B
.3c05	a9 00		lda #$00	        LDA #$00
.3c07	a8		tay		        TAY
.3c08	91 20		sta ($20),y	        STA (r15L),Y
.3c0a	a5 75		lda $75		        LDA a75
.3c0c	a2 0c		ldx #$0c	        LDX #$0C
.3c0e	20 f0 45	jsr $45f0	        JSR s45F0
.3c11	a9 00		lda #$00	        LDA #$00
.3c13	a8		tay		        TAY
.3c14	91 0c		sta ($0c),y	        STA (r5L),Y
.3c16	a5 75		lda $75		        LDA a75
.3c18	20 04 48	jsr $4804	        JSR s4804
.3c1b	18		clc		b3C1B   CLC
.3c1c	a9 12		lda #$12	        LDA #$12
.3c1e	65 20		adc $20		        ADC r15L
.3c20	85 20		sta $20		        STA r15L
.3c22	90 02		bcc $3c26	        BCC b3C26
.3c24	e6 21		inc $21		        INC r15H
.3c26	e6 75		inc $75		b3C26   INC a75
.3c28	a5 75		lda $75		        LDA a75
.3c2a	c9 10		cmp #$10	        CMP #$10
.3c2c	90 cc		bcc $3bfa	        BCC b3BFA
.3c2e	60		rts		        RTS
.3c2f	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.3c32	ad 89 84	lda $8489	j3C32   LDA curDrive
.3c35	85 79		sta $79		        STA a79
.3c37	24 71		bit $71		        BIT a71
.3c39	10 48		bpl $3c83	        BPL b3C83
.3c3b	a5 78		lda $78		        LDA a78
.3c3d	f0 03		beq $3c42	        BEQ b3C42
.3c3f	4c fb 55	jmp $55fb	        JMP j55FB
.3c42	20 7c 3e	jsr $3e7c	b3C42   JSR s3E7C
.3c45	a5 74		lda $74		        LDA a74
.3c47	d0 06		bne $3c4f	        BNE b3C4F
.3c49	20 f1 50	jsr $50f1	        JSR s50F1
.3c4c	4c 6d 3f	jmp $3f6d	        JMP j3F6D
.3c4f	20 58 38	jsr $3858	b3C4F   JSR s3858
.3c52	a9 ff		lda #$ff	        LDA #$FF
.3c54	8d 84 3c	sta $3c84	        STA a3C84
.3c57	ad 8d 84	lda $848d	        LDA numDrives
.3c5a	48		pha		        PHA
.3c5b	ad f0 0a	lda $0af0	        LDA a0AF0
.3c5e	f0 0e		beq $3c6e	        BEQ b3C6E
.3c60	20 ec 1a	jsr $1aec	        JSR s1AEC    ;seems to set drive A or drive B type
.3c63	20 35 c2	jsr $c235	        JSR PurgeTurbo
.3c66	20 ec 1a	jsr $1aec	        JSR s1AEC    ;seems to set drive A or drive B type
.3c69	a9 01		lda #$01	        LDA #$01
.3c6b	8d 8d 84	sta $848d	        STA numDrives
.3c6e	20 ed 46	jsr $46ed	b3C6E   JSR s46ED    ;r9 = $77/$76, A=*(r9+Y)
.3c71	20 85 3c	jsr $3c85	        JSR s3C85    ;Get desk accessory name to load to $8400
.3c74	68		pla		        PLA
.3c75	8d 8d 84	sta $848d	        STA numDrives
.3c78	ad 84 3c	lda $3c84	        LDA a3C84
.3c7b	f0 06		beq $3c83	        BEQ b3C83
.3c7d	20 58 38	jsr $3858	        JSR s3858
.3c80	20 9c 59	jsr $599c	        JSR s599C
.3c83	60		rts		b3C83   RTS
>3c84	00				a3C84   .BYTE $00
.3c85	48		pha		s3C85   PHA
.3c86	a0 1d		ldy #$1d	        LDY #$1D
=15497					a3C89   =*+$01
.3c88	b1 14		lda ($14),y	b3C88   LDA (r9L),Y
.3c8a	99 00 84	sta $8400,y	        STA dirEntryBuf,Y
.3c8d	88		dey		        DEY
.3c8e	10 f8		bpl $3c88	        BPL b3C88
.3c90	20 01 5a	jsr $5a01	        JSR s5A01    ;Load directory entry buffer to r9
.3c93	68		pla		        PLA
.3c94	c9 03		cmp #$03	        CMP #$03     ;is it a DATA file?
.3c96	90 26		bcc $3cbe	        BCC b3CBE
.3c98	c9 05		cmp #$05	        CMP #$05     ;is it a DESK ACCESSORY?
.3c9a	d0 03		bne $3c9f	        BNE b3C9F
.3c9c	4c e4 4e	jmp $4ee4	        JMP j4EE4    ;Load and run a desk accessory
.3c9f	c9 06		cmp #$06	b3C9F   CMP #$06     ;is it an APPLICATION?
.3ca1	f0 04		beq $3ca7	        BEQ b3CA7
.3ca3	c9 0e		cmp #$0e	        CMP #$0E     ;is it an AUTO_EXEC?
.3ca5	d0 03		bne $3caa	        BNE b3CAA
.3ca7	4c d2 3c	jmp $3cd2	b3CA7   JMP j3CD2    ;Load an application
.3caa	c9 07		cmp #$07	b3CAA   CMP #$07     ;is it APPLICATION DATA?
.3cac	d0 03		bne $3cb1	        BNE b3CB1
.3cae	4c 15 3d	jmp $3d15	        JMP j3D15
.3cb1	a9 00		lda #$00	b3CB1   LDA #$00
.3cb3	8d 84 3c	sta $3c84	        STA a3C84
.3cb6	a0 02		ldy #$02	        LDY #$02
.3cb8	20 6b 24	jsr $246b	        JSR s246B
.3cbb	4c 6d 3f	jmp $3f6d	        JMP j3F6D
.3cbe	a0 00		ldy #$00	b3CBE   LDY #$00
.3cc0	b1 14		lda ($14),y	        LDA (r9L),Y
.3cc2	29 0f		and #$0f	        AND #$0F
.3cc4	c9 02		cmp #$02	        CMP #$02
.3cc6	d0 e9		bne $3cb1	        BNE b3CB1
.3cc8	20 1b 55	jsr $551b	        JSR s551B
.3ccb	e0 0a		cpx #$0a	        CPX #$0A
.3ccd	f0 e2		beq $3cb1	        BEQ b3CB1
.3ccf	4c 9a 25	jmp $259a	        JMP s259A
.3cd2	a9 c2		lda #$c2	j3CD2   LDA #$C2
.3cd4	48		pha		        PHA
.3cd5	a9 2b		lda #$2b	        LDA #$2B
.3cd7	48		pha		        PHA
.3cd8	20 11 25	jsr $2511	        JSR s2511    ;clear screen with pattern
.3cdb	20 ed 3c	jsr $3ced	        JSR s3CED    ;Clear ram addresses of overlay  area ($3da7- $7fff) 16985 bytes
.3cde	a9 00		lda #$00	        LDA #$00
.3ce0	85 02		sta $02		        STA r0L      ;LOAD_OPT= Load at address in file header, not passing data, not printing
.3ce2	4c 1d c2	jmp $c21d	        JMP LdApplic
>3ce5	04 3d				f3CE5   .BYTE $04,$3D
>3ce7	06 a7				f3CE7   .BYTE $06,$A7
>3ce9	38 42				f3CE9   .BYTE $38,$42
>3ceb	d5 59				f3CEB   .BYTE $D5,$59
.3ced	a5 06		lda $06		s3CED   LDA r2L
.3cef	48		pha		        PHA          ;keep r2L for later
.3cf0	a2 01		ldx #$01	        LDX #$01
.3cf2	bd e5 3c	lda $3ce5,x	b3CF2   LDA f3CE5,X
.3cf5	85 05		sta $05		        STA r1H      ;address of area to clear (hi)
.3cf7	bd e7 3c	lda $3ce7,x	        LDA f3CE7,X
.3cfa	85 04		sta $04		        STA r1L      ;address of area to clear (lo)
.3cfc	bd e9 3c	lda $3ce9,x	        LDA f3CE9,X
.3cff	85 03		sta $03		        STA r0H      ;number of bytes to clear (hi)
.3d01	bd eb 3c	lda $3ceb,x	        LDA f3CEB,X
.3d04	85 02		sta $02		        STA r0L      ;number of bytes to clear (lo)
.3d06	20 78 c1	jsr $c178	        JSR ClearRam
.3d09	ca		dex		        DEX
.3d0a	10 e6		bpl $3cf2	        BPL b3CF2
.3d0c	68		pla		        PLA          ;retrieve r2L
.3d0d	85 06		sta $06		        STA r2L
.3d0f	a9 ff		lda #$ff	        LDA #$FF
.3d11	8d 89 3c	sta $3c89	        STA a3C89
.3d14	60		rts		        RTS
.3d15	a9 80		lda #$80	j3D15   LDA #$80
.3d17	8d a6 3d	sta $3da6	        STA a3DA6
.3d1a	a5 14		lda $14		        LDA r9L
.3d1c	18		clc		        CLC
.3d1d	69 03		adc #$03	        ADC #$03
.3d1f	85 0a		sta $0a		        STA r4L
.3d21	a5 15		lda $15		        LDA r9H
.3d23	69 00		adc #$00	        ADC #$00
.3d25	85 0b		sta $0b		        STA r4H
.3d27	20 e6 59	jsr $59e6	        JSR s59E6    ;load $8bd0 to r3
.3d2a	a2 0a		ldx #$0a	        LDX #$0A
.3d2c	a0 08		ldy #$08	        LDY #$08
.3d2e	20 16 24	jsr $2416	        JSR s2416
.3d31	20 d2 59	jsr $59d2	        JSR s59D2    ;load $8bbc to r2
.3d34	a2 0a		ldx #$0a	        LDX #$0A
.3d36	20 4f 38	jsr $384f	        JSR s384F
.3d39	a2 0a		ldx #$0a	        LDX #$0A
.3d3b	a0 06		ldy #$06	        LDY #$06
.3d3d	a9 12		lda #$12	        LDA #$12
.3d3f	20 68 c2	jsr $c268	        JSR CopyFString
.3d42	a0 13		ldy #$13	        LDY #$13
.3d44	b1 14		lda ($14),y	        LDA (r9L),Y
.3d46	85 04		sta $04		        STA r1L
.3d48	c8		iny		        INY
.3d49	b1 14		lda ($14),y	        LDA (r9L),Y
.3d4b	85 05		sta $05		        STA r1H
.3d4d	20 e3 1d	jsr $1de3	        JSR s1DE3
.3d50	8a		txa		        TXA
.3d51	f0 06		beq $3d59	        BEQ b3D59
.3d53	20 9a 25	jsr $259a	b3D53   JSR s259A
.3d56	4c 34 50	jmp $5034	b3D56   JMP j5034
.3d59	ad 75 80	lda $8075	b3D59   LDA a8075
.3d5c	d0 03		bne $3d61	        BNE b3D61
.3d5e	4c b1 3c	jmp $3cb1	        JMP b3CB1
.3d61	a9 80		lda #$80	b3D61   LDA #>a8075
.3d63	85 05		sta $05		        STA r1H
.3d65	a9 75		lda #$75	        LDA #<a8075
.3d67	85 04		sta $04		        STA r1L
.3d69	a9 8b		lda #$8b	        LDA #>p8BE4
.3d6b	85 17		sta $17		        STA r10H
.3d6d	a9 e4		lda #$e4	        LDA #<p8BE4
.3d6f	85 16		sta $16		        STA r10L
.3d71	a2 04		ldx #$04	        LDX #$04
.3d73	a0 16		ldy #$16	        LDY #$16
.3d75	a9 0c		lda #$0c	        LDA #$0C
.3d77	20 18 24	jsr $2418	        JSR s2418    ;copies printer driver and disk name from $6d85 to $8465
.3d7a	20 ab 3d	jsr $3dab	        JSR s3DAB
.3d7d	e0 0c		cpx #$0c	        CPX #$0C
.3d7f	f0 d5		beq $3d56	        BEQ b3D56
.3d81	8a		txa		        TXA
.3d82	d0 cf		bne $3d53	        BNE b3D53
.3d84	ad 80 8b	lda $8b80	        LDA p8B80
.3d87	f0 cd		beq $3d56	        BEQ b3D56
.3d89	20 11 25	jsr $2511	        JSR s2511    ;clear screen with pattern
.3d8c	20 d2 59	jsr $59d2	        JSR s59D2    ;load $8bbc to r2
.3d8f	20 e6 59	jsr $59e6	        JSR s59E6    ;load $8bd0 to r3
.3d92	20 6b 25	jsr $256b	        JSR s256B    ;load r6 with $8b80 address
.3d95	20 ed 3c	jsr $3ced	        JSR s3CED    ;Clear ram addresses of overlay  area ($3da7- $7fff) 16985 bytes
.3d98	ad a6 3d	lda $3da6	        LDA a3DA6
.3d9b	85 02		sta $02		        STA r0L
.3d9d	a9 c2		lda #$c2	        LDA #$C2
.3d9f	48		pha		        PHA
.3da0	a9 2b		lda #$2b	        LDA #$2B
.3da2	48		pha		        PHA
.3da3	4c 08 c2	jmp $c208	        JMP GetFile
>3da6	00				a3DA6   .BYTE $00
.3da7	a9 04		lda #$04	s3DA7   LDA #$04
.3da9	d0 02		bne $3dad	        BNE b3DAD
.3dab	a9 06		lda #$06	s3DAB   LDA #$06
.3dad	85 10		sta $10		b3DAD   STA r7L
.3daf	20 b5 1a	jsr $1ab5	        JSR s1AB5
.3db2	8a		txa		        TXA
.3db3	d0 05		bne $3dba	        BNE b3DBA
.3db5	ad 80 8b	lda $8b80	        LDA p8B80
.3db8	d0 5e		bne $3e18	        BNE b3E18
.3dba	20 1e 3e	jsr $3e1e	b3DBA   JSR s3E1E
.3dbd	8a		txa		        TXA
.3dbe	d0 24		bne $3de4	        BNE b3DE4
.3dc0	ac 8d 84	ldy $848d	        LDY numDrives
.3dc3	88		dey		        DEY
.3dc4	f0 0e		beq $3dd4	        BEQ b3DD4
.3dc6	20 ec 1a	jsr $1aec	        JSR s1AEC    ;seems to set drive A or drive B type
.3dc9	20 b5 1a	jsr $1ab5	b3DC9   JSR s1AB5
.3dcc	8a		txa		        TXA
.3dcd	d0 05		bne $3dd4	        BNE b3DD4
.3dcf	ad 80 8b	lda $8b80	        LDA p8B80
.3dd2	d0 44		bne $3e18	        BNE b3E18
.3dd4	ad 49 02	lda $0249	b3DD4   LDA a0249
.3dd7	d0 3d		bne $3e16	        BNE b3E16
.3dd9	20 b9 59	jsr $59b9	        JSR s59B9
.3ddc	10 11		bpl $3def	        BPL b3DEF
.3dde	a5 10		lda $10		        LDA r7L
.3de0	c9 04		cmp #$04	        CMP #$04
.3de2	f0 08		beq $3dec	        BEQ b3DEC
.3de4	a0 06		ldy #$06	b3DE4   LDY #$06
.3de6	20 6b 24	jsr $246b	        JSR s246B
.3de9	b8		clv		        CLV
.3dea	50 2a		bvc $3e16	        BVC b3E16
.3dec	20 ec 1a	jsr $1aec	b3DEC   JSR s1AEC    ;seems to set drive A or drive B type
.3def	ac 89 84	ldy $8489	b3DEF   LDY curDrive
.3df2	a2 0c		ldx #$0c	        LDX #$0C
.3df4	20 23 3b	jsr $3b23	        JSR s3B23
.3df7	a5 10		lda $10		        LDA r7L
.3df9	48		pha		        PHA
.3dfa	a5 17		lda $17		        LDA r10H
.3dfc	48		pha		        PHA
.3dfd	a5 16		lda $16		        LDA r10L
.3dff	48		pha		        PHA
.3e00	a2 3e		ldx #$3e	        LDX #$3E
.3e02	a9 3b		lda #$3b	        LDA #$3B
.3e04	20 83 24	jsr $2483	        JSR s2483    ;COMMON DIALOG BOX ROUTINE ============================
.3e07	68		pla		        PLA
.3e08	85 16		sta $16		        STA r10L
.3e0a	68		pla		        PLA
.3e0b	85 17		sta $17		        STA r10H
.3e0d	68		pla		        PLA
.3e0e	85 10		sta $10		        STA r7L
.3e10	a5 02		lda $02		        LDA r0L
.3e12	c9 01		cmp #$01	        CMP #$01
.3e14	f0 b3		beq $3dc9	        BEQ b3DC9
.3e16	a2 0c		ldx #$0c	b3E16   LDX #$0C
.3e18	a0 00		ldy #$00	b3E18   LDY #$00
.3e1a	8c 49 02	sty $0249	        STY a0249
.3e1d	60		rts		        RTS
.3e1e	a2 00		ldx #$00	s3E1E   LDX #$00
.3e20	a5 10		lda $10		        LDA r7L
.3e22	c9 04		cmp #$04	        CMP #$04
.3e24	f0 14		beq $3e3a	        BEQ b3E3A
.3e26	ad c3 88	lda $88c3	        LDA ramExpSize ;2=128k. 4=256k, 8=512k; 16=1MB, 32=1MB+
.3e29	d0 0f		bne $3e3a	        BNE b3E3A    ;return if REU is present
.3e2b	ac 8d 84	ldy $848d	        LDY numDrives
.3e2e	88		dey		        DEY
.3e2f	f0 08		beq $3e39	        BEQ b3E39
.3e31	ad 8e 84	lda $848e	        LDA driveType_8
.3e34	cd 8f 84	cmp $848f	        CMP driveType_9
.3e37	f0 01		beq $3e3a	        BEQ b3E3A
.3e39	ca		dex		b3E39   DEX
.3e3a	60		rts		b3E3A   RTS
>3e3b	81 0b 10 10 38 27 0c 10		        .BYTE $81,$0B,$10,$10,$38,$27,$0C,$10
>3e43	20 16 0b 10 30 45 2d 0c		        .BYTE $20,$16,$0B,$10,$30,$45,$2D,$0C
>3e4b	1c 30 0c 01 01 48 02 11		        .BYTE $1C,$30,$0C,$01,$01,$48,$02,$11
>3e53	48 00				        .BYTE $48,$00
.3e55	0a		asl a		s3E55   ASL          ;Shift 4th byte to carry flag
.3e56	0a		asl a		        ASL
.3e57	0a		asl a		        ASL
.3e58	0a		asl a		        ASL
.3e59	0a		asl a		        ASL
.3e5a	90 04		bcc $3e60	        BCC b3E60
.3e5c	09 1f		ora #$1f	        ORA #$1F
.3e5e	d0 02		bne $3e62	        BNE b3E62
.3e60	05 fb		ora $fb		b3E60   ORA aFB
.3e62	60		rts		b3E62   RTS
.3e63	bd b2 18	lda $18b2,x	s3E63   LDA f18B2,X
.3e66	48		pha		s3E66   PHA
.3e67	29 1f		and #$1f	        AND #$1F
.3e69	a8		tay		        TAY
.3e6a	68		pla		        PLA
.3e6b	4a		lsr a		        LSR
.3e6c	4a		lsr a		        LSR
.3e6d	4a		lsr a		        LSR
.3e6e	4a		lsr a		        LSR
.3e6f	4a		lsr a		        LSR
.3e70	c0 1f		cpy #$1f	        CPY #$1F
.3e72	d0 03		bne $3e77	        BNE b3E77
.3e74	18		clc		        CLC
.3e75	69 08		adc #$08	        ADC #$08
.3e77	60		rts		b3E77   RTS
.3e78	ae 4b 02	ldx $024b	s3E78   LDX a024B
=15996					s3E7C   =*+$01
.3e7b	2c a6 78	bit $78a6	        BIT a78A6
.3e7e	a5 03		lda $03		s3E7E   LDA r0H
.3e80	48		pha		        PHA
.3e81	a5 02		lda $02		        LDA r0L
.3e83	48		pha		        PHA
.3e84	8a		txa		        TXA
.3e85	48		pha		        PHA
.3e86	20 63 3e	jsr $3e63	        JSR s3E63
.3e89	85 72		sta $72		        STA a72
.3e8b	c9 08		cmp #$08	        CMP #$08
.3e8d	b0 0b		bcs $3e9a	        BCS b3E9A
.3e8f	98		tya		        TYA
.3e90	20 e4 4a	jsr $4ae4	        JSR s4AE4
.3e93	e0 ff		cpx #$ff	        CPX #$FF
.3e95	d0 03		bne $3e9a	        BNE b3E9A
.3e97	4c c2 23	jmp $23c2	        JMP j23C2
.3e9a	a5 72		lda $72		b3E9A   LDA a72
.3e9c	20 96 46	jsr $4696	        JSR s4696
.3e9f	86 74		stx $74		        STX a74
.3ea1	a2 08		ldx #$08	        LDX #$08
.3ea3	20 f0 45	jsr $45f0	        JSR s45F0
.3ea6	a5 09		lda $09		        LDA r3H
.3ea8	85 77		sta $77		        STA a77
.3eaa	a5 08		lda $08		        LDA r3L
.3eac	85 76		sta $76		        STA a76
.3eae	68		pla		        PLA
.3eaf	aa		tax		        TAX
.3eb0	68		pla		        PLA
.3eb1	85 02		sta $02		        STA r0L
.3eb3	68		pla		        PLA
.3eb4	85 03		sta $03		        STA r0H
.3eb6	60		rts		        RTS
.3eb7	20 26 59	jsr $5926	        JSR s5926    ;if pad view mode is icon, then CARRY=1, else CARRY=0
.3eba	90 4d		bcc $3f09	        BCC b3F09
.3ebc	ad 8a 84	lda $848a	        LDA diskOpenFlg
.3ebf	f0 48		beq $3f09	        BEQ b3F09
.3ec1	24 71		bit $71		        BIT a71
.3ec3	10 1b		bpl $3ee0	        BPL b3EE0
.3ec5	50 03		bvc $3eca	        BVC b3ECA
.3ec7	4c c6 40	jmp $40c6	        JMP j40C6
.3eca	a5 02		lda $02		b3ECA   LDA r0L
.3ecc	20 d5 3f	jsr $3fd5	        JSR s3FD5
.3ecf	e0 ff		cpx #$ff	        CPX #$FF
.3ed1	d0 10		bne $3ee3	        BNE b3EE3
.3ed3	20 0a 3f	jsr $3f0a	        JSR s3F0A
.3ed6	f0 08		beq $3ee0	        BEQ b3EE0
.3ed8	20 7a 59	jsr $597a	        JSR s597A
.3edb	f0 03		beq $3ee0	        BEQ b3EE0
.3edd	20 14 3f	jsr $3f14	        JSR s3F14
.3ee0	4c 2f 3f	jmp $3f2f	b3EE0   JMP j3F2F
.3ee3	a5 72		lda $72		b3EE3   LDA a72
.3ee5	48		pha		        PHA
.3ee6	20 7e 3e	jsr $3e7e	        JSR s3E7E
.3ee9	68		pla		        PLA
.3eea	38		sec		        SEC
.3eeb	e5 72		sbc $72		        SBC a72
.3eed	85 1e		sta $1e		        STA r14L
.3eef	20 7a 59	jsr $597a	        JSR s597A
.3ef2	d0 03		bne $3ef7	        BNE b3EF7
.3ef4	4c 6d 3f	jmp $3f6d	b3EF4   JMP j3F6D
.3ef7	a6 03		ldx $03		b3EF7   LDX r0H
.3ef9	f0 0b		beq $3f06	        BEQ b3F06
.3efb	a6 78		ldx $78		        LDX a78
.3efd	d0 07		bne $3f06	        BNE b3F06
.3eff	a5 1e		lda $1e		        LDA r14L
.3f01	d0 f1		bne $3ef4	        BNE b3EF4
.3f03	4c 32 3c	jmp $3c32	        JMP j3C32
.3f06	4c 2e 40	jmp $402e	b3F06   JMP j402E    ;begin "drag" operation
.3f09	60		rts		b3F09   RTS
.3f0a	c9 08		cmp #$08	s3F0A   CMP #$08
.3f0c	b0 18		bcs $3f26	        BCS b3F26
.3f0e	a5 71		lda $71		        LDA a71
.3f10	29 20		and #$20	        AND #$20
.3f12	f0 18		beq $3f2c	        BEQ b3F2C
.3f14	a5 fb		lda $fb		s3F14   LDA aFB
.3f16	48		pha		        PHA
.3f17	a5 72		lda $72		        LDA a72
.3f19	48		pha		        PHA
.3f1a	20 f6 3f	jsr $3ff6	        JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.3f1d	68		pla		        PLA
.3f1e	85 72		sta $72		        STA a72
.3f20	68		pla		        PLA
.3f21	85 fb		sta $fb		        STA aFB
.3f23	a2 00		ldx #$00	        LDX #$00
.3f25	60		rts		        RTS
.3f26	a5 71		lda $71		b3F26   LDA a71
.3f28	29 20		and #$20	        AND #$20
.3f2a	f0 e8		beq $3f14	        BEQ s3F14
.3f2c	a2 ff		ldx #$ff	b3F2C   LDX #$FF
.3f2e	60		rts		        RTS
.3f2f	a5 71		lda $71		j3F2F   LDA a71
.3f31	a6 02		ldx $02		        LDX r0L
.3f33	e0 08		cpx #$08	        CPX #$08
.3f35	90 04		bcc $3f3b	        BCC b3F3B
.3f37	09 20		ora #$20	        ORA #$20
.3f39	d0 02		bne $3f3d	        BNE b3F3D
.3f3b	29 df		and #$df	b3F3B   AND #$DF
.3f3d	85 71		sta $71		b3F3D   STA a71
.3f3f	20 f3 40	jsr $40f3	        JSR s40F3
.3f42	24 71		bit $71		        BIT a71
.3f44	10 02		bpl $3f48	        BPL b3F48
.3f46	e6 78		inc $78		        INC a78
.3f48	a9 80		lda #$80	b3F48   LDA #$80
.3f4a	05 71		ora $71		        ORA a71
.3f4c	85 71		sta $71		        STA a71
.3f4e	a6 78		ldx $78		        LDX a78
.3f50	a5 02		lda $02		        LDA r0L
.3f52	20 55 3e	jsr $3e55	        JSR s3E55    ;test 4th bit
.3f55	9d b2 18	sta $18b2,x	        STA f18B2,X
.3f58	20 7e 3e	jsr $3e7e	        JSR s3E7E
.3f5b	a5 02		lda $02		        LDA r0L
.3f5d	20 24 48	jsr $4824	        JSR s4824    ;invert icon
.3f60	a5 72		lda $72		        LDA a72
.3f62	20 96 46	jsr $4696	        JSR s4696
.3f65	86 74		stx $74		        STX a74
.3f67	20 e0 33	jsr $33e0	        JSR s33E0    ;Update # of selected icons for multi-select  (X selected, top of pad)
.3f6a	a2 00		ldx #$00	        LDX #$00
.3f6c	60		rts		        RTS
.3f6d	a9 ff		lda #$ff	j3F6D   LDA #$FF
.3f6f	85 09		sta $09		        STA r3H
.3f71	d0 04		bne $3f77	        BNE b3F77
.3f73	a9 00		lda #$00	s3F73   LDA #$00
.3f75	85 09		sta $09		        STA r3H
.3f77	a5 03		lda $03		b3F77   LDA r0H
.3f79	48		pha		        PHA
.3f7a	a5 02		lda $02		        LDA r0L
.3f7c	48		pha		        PHA
.3f7d	a5 05		lda $05		        LDA r1H
.3f7f	48		pha		        PHA
.3f80	a5 04		lda $04		        LDA r1L
.3f82	48		pha		        PHA
.3f83	a5 72		lda $72		        LDA a72
.3f85	20 cd 3f	jsr $3fcd	        JSR s3FCD
.3f88	f0 0d		beq $3f97	        BEQ b3F97
.3f8a	20 f3 40	jsr $40f3	        JSR s40F3
.3f8d	a5 09		lda $09		        LDA r3H
.3f8f	f0 03		beq $3f94	        BEQ b3F94
.3f91	20 22 48	jsr $4822	        JSR s4822
.3f94	20 a6 3f	jsr $3fa6	b3F94   JSR s3FA6
.3f97	68		pla		b3F97   PLA
.3f98	85 04		sta $04		        STA r1L
.3f9a	68		pla		        PLA
.3f9b	85 05		sta $05		        STA r1H
.3f9d	68		pla		        PLA
.3f9e	85 02		sta $02		        STA r0L
.3fa0	68		pla		        PLA
.3fa1	85 03		sta $03		        STA r0H
.3fa3	a2 00		ldx #$00	        LDX #$00
.3fa5	60		rts		        RTS
.3fa6	a6 78		ldx $78		s3FA6   LDX a78
.3fa8	86 03		stx $03		        STX r0H
.3faa	20 d3 3f	jsr $3fd3	        JSR s3FD3
.3fad	a5 03		lda $03		b3FAD   LDA r0H
.3faf	f0 16		beq $3fc7	        BEQ b3FC7
.3fb1	bd b3 18	lda $18b3,x	        LDA f18B3,X
.3fb4	9d b2 18	sta $18b2,x	        STA f18B2,X
.3fb7	e8		inx		        INX
.3fb8	e4 03		cpx $03		        CPX r0H
.3fba	90 f1		bcc $3fad	        BCC b3FAD
.3fbc	ce 4b 02	dec $024b	        DEC a024B
.3fbf	c6 78		dec $78		        DEC a78
.3fc1	a5 78		lda $78		        LDA a78
.3fc3	c9 ff		cmp #$ff	        CMP #$FF
.3fc5	d0 03		bne $3fca	        BNE b3FCA
.3fc7	20 1c 40	jsr $401c	b3FC7   JSR s401C    ;clear common GEOS dekstop variable locations
.3fca	4c e0 33	jmp $33e0	b3FCA   JMP s33E0    ;Update # of selected icons for multi-select  (X selected, top of pad)
.3fcd	20 d5 3f	jsr $3fd5	s3FCD   JSR s3FD5
.3fd0	e0 ff		cpx #$ff	        CPX #$FF
.3fd2	60		rts		        RTS
.3fd3	a5 72		lda $72		s3FD3   LDA a72
.3fd5	48		pha		s3FD5   PHA
.3fd6	24 71		bit $71		        BIT a71
.3fd8	10 18		bpl $3ff2	        BPL b3FF2
.3fda	85 08		sta $08		        STA r3L
.3fdc	a6 78		ldx $78		        LDX a78
.3fde	20 63 3e	jsr $3e63	b3FDE   JSR s3E63
.3fe1	c9 08		cmp #$08	        CMP #$08
.3fe3	b0 04		bcs $3fe9	        BCS b3FE9
.3fe5	c4 fb		cpy $fb		        CPY aFB
.3fe7	d0 04		bne $3fed	        BNE b3FED
.3fe9	c5 08		cmp $08		b3FE9   CMP r3L
.3feb	f0 07		beq $3ff4	        BEQ b3FF4
.3fed	ca		dex		b3FED   DEX
.3fee	e0 ff		cpx #$ff	        CPX #$FF
.3ff0	d0 ec		bne $3fde	        BNE b3FDE
.3ff2	a2 ff		ldx #$ff	b3FF2   LDX #$FF
.3ff4	68		pla		b3FF4   PLA
.3ff5	60		rts		        RTS
.3ff6	ad 8a 84	lda $848a	s3FF6   LDA diskOpenFlg
.3ff9	f0 1e		beq $4019	        BEQ b4019
.3ffb	a5 02		lda $02		        LDA r0L
.3ffd	48		pha		        PHA
.3ffe	a9 0f		lda #$0f	        LDA #$0F
.4000	48		pha		b4000   PHA
.4001	20 cd 3f	jsr $3fcd	        JSR s3FCD
.4004	f0 03		beq $4009	        BEQ b4009
.4006	20 24 48	jsr $4824	        JSR s4824    ;invert icon
.4009	68		pla		b4009   PLA
.400a	38		sec		        SEC
.400b	e9 01		sbc #$01	        SBC #$01
.400d	10 f1		bpl $4000	        BPL b4000
.400f	20 19 40	jsr $4019	        JSR b4019
.4012	20 e0 33	jsr $33e0	        JSR s33E0    ;Update # of selected icons for multi-select  (X selected, top of pad)
.4015	68		pla		        PLA
.4016	85 02		sta $02		        STA r0L
.4018	60		rts		        RTS
.4019	20 f3 40	jsr $40f3	b4019   JSR s40F3
.401c	a9 00		lda #$00	s401C   LDA #$00
.401e	85 71		sta $71		        STA a71
.4020	85 78		sta $78		        STA a78
.4022	8d 4b 02	sta $024b	        STA a024B
.4025	85 74		sta $74		        STA a74
.4027	85 72		sta $72		        STA a72
.4029	85 76		sta $76		        STA a76
.402b	85 77		sta $77		        STA a77
.402d	60		rts		        RTS
.402e	a5 71		lda $71		j402E   LDA a71
.4030	09 40		ora #$40	        ORA #$40
.4032	85 71		sta $71		        STA a71
.4034	a9 0d		lda #$0d	        LDA #$0D     ;move mouse down 13 bytes
.4036	8d b8 84	sta $84b8	        STA mouseTop
.4039	a6 78		ldx $78		        LDX a78
.403b	f0 0b		beq $4048	        BEQ b4048
.403d	a9 86		lda #$86	        LDA #<p4086
.403f	85 0a		sta $0a		        STA r4L
.4041	a9 40		lda #$40	        LDA #>p4086
.4043	85 0b		sta $0b		        STA r4H
.4045	b8		clv		        CLV
.4046	50 1d		bvc $4065	        BVC b4065
.4048	ad b2 18	lda $18b2	b4048   LDA f18B2
.404b	20 66 3e	jsr $3e66	        JSR s3E66
.404e	a2 0c		ldx #$0c	s404E   LDX #$0C
.4050	20 8d 49	jsr $498d	        JSR s498D
.4053	a0 00		ldy #$00	        LDY #$00
.4055	b1 0c		lda ($0c),y	        LDA (r5L),Y
.4057	18		clc		        CLC
.4058	69 01		adc #$01	        ADC #$01
.405a	85 0a		sta $0a		        STA r4L      ;lo byte of sprite data pointer
.405c	c8		iny		        INY
.405d	b1 0c		lda ($0c),y	        LDA (r5L),Y
.405f	85 0b		sta $0b		        STA r4H      ;hi byte of sprite data pointer
.4061	90 02		bcc $4065	        BCC b4065
.4063	e6 0b		inc $0b		        INC r4H
.4065	a9 01		lda #$01	b4065   LDA #$01
.4067	85 08		sta $08		        STA r3L      ;sprite number 1
.4069	20 c6 c1	jsr $c1c6	        JSR DrawSprite
.406c	a9 35		lda #$35	        LDA #$35
.406e	85 01		sta $01		        STA a01
.4070	ad 27 d0	lda $d027	        LDA $D027    ;Sprite 0 Color
.4073	8d 28 d0	sta $d028	        STA $D028    ;Sprite 1 Color
.4076	a9 30		lda #$30	        LDA #$30
.4078	85 01		sta $01		        STA a01
.407a	a9 01		lda #$01	        LDA #$01
.407c	8d 25 05	sta $0525	        STA a0525
.407f	a9 01		lda #$01	        LDA #$01
.4081	85 08		sta $08		        STA r3L
.4083	4c d2 c1	jmp $c1d2	        JMP EnablSprite
>4086	ff ff ff 80 00 01 80 00		p4086   .BYTE $FF,$FF,$FF,$80,$00,$01,$80,$00
>408e	01 a2 0c 89 b6 04 81 aa		        .BYTE $01,$A2,$0C,$89,$B6,$04,$81,$AA
>4096	95 e9 a2 94 89 a2 94 89		        .BYTE $95,$E9,$A2,$94,$89,$A2,$94,$89
>409e	a2 74 69 80 00 01 80 00		        .BYTE $A2,$74,$69,$80,$00,$01,$80,$00
>40a6	01 8f 58 01 88 09 c1 8e		        .BYTE $01,$8F,$58,$01,$88,$09,$C1,$8E
>40ae	4a 21 88 4b e1 88 4a 01		        .BYTE $4A,$21,$88,$4B,$E1,$88,$4A,$01
>40b6	88 49 e1 80 00 01 80 00		        .BYTE $88,$49,$E1,$80,$00,$01,$80,$00
>40be	01 80 00 01 ff			        .BYTE $01,$80,$00,$01,$FF
>40c3	ff ff 00			        .BYTE $FF,$FF,$00
.40c6	2c 05 85	bit $8505	j40C6   BIT a8505
.40c9	30 27		bmi $40f2	        BMI b40F2
.40cb	20 3e 58	jsr $583e	        JSR s583E    ;Retrieve the return address for inline call and JMP to it
.40ce	00		brk #		        BRK
>40cf	0c dd 00			        .BYTE $0C,$DD,$00
>40d2	3f 01 f0			        .BYTE $3F,$01,$F0
>40d5	03 4c				        .BYTE $03,$4C
.40d7	51 55		eor ($55),y	        EOR (p55),Y
.40d9	24 71		bit $71		        BIT a71
.40db	30 08		bmi $40e5	        BMI b40E5
.40dd	ad 4c 02	lda $024c	        LDA a024C
.40e0	f0 0d		beq $40ef	        BEQ b40EF
.40e2	4c 00 41	jmp $4100	        JMP j4100    ;called after a click on page or border
.40e5	50 03		bvc $40ea	b40E5   BVC b40EA
.40e7	4c 2f 41	jmp $412f	        JMP j412F
.40ea	20 7a 59	jsr $597a	b40EA   JSR s597A
.40ed	f0 03		beq $40f2	        BEQ b40F2
.40ef	20 f6 3f	jsr $3ff6	b40EF   JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.40f2	60		rts		b40F2   RTS
.40f3	24 71		bit $71		s40F3   BIT a71
.40f5	50 09		bvc $4100	        BVC j4100    ;called after a click on page or border
.40f7	20 15 41	jsr $4115	        JSR s4115
.40fa	a5 71		lda $71		        LDA a71
.40fc	29 bf		and #$bf	        AND #$BF
.40fe	85 71		sta $71		        STA a71
.4100	20 15 41	jsr $4115	j4100   JSR s4115
.4103	8d 4c 02	sta $024c	        STA a024C
.4106	8d ba 84	sta $84ba	        STA mouseLeft_LO
.4109	8d bb 84	sta $84bb	        STA mouseLeft_HI
.410c	8d b8 84	sta $84b8	        STA mouseTop
.410f	a9 c7		lda #$c7	        LDA #$C7
.4111	8d b9 84	sta $84b9	        STA mouseBottom
.4114	60		rts		        RTS
.4115	a9 01		lda #$01	s4115   LDA #$01
.4117	85 08		sta $08		        STA r3L
.4119	20 d5 c1	jsr $c1d5	        JSR DisablSprite
.411c	a9 00		lda #$00	        LDA #$00
.411e	8d 25 05	sta $0525	        STA a0525
.4121	8d b8 84	sta $84b8	        STA mouseTop
.4124	60		rts		        RTS
.4125	24 71		bit $71		        BIT a71
.4127	10 05		bpl $412e	        BPL b412E
.4129	a2 00		ldx #$00	        LDX #$00
.412b	20 7e 3e	jsr $3e7e	        JSR s3E7E
.412e	60		rts		b412E   RTS
.412f	a9 ff		lda #$ff	j412F   LDA #$FF
.4131	8d 72 18	sta $1872	        STA a1872
.4134	a2 41		ldx #$41	        LDX #$41
.4136	a9 41		lda #$41	        LDA #$41
.4138	20 6c 55	jsr $556c	        JSR s556C
.413b	a9 00		lda #$00	        LDA #$00
.413d	8d 72 18	sta $1872	        STA a1872
.4140	60		rts		        RTS
.4141	20 58 38	jsr $3858	        JSR s3858
.4144	a5 72		lda $72		        LDA a72
.4146	c9 08		cmp #$08	        CMP #$08
.4148	b0 13		bcs $415d	        BCS b415D
.414a	20 2a 58	jsr $582a	        JSR s582A
.414d	f0 1d		beq $416c	        BEQ b416C
.414f	ad 8b 84	lda $848b	        LDA isGEOS
.4152	d0 06		bne $415a	        BNE b415A
.4154	20 d4 50	jsr $50d4	        JSR s50D4
.4157	b8		clv		        CLV
.4158	50 15		bvc $416f	        BVC b416F
.415a	4c 72 41	jmp $4172	b415A   JMP j4172
.415d	20 34 58	jsr $5834	b415D   JSR s5834
.4160	f0 0d		beq $416f	        BEQ b416F
.4162	a5 74		lda $74		        LDA a74
.4164	f0 03		beq $4169	        BEQ b4169
.4166	4c cc 41	jmp $41cc	        JMP j41CC
.4169	4c 34 42	jmp $4234	b4169   JMP j4234
.416c	4c af 54	jmp $54af	b416C   JMP j54AF
.416f	4c f6 3f	jmp $3ff6	b416F   JMP s3FF6    ;unselect and un-reverse icon(s), 0 selected
.4172	20 ed 46	jsr $46ed	j4172   JSR s46ED    ;r9 = $77/$76, A=*(r9+Y)
.4175	c9 0c		cmp #$0c	        CMP #$0C
.4177	d0 03		bne $417c	        BNE b417C
.4179	4c 0b 51	jmp $510b	        JMP j510B
.417c	20 26 44	jsr $4426	b417C   JSR s4426
.417f	90 08		bcc $4189	        BCC b4189
.4181	a0 01		ldy #$01	        LDY #$01
.4183	20 6b 24	jsr $246b	        JSR s246B
.4186	a2 ff		ldx #$ff	        LDX #$FF
.4188	60		rts		        RTS
.4189	a5 0d		lda $0d		b4189   LDA r5H
.418b	48		pha		        PHA
.418c	a5 0c		lda $0c		        LDA r5L
.418e	48		pha		        PHA
.418f	a5 77		lda $77		        LDA a77
.4191	48		pha		        PHA
.4192	a5 76		lda $76		        LDA a76
.4194	48		pha		        PHA
.4195	a5 72		lda $72		        LDA a72
.4197	20 04 48	jsr $4804	        JSR s4804
.419a	68		pla		        PLA
.419b	85 0a		sta $0a		        STA r4L
.419d	68		pla		        PLA
.419e	85 0b		sta $0b		        STA r4H
.41a0	68		pla		        PLA
.41a1	85 0c		sta $0c		        STA r5L
.41a3	68		pla		        PLA
.41a4	85 0d		sta $0d		        STA r5H
.41a6	20 9c 44	jsr $449c	        JSR s449C
.41a9	20 7b 3a	jsr $3a7b	        JSR b3A7B
.41ac	20 9c 59	jsr $599c	        JSR s599C
.41af	20 6d 3a	jsr $3a6d	        JSR j3A6D
.41b2	20 9c 59	jsr $599c	        JSR s599C
.41b5	a5 77		lda $77		        LDA a77
.41b7	85 1f		sta $1f		        STA r14H
.41b9	a5 76		lda $76		        LDA a76
.41bb	85 1e		sta $1e		        STA r14L
.41bd	20 49 44	jsr $4449	        JSR s4449
.41c0	20 9c 59	jsr $599c	        JSR s599C
.41c3	20 73 3f	jsr $3f73	        JSR s3F73
.41c6	20 b1 3b	jsr $3bb1	        JSR s3BB1
.41c9	a2 00		ldx #$00	        LDX #$00
.41cb	60		rts		        RTS
.41cc	20 f7 34	jsr $34f7	j41CC   JSR s34F7
.41cf	a5 fb		lda $fb		        LDA aFB
.41d1	85 16		sta $16		        STA r10L
.41d3	8d 4e 02	sta $024e	        STA a024E
.41d6	20 f6 c1	jsr $c1f6	        JSR GetFreeDirBlk
.41d9	20 9c 59	jsr $599c	        JSR s599C
.41dc	98		tya		        TYA
.41dd	48		pha		        PHA
.41de	a5 16		lda $16		        LDA r10L
.41e0	c5 fd		cmp $fd		        CMP aFD
.41e2	90 14		bcc $41f8	        BCC b41F8
.41e4	f0 12		beq $41f8	        BEQ b41F8
.41e6	48		pha		        PHA
.41e7	20 4a c2	jsr $c24a	        JSR PutDirHead
.41ea	8a		txa		        TXA
.41eb	d0 03		bne $41f0	        BNE b41F0
.41ed	20 cb 39	jsr $39cb	        JSR s39CB
.41f0	68		pla		b41F0   PLA
.41f1	e0 00		cpx #$00	        CPX #$00
.41f3	f0 03		beq $41f8	        BEQ b41F8
.41f5	4c 50 31	jmp $3150	        JMP j3150
.41f8	85 fb		sta $fb		b41F8   STA aFB
.41fa	68		pla		        PLA
.41fb	18		clc		        CLC
.41fc	69 00		adc #$00	        ADC #$00
.41fe	85 0c		sta $0c		        STA r5L
.4200	a5 fb		lda $fb		        LDA aFB
.4202	69 6d		adc #$6d	        ADC #$6D
.4204	85 0d		sta $0d		        STA r5H
.4206	20 9d 58	jsr $589d	        JSR s589D
.4209	20 98 44	jsr $4498	        JSR s4498
.420c	a5 72		lda $72		        LDA a72
.420e	48		pha		        PHA
.420f	20 6d 3f	jsr $3f6d	        JSR j3F6D
.4212	68		pla		        PLA
.4213	20 8a 45	jsr $458a	        JSR s458A
.4216	20 22 42	jsr $4222	        JSR s4222
.4219	20 4c 3b	jsr $3b4c	        JSR s3B4C
.421c	20 ad 3b	jsr $3bad	        JSR j3BAD
.421f	a2 00		ldx #$00	        LDX #$00
.4221	60		rts		        RTS
.4222	20 7b 3a	jsr $3a7b	s4222   JSR b3A7B
.4225	20 9c 59	jsr $599c	        JSR s599C
.4228	20 6d 3a	jsr $3a6d	        JSR j3A6D
.422b	20 9c 59	jsr $599c	        JSR s599C
.422e	20 26 34	jsr $3426	        JSR s3426
.4231	4c 9c 59	jmp $599c	        JMP s599C
.4234	20 f7 34	jsr $34f7	j4234   JSR s34F7
.4237	ad 8d 84	lda $848d	        LDA numDrives
.423a	c9 01		cmp #$01	        CMP #$01
.423c	d0 07		bne $4245	        BNE b4245
.423e	a5 78		lda $78		        LDA a78
.4240	f0 03		beq $4245	        BEQ b4245
.4242	4c fb 55	jmp $55fb	        JMP j55FB
.4245	a9 00		lda #$00	b4245   LDA #$00
.4247	85 7d		sta $7d		        STA a7D
.4249	ad 89 84	lda $8489	        LDA curDrive
.424c	85 79		sta $79		        STA a79
.424e	a5 72		lda $72		        LDA a72
.4250	85 73		sta $73		        STA a73
.4252	a9 ff		lda #$ff	        LDA #$FF
.4254	20 a9 42	jsr $42a9	        JSR s42A9
.4257	8a		txa		        TXA
.4258	d0 46		bne $42a0	        BNE b42A0
.425a	a9 02		lda #$02	        LDA #>a0200
.425c	8d f9 03	sta $03f9	        STA a03F9
.425f	a9 00		lda #$00	        LDA #<a0200
.4261	8d f8 03	sta $03f8	        STA a03F8
.4264	a5 73		lda $73		        LDA a73
.4266	a2 06		ldx #$06	        LDX #$06
.4268	20 b4 46	jsr $46b4	        JSR s46B4
.426b	a5 07		lda $07		        LDA r2H
.426d	8d f7 03	sta $03f7	        STA a03F7
.4270	a5 06		lda $06		        LDA r2L
.4272	8d f6 03	sta $03f6	        STA a03F6
.4275	ad 89 84	lda $8489	        LDA curDrive
.4278	85 70		sta $70		        STA a70
.427a	ac 8d 84	ldy $848d	        LDY numDrives
.427d	c0 02		cpy #$02	        CPY #$02
.427f	90 02		bcc $4283	        BCC b4283
.4281	49 01		eor #$01	        EOR #$01
.4283	85 fe		sta $fe		b4283   STA aFE
.4285	a5 fb		lda $fb		        LDA aFB
.4287	85 fc		sta $fc		        STA aFC
.4289	a9 00		lda #$00	        LDA #$00
.428b	20 ab 19	jsr $19ab	        JSR s19AB    ;search for and copy a file
.428e	8a		txa		        TXA
.428f	d0 0f		bne $42a0	        BNE b42A0
.4291	a5 fc		lda $fc		        LDA aFC
.4293	85 fb		sta $fb		        STA aFB
.4295	c5 fd		cmp $fd		        CMP aFD
.4297	90 02		bcc $429b	        BCC b429B
.4299	85 fd		sta $fd		        STA aFD
.429b	a5 73		lda $73		b429B   LDA a73
.429d	20 8a 45	jsr $458a	        JSR s458A
.42a0	20 6d 3f	jsr $3f6d	b42A0   JSR j3F6D
.42a3	20 dc 23	jsr $23dc	        JSR s23DC
.42a6	4c 53 31	jmp $3153	        JMP j3153
.42a9	8d 4a 02	sta $024a	s42A9   STA a024A
.42ac	a5 76		lda $76		        LDA a76
.42ae	18		clc		        CLC
.42af	69 03		adc #$03	        ADC #$03
.42b1	85 02		sta $02		        STA r0L
.42b3	a5 77		lda $77		        LDA a77
.42b5	69 00		adc #$00	        ADC #$00
.42b7	85 03		sta $03		        STA r0H
.42b9	a9 8b		lda #$8b	        LDA #>p8BD0
.42bb	85 05		sta $05		        STA r1H
.42bd	a9 d0		lda #$d0	        LDA #<p8BD0
.42bf	85 04		sta $04		        STA r1L
.42c1	a2 02		ldx #$02	        LDX #$02
.42c3	a0 04		ldy #$04	        LDY #$04
.42c5	20 16 24	jsr $2416	        JSR s2416
.42c8	20 62 25	jsr $2562	        JSR s2562    ;load r6 with $8be4
.42cb	a2 02		ldx #$02	        LDX #$02
.42cd	a0 0e		ldy #$0e	        LDY #$0E
.42cf	20 16 24	jsr $2416	        JSR s2416
.42d2	20 0b c2	jsr $c20b	        JSR FindFile
.42d5	e0 05		cpx #$05	        CPX #$05
.42d7	f0 74		beq $434d	        BEQ b434D
.42d9	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.42dc	20 47 c2	jsr $c247	        JSR GetDirHead
.42df	ad bd 82	lda $82bd	        LDA a82BD
.42e2	f0 03		beq $42e7	        BEQ b42E7
.42e4	4c da 50	jmp $50da	        JMP j50DA
.42e7	ad 4a 02	lda $024a	b42E7   LDA a024A
.42ea	f0 2d		beq $4319	        BEQ b4319
.42ec	a9 84		lda #$84	        LDA #>dirEntryBuf
.42ee	85 0f		sta $0f		        STA r6H
.42f0	a9 00		lda #$00	        LDA #<dirEntryBuf
.42f2	85 0e		sta $0e		        STA r6L
.42f4	20 bc 45	jsr $45bc	        JSR s45BC
.42f7	8a		txa		        TXA
.42f8	f0 07		beq $4301	        BEQ b4301
.42fa	a9 00		lda #$00	        LDA #$00
.42fc	8d 4a 02	sta $024a	        STA a024A
.42ff	f0 18		beq $4319	        BEQ b4319
.4301	20 64 43	jsr $4364	b4301   JSR s4364
.4304	e0 ff		cpx #$ff	        CPX #$FF
.4306	f0 0e		beq $4316	        BEQ b4316
.4308	20 f8 59	jsr $59f8	        JSR s59F8    ;load $84be to r5
.430b	a2 43		ldx #$43	        LDX #$43
.430d	a9 b7		lda #$b7	        LDA #$B7
.430f	20 83 24	jsr $2483	        JSR s2483    ;COMMON DIALOG BOX ROUTINE ============================
.4312	a2 0c		ldx #$0c	        LDX #$0C
.4314	d0 4d		bne $4363	        BNE b4363
.4316	8d 4a 02	sta $024a	b4316   STA a024A
.4319	20 f8 59	jsr $59f8	b4319   JSR s59F8    ;load $84be to r5
.431c	a2 43		ldx #$43	        LDX #$43
.431e	a9 9c		lda #$9c	        LDA #$9C
.4320	20 83 24	jsr $2483	        JSR s2483    ;COMMON DIALOG BOX ROUTINE ============================
.4323	a5 02		lda $02		        LDA r0L
.4325	a2 0c		ldx #$0c	        LDX #$0C
.4327	c9 04		cmp #$04	        CMP #$04
.4329	f0 38		beq $4363	        BEQ b4363
.432b	20 47 c2	jsr $c247	        JSR GetDirHead ;     read directory header and BAM from disk
.432e	8a		txa		        TXA
.432f	d0 32		bne $4363	        BNE b4363
.4331	a9 8b		lda #$8b	        LDA #>p8BE4
.4333	85 03		sta $03		        STA r0H      ;hi byte of filename to delete
.4335	a9 e4		lda #$e4	        LDA #<p8BE4
.4337	85 02		sta $02		        STA r0L      ;lo byte of filename to delete
.4339	20 38 c2	jsr $c238	        JSR DeleteFile
.433c	8a		txa		        TXA
.433d	d0 24		bne $4363	        BNE b4363
.433f	ad 4a 02	lda $024a	        LDA a024A
.4342	f0 03		beq $4347	        BEQ b4347
.4344	20 8a 45	jsr $458a	        JSR s458A
.4347	20 4a c2	jsr $c24a	b4347   JSR PutDirHead ;     write directory header and BAM to disk
.434a	8a		txa		        TXA
.434b	d0 16		bne $4363	        BNE b4363
.434d	a9 8b		lda #$8b	b434D   LDA #>p8BD0
.434f	8d fb 03	sta $03fb	        STA a03FB
.4352	a9 d0		lda #$d0	        LDA #<p8BD0
.4354	8d fa 03	sta $03fa	        STA a03FA
.4357	a9 8b		lda #$8b	        LDA #>p8BE4
.4359	8d fd 03	sta $03fd	        STA a03FD
.435c	a9 e4		lda #$e4	        LDA #<p8BE4
.435e	8d fc 03	sta $03fc	        STA a03FC
.4361	a2 00		ldx #$00	        LDX #$00
.4363	60		rts		b4363   RTS
.4364	a9 08		lda #$08	s4364   LDA #$08
.4366	85 16		sta $16		        STA r10L
.4368	a5 11		lda $11		        LDA r7H
.436a	85 19		sta $19		        STA r11H
.436c	a5 10		lda $10		        LDA r7L
.436e	85 18		sta $18		        STA r11L
.4370	a5 16		lda $16		        LDA r10L
.4372	20 3a 48	jsr $483a	        JSR s483A
.4375	f0 1c		beq $4393	        BEQ b4393
.4377	a5 16		lda $16		        LDA r10L
.4379	20 96 46	jsr $4696	        JSR s4696
.437c	f0 15		beq $4393	        BEQ b4393
.437e	a2 04		ldx #$04	        LDX #$04
.4380	20 f0 45	jsr $45f0	        JSR s45F0
.4383	a2 04		ldx #$04	        LDX #$04
.4385	a0 18		ldy #$18	        LDY #$18
.4387	a9 1e		lda #$1e	        LDA #$1E
.4389	20 6e c2	jsr $c26e	        JSR CmpFString
.438c	d0 05		bne $4393	        BNE b4393    ;this code appears to break, unless self modifying
.438e	a5 16		lda $16		        LDA r10L
.4390	4c d5 3f	jmp $3fd5	        JMP s3FD5
>4393	e6 16 a5 16 c9 10 d0 d5		b4393   .BYTE $E6,$16,$A5,$16,$C9,$10,$D0,$D5
>439b	00 81 0b 10 10 bb 2d 0c		        .BYTE $00,$81,$0B,$10,$10,$BB,$2D,$0C
>43a3	1f 10 0c 0b			        .BYTE $1F,$10,$0C,$0B
>43a7	10 20 9a 2d 0b 10		        .BYTE $10,$20,$9A,$2D,$0B,$10
>43ad	30 aa 2d 03 01 48 04 11		        .BYTE $30,$AA,$2D,$03,$01,$48,$04,$11
>43b5	48 00 81 0b 10 10 be 2d		        .BYTE $48,$00,$81,$0B,$10,$10,$BE,$2D
>43bd	0c 42 10 0c 0b			        .BYTE $0C,$42,$10,$0C,$0B
>43c2	10 20 7e 2d 0b 10 30 a0		        .BYTE $10,$20,$7E,$2D,$0B,$10,$30,$A0
>43ca	2d 01 11 48 00			        .BYTE $2D,$01,$11,$48,$00
.43cf	20 c9 59	jsr $59c9	s43CF   JSR s59C9    ;load $0334 to r1
.43d2	a0 00		ldy #$00	        LDY #$00
.43d4	a9 08		lda #$08	        LDA #$08
.43d6	85 75		sta $75		        STA a75
.43d8	b1 04		lda ($04),y	b43D8   LDA (r1L),Y
.43da	f0 26		beq $4402	        BEQ b4402
.43dc	e6 75		inc $75		        INC a75
.43de	20 0c 44	jsr $440c	        JSR s440C
.43e1	90 f5		bcc $43d8	        BCC b43D8
.43e3	a2 02		ldx #$02	        LDX #$02
.43e5	20 4f 38	jsr $384f	        JSR s384F
.43e8	20 c9 59	jsr $59c9	        JSR s59C9    ;load $0334 to r1
.43eb	a9 08		lda #$08	        LDA #$08
.43ed	85 75		sta $75		        STA a75
.43ef	a2 02		ldx #$02	b43EF   LDX #$02     ;zero page address of pointer to source string
.43f1	a0 04		ldy #$04	        LDY #$04     ;zero page address of pointer to dest buffer
.43f3	a9 12		lda #$12	        LDA #$12     ;length of strings to compare (18 bytes)
.43f5	20 6e c2	jsr $c26e	        JSR CmpFString
.43f8	d0 08		bne $4402	        BNE b4402
.43fa	e6 75		inc $75		        INC a75
.43fc	20 0c 44	jsr $440c	        JSR s440C
.43ff	90 ee		bcc $43ef	        BCC b43EF
.4401	00		brk #		        BRK
.4402	a5 75		lda $75		b4402   LDA a75
.4404	a2 0c		ldx #$0c	        LDX #$0C
.4406	20 f0 45	jsr $45f0	        JSR s45F0
.4409	a2 00		ldx #$00	        LDX #$00
.440b	60		rts		        RTS
.440c	a5 04		lda $04		s440C   LDA r1L
.440e	18		clc		        CLC
.440f	69 12		adc #$12	        ADC #$12
.4411	85 04		sta $04		        STA r1L
.4413	aa		tax		        TAX
.4414	90 02		bcc $4418	        BCC b4418
.4416	e6 05		inc $05		        INC r1H
.4418	c9 03		cmp #$03	b4418   CMP #$03
.441a	90 08		bcc $4424	        BCC b4424
.441c	e0 b2		cpx #$b2	        CPX #$B2
.441e	90 04		bcc $4424	        BCC b4424
.4420	f0 02		beq $4424	        BEQ b4424
.4422	38		sec		        SEC
.4423	60		rts		        RTS
.4424	18		clc		b4424   CLC
.4425	60		rts		        RTS
.4426	a0 02		ldy #$02	s4426   LDY #$02
.4428	a9 7f		lda #$7f	        LDA #>f7F00
.442a	85 0d		sta $0d		        STA r5H
.442c	a9 00		lda #$00	        LDA #<f7F00
.442e	85 0c		sta $0c		        STA r5L
.4430	b1 0c		lda ($0c),y	b4430   LDA (r5L),Y
.4432	f0 09		beq $443d	        BEQ b443D
.4434	98		tya		        TYA
.4435	18		clc		        CLC
.4436	69 20		adc #$20	        ADC #$20
.4438	a8		tay		        TAY
.4439	90 f5		bcc $4430	        BCC b4430
.443b	b0 0b		bcs $4448	        BCS b4448
.443d	98		tya		b443D   TYA
.443e	18		clc		        CLC
.443f	65 0c		adc $0c		        ADC r5L
.4441	85 0c		sta $0c		        STA r5L
.4443	90 02		bcc $4447	        BCC b4447
.4445	e6 0d		inc $0d		        INC r5H
.4447	18		clc		b4447   CLC
.4448	60		rts		b4448   RTS
.4449	a0 00		ldy #$00	s4449   LDY #$00
.444b	b1 1e		lda ($1e),y	        LDA (r14L),Y
.444d	f0 46		beq $4495	        BEQ b4495
.444f	20 cf 43	jsr $43cf	        JSR s43CF    ;
.4452	a2 1e		ldx #$1e	        LDX #$1E     ;zero page address of pointer to source string
.4454	a0 0c		ldy #$0c	        LDY #$0C     ;zero page address of pointer to dest buffer
.4456	a9 1e		lda #$1e	        LDA #$1E     ;length of string to copy (30 bytes)
.4458	20 68 c2	jsr $c268	        JSR CopyFString
.445b	a2 02		ldx #$02	        LDX #$02
.445d	20 4f 38	jsr $384f	        JSR s384F
.4460	a2 02		ldx #$02	        LDX #$02     ;zero page address of pointer to source string
.4462	a0 04		ldy #$04	        LDY #$04     ;zero page address of pointer to dest buffer
.4464	a9 12		lda #$12	        LDA #$12     ;length of string to copy (18 bytes)
.4466	20 68 c2	jsr $c268	        JSR CopyFString
.4469	a0 16		ldy #$16	        LDY #$16
.446b	b1 1e		lda ($1e),y	        LDA (r14L),Y
.446d	f0 21		beq $4490	        BEQ b4490
.446f	a0 13		ldy #$13	        LDY #$13
.4471	b1 1e		lda ($1e),y	        LDA (r14L),Y
.4473	85 04		sta $04		        STA r1L
.4475	c8		iny		        INY
.4476	b1 1e		lda ($1e),y	        LDA (r14L),Y
.4478	85 05		sta $05		        STA r1H
.447a	20 e3 1d	jsr $1de3	        JSR s1DE3
.447d	8a		txa		        TXA
.447e	d0 17		bne $4497	        BNE b4497
.4480	a5 75		lda $75		        LDA a75
.4482	a2 0c		ldx #$0c	        LDX #$0C
.4484	20 4d 46	jsr $464d	        JSR s464D
.4487	a2 0a		ldx #$0a	        LDX #$0A     ;zero page address of pointer to source string
.4489	a0 0c		ldy #$0c	        LDY #$0C     ;zero page address of pointer to dest buffer
.448b	a9 44		lda #$44	        LDA #$44     ;length of string to copy (68 bytes)
.448d	20 68 c2	jsr $c268	        JSR CopyFString
.4490	a5 75		lda $75		b4490   LDA a75
.4492	20 c4 44	jsr $44c4	        JSR s44C4
.4495	a2 00		ldx #$00	b4495   LDX #$00
.4497	60		rts		b4497   RTS
.4498	a9 00		lda #$00	s4498   LDA #$00
.449a	f0 06		beq $44a2	        BEQ b44A2
.449c	a9 80		lda #$80	s449C   LDA #$80
.449e	d0 02		bne $44a2	        BNE b44A2
.44a0	a9 40		lda #$40	        LDA #$40
.44a2	85 06		sta $06		b44A2   STA r2L
.44a4	a0 00		ldy #$00	        LDY #$00
.44a6	b1 0a		lda ($0a),y	b44A6   LDA (r4L),Y
.44a8	aa		tax		        TAX
.44a9	b1 0c		lda ($0c),y	        LDA (r5L),Y
.44ab	24 06		bit $06		        BIT r2L
.44ad	10 06		bpl $44b5	        BPL b44B5
.44af	a9 00		lda #$00	        LDA #$00
.44b1	91 0a		sta ($0a),y	        STA (r4L),Y
.44b3	f0 06		beq $44bb	        BEQ b44BB
.44b5	24 06		bit $06		b44B5   BIT r2L
.44b7	50 02		bvc $44bb	        BVC b44BB
.44b9	91 0a		sta ($0a),y	        STA (r4L),Y
.44bb	8a		txa		b44BB   TXA
.44bc	91 0c		sta ($0c),y	        STA (r5L),Y
.44be	c8		iny		        INY
.44bf	c0 1e		cpy #$1e	        CPY #$1E
.44c1	d0 e3		bne $44a6	        BNE b44A6
.44c3	60		rts		        RTS
.44c4	48		pha		s44C4   PHA
.44c5	a2 0a		ldx #$0a	        LDX #$0A
.44c7	20 4d 46	jsr $464d	        JSR s464D
.44ca	a2 06		ldx #$06	        LDX #$06
.44cc	20 8d 49	jsr $498d	        JSR s498D
.44cf	a2 08		ldx #$08	        LDX #$08
.44d1	20 f0 45	jsr $45f0	        JSR s45F0
.44d4	a0 00		ldy #$00	        LDY #$00
.44d6	98		tya		        TYA
.44d7	91 06		sta ($06),y	        STA (r2L),Y
.44d9	c8		iny		        INY
.44da	91 06		sta ($06),y	        STA (r2L),Y
.44dc	a0 00		ldy #$00	        LDY #$00
.44de	b1 08		lda ($08),y	        LDA (r3L),Y
.44e0	f0 26		beq $4508	        BEQ b4508
.44e2	a0 16		ldy #$16	        LDY #$16
.44e4	b1 08		lda ($08),y	        LDA (r3L),Y
.44e6	d0 08		bne $44f0	        BNE b44F0
.44e8	68		pla		        PLA
.44e9	48		pha		        PHA
.44ea	20 9e 49	jsr $499e	        JSR s499E
.44ed	b8		clv		        CLV
.44ee	50 03		bvc $44f3	        BVC b44F3
.44f0	20 0a 45	jsr $450a	b44F0   JSR s450A
.44f3	a5 08		lda $08		b44F3   LDA r3L
.44f5	18		clc		        CLC
.44f6	69 03		adc #$03	        ADC #$03
.44f8	85 02		sta $02		        STA r0L
.44fa	a5 09		lda $09		        LDA r3H
.44fc	69 00		adc #$00	        ADC #$00
.44fe	85 03		sta $03		        STA r0H
.4500	68		pla		        PLA
.4501	48		pha		        PHA
.4502	20 d3 47	jsr $47d3	        JSR s47D3    ;push A, shift A left (x2), LDA r0, STA as index into $03C4, pull A
.4505	20 2f 45	jsr $452f	        JSR s452F
.4508	68		pla		b4508   PLA
.4509	60		rts		        RTS
.450a	a0 00		ldy #$00	s450A   LDY #$00
.450c	a5 0a		lda $0a		        LDA r4L
.450e	18		clc		        CLC
.450f	69 04		adc #$04	        ADC #$04
.4511	91 06		sta ($06),y	        STA (r2L),Y
.4513	98		tya		        TYA
.4514	65 0b		adc $0b		        ADC r4H
.4516	c8		iny		        INY
.4517	91 06		sta ($06),y	        STA (r2L),Y
.4519	a9 03		lda #$03	        LDA #$03
.451b	a0 04		ldy #$04	        LDY #$04
.451d	91 06		sta ($06),y	        STA (r2L),Y
.451f	a9 15		lda #$15	        LDA #$15
.4521	c8		iny		        INY
.4522	91 06		sta ($06),y	        STA (r2L),Y
.4524	c8		iny		        INY
.4525	a9 b7		lda #$b7	        LDA #$B7
.4527	91 06		sta ($06),y	        STA (r2L),Y
.4529	c8		iny		        INY
.452a	a9 3e		lda #$3e	        LDA #$3E
.452c	91 06		sta ($06),y	        STA (r2L),Y
.452e	60		rts		        RTS
.452f	48		pha		s452F   PHA
.4530	a2 0c		ldx #$0c	        LDX #$0C
.4532	20 8d 49	jsr $498d	        JSR s498D
.4535	a0 02		ldy #$02	        LDY #$02
.4537	c9 08		cmp #$08	        CMP #$08
.4539	b0 0e		bcs $4549	        BCS b4549
.453b	aa		tax		        TAX
.453c	bd 5a 45	lda $455a,x	        LDA f455A,X
.453f	91 0c		sta ($0c),y	        STA (r5L),Y
.4541	c8		iny		        INY
.4542	bd 62 45	lda $4562,x	        LDA f4562,X
.4545	91 0c		sta ($0c),y	        STA (r5L),Y
.4547	d0 0f		bne $4558	        BNE b4558
.4549	38		sec		b4549   SEC
.454a	e9 08		sbc #$08	        SBC #$08
.454c	aa		tax		        TAX
.454d	bd 6a 45	lda $456a,x	        LDA f456A,X
.4550	91 0c		sta ($0c),y	        STA (r5L),Y
.4552	c8		iny		        INY
.4553	bd 72 45	lda $4572,x	        LDA f4572,X
.4556	91 0c		sta ($0c),y	        STA (r5L),Y
.4558	68		pla		b4558   PLA
.4559	60		rts		        RTS
>455a	05 0c 13 1a 05 0c 13 1a		f455A   .BYTE $05,$0C,$13,$1A,$05,$0C,$13,$1A
>4562	30 30 30 30 58 58 58 58		f4562   .BYTE $30,$30,$30,$30,$58,$58,$58,$58
>456a	0b 11 17 1d 08 0e 14 1a		f456A   .BYTE $0B,$11,$17,$1D,$08,$0E,$14,$1A
>4572	98 98 98 98 a4 a4 a4 a4		f4572   .BYTE $98,$98,$98,$98,$A4,$A4,$A4,$A4
>457a	8c 8c 8d 8d 8d 8d 8d 8d		f457A   .BYTE $8C,$8C,$8D,$8D,$8D,$8D,$8D,$8D
>4582	f5 fc 03 0a bd c4 cb d2		f4582   .BYTE $F5,$FC,$03,$0A,$BD,$C4,$CB,$D2
.458a	48		pha		s458A   PHA
.458b	20 04 48	jsr $4804	        JSR s4804
.458e	a2 0e		ldx #$0e	        LDX #$0E
.4590	20 f0 45	jsr $45f0	        JSR s45F0
.4593	c9 08		cmp #$08	        CMP #$08
.4595	b0 07		bcs $459e	        BCS b459E
.4597	a2 0e		ldx #$0e	        LDX #$0E
.4599	20 e7 45	jsr $45e7	        JSR s45E7
.459c	68		pla		        PLA
.459d	60		rts		        RTS
.459e	20 96 46	jsr $4696	b459E   JSR s4696
.45a1	f0 08		beq $45ab	        BEQ b45AB
.45a3	20 bc 45	jsr $45bc	        JSR s45BC
.45a6	a2 10		ldx #$10	        LDX #$10
.45a8	20 e7 45	jsr $45e7	        JSR s45E7
.45ab	a2 0e		ldx #$0e	b45AB   LDX #$0E
.45ad	20 e7 45	jsr $45e7	        JSR s45E7
.45b0	a0 00		ldy #$00	        LDY #$00
.45b2	98		tya		        TYA
.45b3	91 02		sta ($02),y	b45B3   STA (r0L),Y
.45b5	c8		iny		        INY
.45b6	c0 12		cpy #$12	        CPY #$12
.45b8	d0 f9		bne $45b3	        BNE b45B3
.45ba	68		pla		        PLA
.45bb	60		rts		        RTS
.45bc	a9 7f		lda #$7f	s45BC   LDA #>p7F02
.45be	85 11		sta $11		        STA r7H
.45c0	a9 02		lda #$02	        LDA #<p7F02
.45c2	85 10		sta $10		        STA r7L
.45c4	a2 0e		ldx #$0e	b45C4   LDX #$0E     ;zp address of pointer to source string
.45c6	a0 10		ldy #$10	        LDY #$10     ;zp address of pointer to dest string
.45c8	a9 1e		lda #$1e	        LDA #$1E     ;length of strings to compare
.45ca	20 6e c2	jsr $c26e	        JSR CmpFString
.45cd	f0 15		beq $45e4	        BEQ b45E4    ;if strings match, jump ahead to exit (X=0)
.45cf	18		clc		        CLC
.45d0	a9 20		lda #$20	        LDA #$20
.45d2	65 10		adc $10		        ADC r7L
.45d4	85 10		sta $10		        STA r7L
.45d6	90 02		bcc $45da	        BCC b45DA
.45d8	e6 11		inc $11		        INC r7H
.45da	a5 11		lda $11		b45DA   LDA r7H
.45dc	c9 7f		cmp #$7f	        CMP #$7F
.45de	f0 e4		beq $45c4	        BEQ b45C4
.45e0	a2 05		ldx #$05	        LDX #$05
.45e2	d0 02		bne $45e6	        BNE b45E6
.45e4	a2 00		ldx #$00	b45E4   LDX #$00
.45e6	60		rts		b45E6   RTS
.45e7	8e ee 45	stx $45ee	s45E7   STX a45EE
.45ea	a0 00		ldy #$00	        LDY #$00
.45ec	98		tya		        TYA
=17902					a45EE   =*+$01
.45ed	91 02		sta ($02),y	        STA (r0L),Y
.45ef	60		rts		        RTS
.45f0	48		pha		s45F0   PHA
.45f1	c9 08		cmp #$08	        CMP #$08
.45f3	b0 08		bcs $45fd	        BCS b45FD
.45f5	48		pha		        PHA
.45f6	20 e1 46	jsr $46e1	        JSR s46E1
.45f9	68		pla		        PLA
.45fa	b8		clv		        CLV
.45fb	50 0d		bvc $460a	        BVC b460A
.45fd	38		sec		b45FD   SEC
.45fe	e9 08		sbc #$08	        SBC #$08
.4600	48		pha		        PHA
.4601	a9 26		lda #$26	        LDA #$26
.4603	95 00		sta $00,x	        STA f00,X
.4605	a9 05		lda #$05	        LDA #$05
.4607	95 01		sta $01,x	        STA f01,X
.4609	68		pla		        PLA
.460a	0a		asl a		b460A   ASL
.460b	0a		asl a		        ASL
.460c	0a		asl a		        ASL
.460d	0a		asl a		        ASL
.460e	0a		asl a		        ASL
.460f	18		clc		        CLC
.4610	75 00		adc $00,x	        ADC f00,X
.4612	95 00		sta $00,x	        STA f00,X
.4614	90 02		bcc $4618	        BCC b4618
.4616	f6 01		inc $01,x	        INC f01,X
.4618	68		pla		b4618   PLA
.4619	60		rts		        RTS
.461a	a9 01		lda #$01	s461A   LDA #>p010E
.461c	85 38		sta $38		        STA rightMarginHi
.461e	a9 0e		lda #$0e	        LDA #<p010E
.4620	85 37		sta $37		        STA rightMarginLo
.4622	a9 08		lda #$08	        LDA #$08
.4624	85 1c		sta $1c		        STA r13L
.4626	a9 08		lda #$08	        LDA #$08
.4628	20 d0 49	jsr $49d0	        JSR s49D0
.462b	a9 10		lda #$10	        LDA #$10
.462d	20 cc 49	jsr $49cc	        JSR s49CC    ;draw a pad file icon and filename
.4630	a9 01		lda #$01	        LDA #>p013F
.4632	85 38		sta $38		        STA rightMarginHi
.4634	a9 3f		lda #$3f	        LDA #<p013F
.4636	85 37		sta $37		        STA rightMarginLo
.4638	60		rts		        RTS
.4639	20 4a 24	jsr $244a	s4639   JSR s244A
.463c	20 9f c1	jsr $c19f	        JSR i_Rectangle ;Erase border contents
>463f	90 c7 3e 00			        .BYTE $90,$C7,$3E,$00 ;y1=144, y2=199, x1=62, x2=270
>4643	0e 01				        .BYTE $0E,$01
.4645	20 b2 58	jsr $58b2	s4645   JSR s58B2
.4648	a9 11		lda #$11	        LDA #$11
.464a	4c 52 47	jmp $4752	        JMP j4752    ;after disk icons loaded
.464d	48		pha		s464D   PHA
.464e	8a		txa		        TXA
.464f	a8		tay		        TAY
.4650	c8		iny		        INY
.4651	c8		iny		        INY
.4652	68		pla		        PLA
.4653	48		pha		        PHA
.4654	c9 08		cmp #$08	        CMP #$08
.4656	90 03		bcc $465b	        BCC b465B
.4658	38		sec		        SEC
.4659	e9 08		sbc #$08	        SBC #$08
.465b	95 00		sta $00,x	b465B   STA f00,X
.465d	a9 44		lda #$44	        LDA #$44
.465f	99 00 00	sta $0000,y	        STA f0000,Y
.4662	20 60 c1	jsr $c160	        JSR BBMult
.4665	68		pla		        PLA
.4666	48		pha		        PHA
.4667	c9 08		cmp #$08	        CMP #$08
.4669	b0 10		bcs $467b	        BCS b467B
.466b	a9 46		lda #$46	        LDA #$46
.466d	18		clc		        CLC
.466e	75 00		adc $00,x	        ADC f00,X
.4670	95 00		sta $00,x	        STA f00,X
.4672	a9 08		lda #$08	        LDA #$08
.4674	75 01		adc $01,x	        ADC f01,X
.4676	95 01		sta $01,x	        STA f01,X
.4678	b8		clv		        CLV
.4679	50 0d		bvc $4688	        BVC b4688
.467b	a9 26		lda #$26	b467B   LDA #$26
.467d	18		clc		        CLC
.467e	75 00		adc $00,x	        ADC f00,X
.4680	95 00		sta $00,x	        STA f00,X
.4682	a9 06		lda #$06	        LDA #$06
.4684	75 01		adc $01,x	        ADC f01,X
.4686	95 01		sta $01,x	        STA f01,X
.4688	68		pla		b4688   PLA
.4689	60		rts		        RTS
.468a	a5 77		lda $77		s468A   LDA a77
.468c	c9 6d		cmp #$6d	        CMP #$6D
.468e	90 04		bcc $4694	        BCC b4694
.4690	c9 7f		cmp #$7f	        CMP #$7F
.4692	90 1d		bcc $46b1	        BCC b46B1
.4694	a5 72		lda $72		b4694   LDA a72
.4696	48		pha		s4696   PHA
.4697	a2 02		ldx #$02	        LDX #$02
.4699	20 b4 46	jsr $46b4	        JSR s46B4
.469c	a2 04		ldx #$04	        LDX #$04
.469e	20 4f 38	jsr $384f	        JSR s384F
.46a1	a2 02		ldx #$02	        LDX #$02
.46a3	a0 04		ldy #$04	        LDY #$04
.46a5	a9 12		lda #$12	        LDA #$12
.46a7	20 6e c2	jsr $c26e	        JSR CmpFString
.46aa	f0 04		beq $46b0	        BEQ b46B0
.46ac	68		pla		        PLA
.46ad	a2 00		ldx #$00	        LDX #$00
.46af	60		rts		        RTS
.46b0	68		pla		b46B0   PLA
.46b1	a2 ff		ldx #$ff	b46B1   LDX #$FF
.46b3	60		rts		        RTS
.46b4	48		pha		s46B4   PHA
.46b5	c9 08		cmp #$08	        CMP #$08
.46b7	b0 05		bcs $46be	        BCS b46BE
.46b9	20 4f 38	jsr $384f	        JSR s384F
.46bc	68		pla		        PLA
.46bd	60		rts		        RTS
.46be	38		sec		b46BE   SEC
.46bf	e9 08		sbc #$08	        SBC #$08
.46c1	85 1e		sta $1e		        STA r14L
.46c3	a9 12		lda #$12	        LDA #$12
.46c5	85 20		sta $20		        STA r15L
.46c7	8a		txa		        TXA
.46c8	48		pha		        PHA
.46c9	a0 1e		ldy #$1e	        LDY #$1E
.46cb	a2 20		ldx #$20	        LDX #$20
.46cd	20 60 c1	jsr $c160	        JSR BBMult
.46d0	68		pla		        PLA
.46d1	aa		tax		        TAX
.46d2	a9 34		lda #$34	        LDA #$34
.46d4	18		clc		        CLC
.46d5	65 20		adc $20		        ADC r15L
.46d7	95 00		sta $00,x	        STA f00,X
.46d9	a9 03		lda #$03	        LDA #$03
.46db	69 00		adc #$00	        ADC #$00
.46dd	95 01		sta $01,x	        STA f01,X
.46df	68		pla		        PLA
.46e0	60		rts		        RTS
.46e1	a9 02		lda #$02	s46E1   LDA #$02
.46e3	95 00		sta $00,x	        STA f00,X
.46e5	a9 6d		lda #$6d	        LDA #$6D
.46e7	18		clc		        CLC
.46e8	65 fb		adc $fb		        ADC aFB
.46ea	95 01		sta $01,x	        STA f01,X
.46ec	60		rts		        RTS
.46ed	a5 77		lda $77		s46ED   LDA a77
.46ef	85 15		sta $15		        STA r9H
.46f1	a5 76		lda $76		        LDA a76
.46f3	85 14		sta $14		        STA r9L
.46f5	a0 16		ldy #$16	        LDY #$16
.46f7	b1 14		lda ($14),y	        LDA (r9L),Y
.46f9	60		rts		        RTS
.46fa	a2 bc		ldx #$bc	s46FA   LDX #$BC
.46fc	a9 00		lda #$00	        LDA #$00
.46fe	9d 23 04	sta $0423,x	b46FE   STA f0423,X  ;loop to clear main icon table data
.4701	ca		dex		        DEX          ;counting backwards from $bc to $0 (1059-1247)
.4702	d0 fa		bne $46fe	        BNE b46FE
.4704	a2 2e		ldx #$2e	        LDX #$2E
.4706	a9 00		lda #$00	        LDA #$00
.4708	9d c3 03	sta $03c3,x	b4708   STA f03C3,X  ;loop to clear $03c3-$03f1
.470b	ca		dex		        DEX
.470c	d0 fa		bne $4708	        BNE b4708    ;repeat loop
.470e	a9 17		lda #$17	        LDA #$17
.4710	8d 24 04	sta $0424	        STA a0424
.4713	20 31 47	jsr $4731	        JSR s4731
.4716	a9 04		lda #$04	        LDA #>a0424  ;still trying to find out how these icons get here.  doesnt seem to be from desktop code. dummy icon tbl?
.4718	85 03		sta $03		        STA r0H      ;hi byte of icon table
.471a	a9 24		lda #$24	        LDA #<a0424
.471c	85 02		sta $02		        STA r0L      ;lo byte of icon table
.471e	20 5a c1	jsr $c15a	        JSR DoIcons
.4721	20 b2 58	jsr $58b2	        JSR s58B2
.4724	a9 00		lda #$00	        LDA #$00
.4726	20 52 47	jsr $4752	b4726   JSR j4752    ;after disk icons loaded
.4729	18		clc		        CLC
.472a	69 01		adc #$01	        ADC #$01
.472c	c9 17		cmp #$17	        CMP #$17
.472e	90 f6		bcc $4726	        BCC b4726
.4730	60		rts		        RTS
.4731	a9 47		lda #$47	s4731   LDA #>p4742
.4733	85 03		sta $03		        STA r0H
.4735	a9 42		lda #$42	        LDA #<p4742
.4737	85 02		sta $02		        STA r0L
.4739	a9 02		lda #$02	        LDA #$02
.473b	85 1c		sta $1c		        STA r13L
.473d	a9 10		lda #$10	        LDA #$10
.473f	4c aa 49	jmp $49aa	        JMP j49AA
>4742	08 28 23 99 03 15 76 54		p4742   .BYTE $08,$28,$23,$99,$03,$15,$76,$54
>474a	4b 28 03 9c 03 11 67 54		        .BYTE $4B,$28,$03,$9C,$03,$11,$67,$54
.4752	a8		tay		j4752   TAY
.4753	a5 36		lda $36		        LDA leftMarginHi
.4755	48		pha		        PHA
.4756	a5 35		lda $35		        LDA leftMarginLo
.4758	48		pha		        PHA
.4759	a5 38		lda $38		        LDA rightMarginHi
.475b	48		pha		        PHA
.475c	a5 37		lda $37		        LDA rightMarginLo
.475e	48		pha		        PHA
.475f	c0 10		cpy #$10	        CPY #$10
.4761	b0 10		bcs $4773	        BCS b4773
.4763	a9 00		lda #$00	        LDA #>r3H
.4765	85 36		sta $36		        STA leftMarginHi
.4767	a9 09		lda #$09	        LDA #<r3H
.4769	85 35		sta $35		        STA leftMarginLo
.476b	a9 01		lda #$01	        LDA #>p0105
.476d	85 38		sta $38		        STA rightMarginHi
.476f	a9 05		lda #$05	        LDA #<p0105
.4771	85 37		sta $37		        STA rightMarginLo
.4773	98		tya		b4773   TYA
.4774	48		pha		        PHA
.4775	20 7f 49	jsr $497f	        JSR s497F
.4778	05 02		ora $02		        ORA r0L
.477a	f0 2c		beq $47a8	        BEQ b47A8
.477c	20 93 57	jsr $5793	        JSR s5793    ;Write single icon filename on pad
.477f	68		pla		        PLA
.4780	48		pha		        PHA
.4781	20 32 49	jsr $4932	        JSR s4932    ;called many times during icons draw routine
.4784	18		clc		        CLC
.4785	65 08		adc $08		        ADC r3L
.4787	85 08		sta $08		        STA r3L
.4789	90 02		bcc $478d	        BCC b478D
.478b	e6 09		inc $09		        INC r3H
.478d	a5 09		lda $09		b478D   LDA r3H
.478f	85 19		sta $19		        STA r11H
.4791	a5 08		lda $08		        LDA r3L
.4793	85 18		sta $18		        STA r11L
.4795	18		clc		        CLC
.4796	a5 07		lda $07		        LDA r2H
.4798	69 08		adc #$08	        ADC #$08
.479a	85 05		sta $05		        STA r1H
.479c	20 b8 47	jsr $47b8	        JSR s47B8    ;change fonts
.479f	20 c0 59	jsr $59c0	        JSR s59C0    ;load $8b80 to r0
.47a2	20 d7 57	jsr $57d7	        JSR s57D7    ;Print file names on pad (saved to 8b80)
.47a5	20 4b c1	jsr $c14b	        JSR UseSystemFont
.47a8	68		pla		b47A8   PLA
.47a9	a8		tay		        TAY
.47aa	68		pla		        PLA
.47ab	85 37		sta $37		        STA rightMarginLo
.47ad	68		pla		        PLA
.47ae	85 38		sta $38		        STA rightMarginHi
.47b0	68		pla		        PLA
.47b1	85 35		sta $35		        STA leftMarginLo
.47b3	68		pla		        PLA
.47b4	85 36		sta $36		        STA leftMarginHi
.47b6	98		tya		        TYA
.47b7	60		rts		        RTS
.47b8	a9 29		lda #$29	s47B8   LDA #>p2998
.47ba	85 03		sta $03		        STA r0H      ;hi byte of new font
.47bc	a9 98		lda #$98	        LDA #<p2998
.47be	85 02		sta $02		        STA r0L      ;lo byte of new font
.47c0	4c cc c1	jmp $c1cc	        JMP LoadCharSet ;begin using a new font
.47c3	ad 89 84	lda $8489	s47C3   LDA curDrive
.47c6	29 03		and #$03	s47C6   AND #$03
.47c8	18		clc		        CLC
.47c9	69 14		adc #$14	        ADC #$14
.47cb	60		rts		        RTS
.47cc	38		sec		s47CC   SEC
.47cd	e9 14		sbc #$14	        SBC #$14
.47cf	18		clc		        CLC
.47d0	69 08		adc #$08	        ADC #$08
.47d2	60		rts		        RTS
.47d3	48		pha		s47D3   PHA
.47d4	0a		asl a		        ASL
.47d5	aa		tax		        TAX
.47d6	a5 02		lda $02		        LDA r0L
.47d8	9d c4 03	sta $03c4,x	        STA f03C4,X
.47db	e8		inx		        INX
.47dc	a5 03		lda $03		        LDA r0H
.47de	9d c4 03	sta $03c4,x	        STA f03C4,X
.47e1	68		pla		        PLA
.47e2	60		rts		        RTS
.47e3	48		pha		s47E3   PHA
.47e4	20 3a 48	jsr $483a	        JSR s483A
.47e7	f0 19		beq $4802	        BEQ b4802
.47e9	68		pla		        PLA
.47ea	20 46 48	jsr $4846	        JSR s4846    ;set pattern based on index in A and $4850
.47ed	48		pha		        PHA
.47ee	20 32 49	jsr $4932	        JSR s4932    ;called many times during icons draw routine
.47f1	20 24 c1	jsr $c124	        JSR Rectangle
.47f4	68		pla		        PLA
.47f5	48		pha		        PHA
.47f6	20 66 48	jsr $4866	        JSR s4866    ;clear / restore a rectangle (disk icons and pad) with pattern
.47f9	68		pla		        PLA
.47fa	48		pha		        PHA
.47fb	c9 08		cmp #$08	        CMP #$08
.47fd	b0 03		bcs $4802	        BCS b4802
.47ff	20 61 4a	jsr $4a61	        JSR s4A61
.4802	68		pla		b4802   PLA
.4803	60		rts		        RTS
.4804	a2 01		ldx #$01	s4804   LDX #$01
.4806	86 1a		stx $1a		        STX r12L
.4808	20 e3 47	jsr $47e3	s4808   JSR s47E3
.480b	a2 0c		ldx #$0c	        LDX #$0C
.480d	20 8d 49	jsr $498d	        JSR s498D
.4810	aa		tax		        TAX
.4811	a9 00		lda #$00	        LDA #$00
.4813	a8		tay		        TAY
.4814	91 0c		sta ($0c),y	        STA (r5L),Y
.4816	c8		iny		        INY
.4817	91 0c		sta ($0c),y	        STA (r5L),Y
.4819	e8		inx		        INX
.481a	8a		txa		        TXA
.481b	c6 1a		dec $1a		        DEC r12L
.481d	d0 e9		bne $4808	        BNE s4808
.481f	ca		dex		        DEX
.4820	8a		txa		        TXA
.4821	60		rts		        RTS
.4822	a5 72		lda $72		s4822   LDA a72
.4824	a8		tay		s4824   TAY
.4825	20 3a 48	jsr $483a	        JSR s483A
.4828	f0 0f		beq $4839	        BEQ b4839
.482a	98		tya		        TYA
.482b	48		pha		        PHA
.482c	20 32 49	jsr $4932	        JSR s4932               ; called many times during icons draw routine
.482f	20 2a c1	jsr $c12a	        JSR InvertRectangle     ; Inverts the pixels within a rectangular region.
.4832	68		pla		        PLA
.4833	20 83 48	jsr $4883	        JSR s4883
.4836	20 2a c1	jsr $c12a	        JSR InvertRectangle     ; Inverts the pixels within a rectangular region.
.4839	60		rts		b4839   RTS
.483a	0a		asl a		s483A   ASL
.483b	0a		asl a		        ASL
.483c	0a		asl a		        ASL
.483d	aa		tax		        TAX
.483e	bd 28 04	lda $0428,x	        LDA f0428,X
.4841	e8		inx		        INX
.4842	1d 28 04	ora $0428,x	        ORA f0428,X
.4845	60		rts		        RTS
.4846	48		pha		s4846   PHA
.4847	a8		tay		        TAY
.4848	b9 50 48	lda $4850,y	        LDA f4850,Y
.484b	20 39 c1	jsr $c139	        JSR SetPattern
.484e	68		pla		        PLA
.484f	60		rts		        RTS
>4850	00 00 00 00 00 00 00 00		f4850   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>4858	02 02 02 02 02 02 02 02		        .BYTE $02,$02,$02,$02,$02,$02,$02,$02
>4860	02 02 00 09 02 02		        .BYTE $02,$02,$00,$09,$02,$02
.4866	20 46 48	jsr $4846	s4866   JSR s4846    ;set pattern based on index in A and $4850
.4869	48		pha		        PHA
.486a	20 79 48	jsr $4879	        JSR s4879
.486d	f0 08		beq $4877	        BEQ b4877
.486f	68		pla		        PLA
.4870	48		pha		        PHA
.4871	20 83 48	jsr $4883	        JSR s4883
.4874	20 24 c1	jsr $c124	        JSR Rectangle
.4877	68		pla		b4877   PLA
.4878	60		rts		        RTS
.4879	0a		asl a		s4879   ASL
.487a	aa		tax		        TAX
.487b	bd c4 03	lda $03c4,x	        LDA f03C4,X
.487e	e8		inx		        INX
.487f	1d c4 03	ora $03c4,x	        ORA f03C4,X
.4882	60		rts		        RTS
.4883	48		pha		s4883   PHA
.4884	20 b8 47	jsr $47b8	        JSR s47B8    ;change fonts
.4887	68		pla		        PLA
.4888	48		pha		        PHA
.4889	20 32 49	jsr $4932	        JSR s4932    ;called many times during icons draw routine
.488c	18		clc		        CLC
.488d	65 08		adc $08		        ADC r3L
.488f	85 08		sta $08		        STA r3L
.4891	90 02		bcc $4895	        BCC b4895
.4893	e6 09		inc $09		        INC r3H
.4895	68		pla		b4895   PLA
.4896	48		pha		        PHA
.4897	20 7f 49	jsr $497f	        JSR s497F
.489a	20 93 57	jsr $5793	        JSR s5793    ;Write single icon filename on pad
.489d	20 c0 59	jsr $59c0	        JSR s59C0    ;load $8b80 to r0
.48a0	20 ee 57	jsr $57ee	        JSR s57EE
.48a3	a5 0a		lda $0a		        LDA r4L
.48a5	4a		lsr a		        LSR
.48a6	85 1c		sta $1c		        STA r13L
.48a8	a5 08		lda $08		        LDA r3L
.48aa	38		sec		        SEC
.48ab	e5 1c		sbc $1c		        SBC r13L
.48ad	85 08		sta $08		        STA r3L
.48af	a5 09		lda $09		        LDA r3H
.48b1	e9 00		sbc #$00	        SBC #$00
.48b3	85 09		sta $09		        STA r3H
.48b5	10 06		bpl $48bd	        BPL b48BD
.48b7	a9 00		lda #$00	        LDA #$00
.48b9	85 08		sta $08		        STA r3L
.48bb	85 09		sta $09		        STA r3H
.48bd	20 71 49	jsr $4971	b48BD   JSR s4971    ;r4 = r4 + r3
.48c0	a9 01		lda #$01	        LDA #>p013F
.48c2	85 1d		sta $1d		        STA r13H
.48c4	a9 3f		lda #$3f	        LDA #<p013F
.48c6	85 1c		sta $1c		        STA r13L
.48c8	20 21 49	jsr $4921	        JSR s4921    ;if r4 != r13 then r4 = r13
.48cb	a5 07		lda $07		        LDA r2H
.48cd	85 06		sta $06		        STA r2L
.48cf	a5 06		lda $06		        LDA r2L
.48d1	18		clc		        CLC
.48d2	69 04		adc #$04	        ADC #$04
.48d4	85 06		sta $06		        STA r2L
.48d6	a5 29		lda $29		        LDA currentHeight
.48d8	18		clc		        CLC
.48d9	65 06		adc $06		        ADC r2L
.48db	38		sec		        SEC
.48dc	e9 01		sbc #$01	        SBC #$01
.48de	85 07		sta $07		        STA r2H
.48e0	68		pla		        PLA
.48e1	c9 14		cmp #$14	        CMP #$14
.48e3	90 0e		bcc $48f3	        BCC b48F3
.48e5	a9 01		lda #$01	        LDA #>p0108
.48e7	85 1d		sta $1d		        STA r13H
.48e9	a9 08		lda #$08	        LDA #<p0108
.48eb	85 1c		sta $1c		        STA r13L
.48ed	20 10 49	jsr $4910	        JSR s4910    ;if r3 != r13 then r3 = r13
.48f0	b8		clv		        CLV
.48f1	50 1a		bvc $490d	        BVC b490D
.48f3	c9 10		cmp #$10	b48F3   CMP #$10
.48f5	b0 16		bcs $490d	        BCS b490D
.48f7	a9 00		lda #$00	        LDA #>r3H
.48f9	85 1d		sta $1d		        STA r13H
.48fb	a9 09		lda #$09	        LDA #<r3H
.48fd	85 1c		sta $1c		        STA r13L
.48ff	20 10 49	jsr $4910	        JSR s4910    ;if r3 != r13 then r3 = r13
.4902	a9 01		lda #$01	        LDA #>p0106
.4904	85 1d		sta $1d		        STA r13H
.4906	a9 06		lda #$06	        LDA #<p0106
.4908	85 1c		sta $1c		        STA r13L
.490a	20 21 49	jsr $4921	        JSR s4921    ;if r4 != r13 then r4 = r13
.490d	4c 4b c1	jmp $c14b	b490D   JMP UseSystemFont
.4910	a6 1d		ldx $1d		s4910   LDX r13H
.4912	a5 1c		lda $1c		        LDA r13L
.4914	e4 09		cpx $09		        CPX r3H
.4916	d0 02		bne $491a	        BNE b491A
.4918	c5 08		cmp $08		        CMP r3L
.491a	90 04		bcc $4920	b491A   BCC b4920
.491c	86 09		stx $09		        STX r3H
.491e	85 08		sta $08		        STA r3L
.4920	60		rts		b4920   RTS
.4921	a6 1d		ldx $1d		s4921   LDX r13H
.4923	a5 1c		lda $1c		        LDA r13L
.4925	e4 0b		cpx $0b		        CPX r4H
.4927	d0 02		bne $492b	        BNE b492B
.4929	c5 0a		cmp $0a		        CMP r4L
.492b	b0 04		bcs $4931	b492B   BCS b4931
.492d	86 0b		stx $0b		        STX r4H
.492f	85 0a		sta $0a		        STA r4L
.4931	60		rts		b4931   RTS
.4932	a2 0c		ldx #$0c	s4932   LDX #$0C
.4934	20 8d 49	jsr $498d	        JSR s498D
.4937	a9 00		lda #$00	        LDA #$00
.4939	85 09		sta $09		        STA r3H
.493b	a0 02		ldy #$02	        LDY #$02
.493d	b1 0c		lda ($0c),y	        LDA (r5L),Y
.493f	0a		asl a		        ASL
.4940	0a		asl a		        ASL
.4941	0a		asl a		        ASL
.4942	26 09		rol $09		        ROL r3H
.4944	85 08		sta $08		        STA r3L
.4946	c8		iny		        INY
.4947	b1 0c		lda ($0c),y	        LDA (r5L),Y
.4949	85 06		sta $06		        STA r2L
.494b	c8		iny		        INY
.494c	a9 00		lda #$00	        LDA #$00
.494e	85 0b		sta $0b		        STA r4H
.4950	b1 0c		lda ($0c),y	        LDA (r5L),Y
.4952	0a		asl a		        ASL
.4953	0a		asl a		        ASL
.4954	48		pha		        PHA
.4955	0a		asl a		        ASL
.4956	26 0b		rol $0b		        ROL r4H
.4958	38		sec		        SEC
.4959	e9 01		sbc #$01	        SBC #$01
.495b	85 0a		sta $0a		        STA r4L
.495d	b0 02		bcs $4961	        BCS b4961
.495f	c6 0b		dec $0b		        DEC r4H
.4961	20 71 49	jsr $4971	b4961   JSR s4971    ;r4 = r4 + r3
.4964	c8		iny		        INY
.4965	b1 0c		lda ($0c),y	        LDA (r5L),Y
.4967	18		clc		        CLC
.4968	65 06		adc $06		        ADC r2L
.496a	38		sec		        SEC
.496b	e9 01		sbc #$01	        SBC #$01
.496d	85 07		sta $07		        STA r2H
.496f	68		pla		        PLA
.4970	60		rts		        RTS
.4971	a5 08		lda $08		s4971   LDA r3L
.4973	18		clc		        CLC
.4974	65 0a		adc $0a		        ADC r4L
.4976	85 0a		sta $0a		        STA r4L
.4978	a5 09		lda $09		        LDA r3H
.497a	65 0b		adc $0b		        ADC r4H
.497c	85 0b		sta $0b		        STA r4H
.497e	60		rts		        RTS
.497f	0a		asl a		s497F   ASL
.4980	aa		tax		        TAX
.4981	bd c4 03	lda $03c4,x	        LDA f03C4,X
.4984	85 02		sta $02		        STA r0L
.4986	e8		inx		        INX
.4987	bd c4 03	lda $03c4,x	        LDA f03C4,X
.498a	85 03		sta $03		        STA r0H
.498c	60		rts		        RTS
.498d	48		pha		s498D   PHA
.498e	0a		asl a		        ASL
.498f	0a		asl a		        ASL
.4990	0a		asl a		        ASL
.4991	18		clc		        CLC
.4992	69 28		adc #$28	        ADC #$28
.4994	95 00		sta $00,x	        STA f00,X
.4996	a9 04		lda #$04	        LDA #$04
.4998	69 00		adc #$00	        ADC #$00
.499a	95 01		sta $01,x	        STA f01,X
.499c	68		pla		        PLA
.499d	60		rts		        RTS
.499e	a0 49		ldy #$49	s499E   LDY #>p49C4
.49a0	84 03		sty $03		        STY r0H
.49a2	a0 c4		ldy #$c4	        LDY #<p49C4
.49a4	84 02		sty $02		        STY r0L
.49a6	a2 01		ldx #$01	s49A6   LDX #$01
.49a8	86 1c		stx $1c		        STX r13L
.49aa	0a		asl a		j49AA   ASL
.49ab	0a		asl a		        ASL
.49ac	0a		asl a		        ASL
.49ad	aa		tax		        TAX
.49ae	a0 00		ldy #$00	        LDY #$00
.49b0	a9 08		lda #$08	b49B0   LDA #$08
.49b2	85 1d		sta $1d		        STA r13H
.49b4	b1 02		lda ($02),y	b49B4   LDA (r0L),Y
.49b6	9d 28 04	sta $0428,x	        STA f0428,X
.49b9	e8		inx		        INX
.49ba	c8		iny		        INY
.49bb	c6 1d		dec $1d		        DEC r13H
.49bd	d0 f5		bne $49b4	        BNE b49B4
.49bf	c6 1c		dec $1c		        DEC r13L
.49c1	d0 ed		bne $49b0	        BNE b49B0
.49c3	60		rts		        RTS
>49c4	ff 28 00 00 03 15 b7 3e		p49C4   .BYTE $FF,$28,$00,$00,$03,$15,$B7,$3E
.49cc	a2 01		ldx #$01	s49CC   LDX #$01
.49ce	86 1c		stx $1c		        STX r13L
.49d0	a8		tay		s49D0   TAY
.49d1	a5 1c		lda $1c		        LDA r13L
.49d3	48		pha		        PHA
.49d4	98		tya		        TYA
.49d5	48		pha		        PHA
.49d6	20 16 4a	jsr $4a16	        JSR s4A16
.49d9	f0 2d		beq $4a08	        BEQ b4A08
.49db	88		dey		        DEY
.49dc	b1 0c		lda ($0c),y	b49DC   LDA (r5L),Y  ;loop to load bitmap data from *0c to r0 ($02)
.49de	95 02		sta $02,x	        STA r0L,X
.49e0	e8		inx		        INX
.49e1	c8		iny		        INY
.49e2	c0 06		cpy #$06	        CPY #$06
.49e4	d0 f6		bne $49dc	        BNE b49DC
.49e6	20 42 c1	jsr $c142	        JSR BitmapUp ;place a compacted bitmap on screen
.49e9	68		pla		        PLA
.49ea	48		pha		        PHA
.49eb	c9 08		cmp #$08	        CMP #$08
.49ed	b0 08		bcs $49f7	        BCS b49F7
.49ef	ae 4d 02	ldx $024d	        LDX a024D
.49f2	f0 03		beq $49f7	        BEQ b49F7
.49f4	20 3e 4a	jsr $4a3e	        JSR s4A3E
.49f7	68		pla		b49F7   PLA
.49f8	48		pha		        PHA
.49f9	20 52 47	jsr $4752	        JSR j4752    ;after disk icons loaded
.49fc	68		pla		        PLA
.49fd	48		pha		        PHA
.49fe	20 d5 3f	jsr $3fd5	        JSR s3FD5
.4a01	e0 ff		cpx #$ff	        CPX #$FF
.4a03	f0 03		beq $4a08	        BEQ b4A08    ;do not invert icon if X=$FF
.4a05	20 24 48	jsr $4824	        JSR s4824    ;invert icon
.4a08	68		pla		b4A08   PLA
.4a09	aa		tax		        TAX
.4a0a	e8		inx		        INX
.4a0b	68		pla		        PLA
.4a0c	85 1c		sta $1c		        STA r13L
.4a0e	8a		txa		        TXA
.4a0f	c6 1c		dec $1c		        DEC r13L
.4a11	d0 bd		bne $49d0	        BNE s49D0
.4a13	ca		dex		        DEX
.4a14	8a		txa		        TXA
.4a15	60		rts		        RTS
.4a16	a2 0c		ldx #$0c	s4A16   LDX #$0C
.4a18	20 8d 49	jsr $498d	        JSR s498D
.4a1b	a0 00		ldy #$00	        LDY #$00
.4a1d	a2 00		ldx #$00	        LDX #$00
.4a1f	b1 0c		lda ($0c),y	        LDA (r5L),Y
.4a21	c8		iny		        INY
.4a22	11 0c		ora ($0c),y	        ORA (r5L),Y
.4a24	60		rts		        RTS
.4a25	ad 8a 84	lda $848a	s4A25   LDA diskOpenFlg
.4a28	2d 4d 02	and $024d	        AND a024D
.4a2b	f0 10		beq $4a3d	        BEQ b4A3D
.4a2d	a5 7a		lda $7a		        LDA padViewMode
.4a2f	d0 0c		bne $4a3d	        BNE b4A3D
.4a31	a9 07		lda #$07	        LDA #$07
.4a33	48		pha		b4A33   PHA
.4a34	20 3e 4a	jsr $4a3e	        JSR s4A3E
.4a37	68		pla		        PLA
.4a38	38		sec		        SEC
.4a39	e9 01		sbc #$01	        SBC #$01
.4a3b	10 f6		bpl $4a33	        BPL b4A33
.4a3d	60		rts		b4A3D   RTS
.4a3e	85 02		sta $02		s4A3E   STA r0L
.4a40	20 16 4a	jsr $4a16	        JSR s4A16
.4a43	f0 51		beq $4a96	        BEQ b4A96
.4a45	a5 02		lda $02		        LDA r0L
.4a47	a2 0c		ldx #$0c	        LDX #$0C
.4a49	20 f0 45	jsr $45f0	        JSR s45F0
.4a4c	a0 16		ldy #$16	        LDY #$16
.4a4e	b1 0c		lda ($0c),y	        LDA (r5L),Y
.4a50	20 97 4a	jsr $4a97	        JSR s4A97
.4a53	85 0c		sta $0c		        STA r5L
.4a55	ad f0 8f	lda $8ff0	        LDA a8FF0
.4a58	29 0f		and #$0f	        AND #$0F
.4a5a	05 0c		ora $0c		        ORA r5L
.4a5c	a4 02		ldy $02		        LDY r0L
.4a5e	b8		clv		        CLV
.4a5f	50 04		bvc $4a65	        BVC b4A65
.4a61	a8		tay		s4A61   TAY
.4a62	ad f0 8f	lda $8ff0	        LDA a8FF0
.4a65	20 33 25	jsr $2533	b4A65   JSR s2533    ;compare version to 32
.4a68	90 2c		bcc $4a96	        BCC b4A96
.4a6a	20 26 59	jsr $5926	        JSR s5926    ;if pad view mode is icon, then CARRY=1, else CARRY=0
.4a6d	90 27		bcc $4a96	        BCC b4A96
.4a6f	85 02		sta $02		        STA r0L
.4a71	b9 7a 45	lda $457a,y	        LDA f457A,Y
.4a74	85 0d		sta $0d		        STA r5H
.4a76	b9 82 45	lda $4582,y	        LDA f4582,Y
.4a79	85 0c		sta $0c		        STA r5L
.4a7b	a2 03		ldx #$03	        LDX #$03
.4a7d	a0 00		ldy #$00	b4A7D   LDY #$00
.4a7f	a5 02		lda $02		        LDA r0L
.4a81	91 0c		sta ($0c),y	b4A81   STA (r5L),Y
.4a83	c8		iny		        INY
.4a84	c0 03		cpy #$03	        CPY #$03
.4a86	d0 f9		bne $4a81	        BNE b4A81
.4a88	a5 0c		lda $0c		        LDA r5L
.4a8a	18		clc		        CLC
.4a8b	69 28		adc #$28	        ADC #$28
.4a8d	85 0c		sta $0c		        STA r5L
.4a8f	90 02		bcc $4a93	        BCC b4A93
.4a91	e6 0d		inc $0d		        INC r5H
.4a93	ca		dex		b4A93   DEX
.4a94	d0 e7		bne $4a7d	        BNE b4A7D
.4a96	60		rts		b4A96   RTS
.4a97	4a		lsr a		s4A97   LSR
.4a98	a8		tay		        TAY
.4a99	b9 e8 8f	lda $8fe8,y	        LDA f8FE8,Y
.4a9c	b0 04		bcs $4aa2	        BCS b4AA2
.4a9e	0a		asl a		        ASL
.4a9f	0a		asl a		        ASL
.4aa0	0a		asl a		        ASL
.4aa1	0a		asl a		        ASL
.4aa2	29 f0		and #$f0	b4AA2   AND #$F0
.4aa4	60		rts		        RTS
.4aa5	ac 8a 84	ldy $848a	        LDY diskOpenFlg
.4aa8	f0 11		beq $4abb	        BEQ b4ABB
.4aaa	a0 01		ldy #$01	        LDY #$01
.4aac	84 04		sty $04		        STY r1L
.4aae	d0 0f		bne $4abf	        BNE b4ABF
.4ab0	ac 8a 84	ldy $848a	        LDY diskOpenFlg
.4ab3	f0 06		beq $4abb	        BEQ b4ABB
.4ab5	a0 ff		ldy #$ff	        LDY #$FF
.4ab7	84 04		sty $04		        STY r1L
.4ab9	d0 04		bne $4abf	        BNE b4ABF
.4abb	60		rts		b4ABB   RTS
.4abc	20 03 4b	jsr $4b03	        JSR s4B03    ;called by CLICK HANDLER - Pager
.4abf	a5 04		lda $04		b4ABF   LDA r1L
.4ac1	48		pha		        PHA
.4ac2	20 1f 4b	jsr $4b1f	        JSR s4B1F    ;Pad pager clicked (next and prev)
.4ac5	68		pla		        PLA
.4ac6	18		clc		        CLC
.4ac7	65 fb		adc $fb		        ADC aFB
.4ac9	10 02		bpl $4acd	        BPL b4ACD
.4acb	a5 fd		lda $fd		        LDA aFD
.4acd	c5 fd		cmp $fd		b4ACD   CMP aFD
.4acf	90 04		bcc $4ad5	        BCC b4AD5
.4ad1	f0 02		beq $4ad5	        BEQ b4AD5
.4ad3	a9 00		lda #$00	        LDA #$00
.4ad5	c5 fb		cmp $fb		b4AD5   CMP aFB
.4ad7	f0 08		beq $4ae1	        BEQ b4AE1
.4ad9	85 fb		sta $fb		        STA aFB
.4adb	20 26 34	jsr $3426	        JSR s3426
.4ade	20 9c 59	jsr $599c	        JSR s599C
.4ae1	4c 7c 3b	jmp $3b7c	b4AE1   JMP j3B7C    ;Draw pad icons and increment / decrement page number on pad
.4ae4	c5 fd		cmp $fd		s4AE4   CMP aFD
.4ae6	f0 02		beq $4aea	        BEQ b4AEA
.4ae8	b0 18		bcs $4b02	        BCS b4B02
.4aea	c5 fb		cmp $fb		b4AEA   CMP aFB
.4aec	f0 14		beq $4b02	        BEQ b4B02
.4aee	48		pha		        PHA
.4aef	b0 06		bcs $4af7	        BCS b4AF7
.4af1	a9 ff		lda #$ff	        LDA #$FF
.4af3	85 04		sta $04		        STA r1L
.4af5	d0 04		bne $4afb	        BNE b4AFB
.4af7	a9 01		lda #$01	b4AF7   LDA #$01
.4af9	85 04		sta $04		        STA r1L
.4afb	20 1f 4b	jsr $4b1f	b4AFB   JSR s4B1F    ;Pad pager clicked (next and prev)
.4afe	68		pla		        PLA
.4aff	20 d5 4a	jsr $4ad5	        JSR b4AD5
.4b02	60		rts		b4B02   RTS
.4b03	a9 01		lda #$01	s4B03   LDA #$01
.4b05	a2 02		ldx #$02	        LDX #$02
.4b07	20 1e 58	jsr $581e	        JSR s581E
.4b0a	a5 3a		lda $3a		        LDA mouseXPosLo
.4b0c	38		sec		        SEC
.4b0d	e5 02		sbc $02		        SBC r0L
.4b0f	18		clc		        CLC
.4b10	69 7c		adc #$7c	        ADC #$7C
.4b12	a0 01		ldy #$01	        LDY #$01
.4b14	c5 3c		cmp $3c		        CMP mouseYPos
.4b16	f0 02		beq $4b1a	        BEQ b4B1A
.4b18	b0 02		bcs $4b1c	        BCS b4B1C
.4b1a	a0 ff		ldy #$ff	b4B1A   LDY #$FF
.4b1c	84 04		sty $04		b4B1C   STY r1L
.4b1e	60		rts		        RTS
.4b1f	a5 04		lda $04		s4B1F   LDA r1L
.4b21	48		pha		        PHA
.4b22	20 f3 40	jsr $40f3	        JSR s40F3
.4b25	20 7e 23	jsr $237e	        JSR s237E
.4b28	20 6c 58	jsr $586c	        JSR s586C    ;changing pad page
.4b2b	a9 00		lda #$00	        LDA #>r11L
.4b2d	85 0b		sta $0b		        STA r4H
.4b2f	a9 18		lda #$18	        LDA #<r11L
.4b31	85 0a		sta $0a		        STA r4L
.4b33	a9 7c		lda #$7c	        LDA #$7C
.4b35	85 18		sta $18		        STA r11L
.4b37	68		pla		        PLA
.4b38	48		pha		        PHA
.4b39	85 04		sta $04		        STA r1L
.4b3b	a8		tay		        TAY
.4b3c	a9 00		lda #$00	        LDA #>r3L
.4b3e	85 05		sta $05		        STA r1H
.4b40	a9 08		lda #$08	        LDA #<r3L
.4b42	85 04		sta $04		        STA r1L
.4b44	98		tya		        TYA
.4b45	10 14		bpl $4b5b	        BPL b4B5B
.4b47	a9 00		lda #$00	        LDA #>p68
.4b49	85 0b		sta $0b		        STA r4H
.4b4b	a9 68		lda #$68	        LDA #<p68
.4b4d	85 0a		sta $0a		        STA r4L
.4b4f	a9 29		lda #$29	        LDA #$29
.4b51	85 18		sta $18		        STA r11L
.4b53	a9 ff		lda #$ff	        LDA #>pFFF8
.4b55	85 05		sta $05		        STA r1H
.4b57	a9 f8		lda #$f8	        LDA #<pFFF8
.4b59	85 04		sta $04		        STA r1L
.4b5b	a9 00		lda #$00	b4B5B   LDA #<p0A00
.4b5d	85 02		sta $02		        STA r0L
.4b5f	a9 0a		lda #$0a	        LDA #>p0A00
.4b61	85 03		sta $03		        STA r0H
.4b63	a9 00		lda #$00	b4B63   LDA #>r3H    ;start loop to draw pager animation
.4b65	85 09		sta $09		        STA r3H
.4b67	a9 09		lda #$09	        LDA #<r3H
.4b69	85 08		sta $08		        STA r3L
.4b6b	a5 02		lda $02		        LDA r0L
.4b6d	20 18 c1	jsr $c118	        JSR HorizontalLine
.4b70	a5 18		lda $18		        LDA r11L
.4b72	85 08		sta $08		        STA r3L
.4b74	a9 8a		lda #$8a	        LDA #$8A
.4b76	85 09		sta $09		        STA r3H
.4b78	a5 02		lda $02		        LDA r0L
.4b7a	20 21 c1	jsr $c121	        JSR VerticalLine
.4b7d	a5 02		lda $02		        LDA r0L
.4b7f	49 ff		eor #$ff	        EOR #$FF
.4b81	85 02		sta $02		        STA r0L
.4b83	10 de		bpl $4b63	        BPL b4B63    ;end loop to draw pager animation
.4b85	a5 04		lda $04		        LDA r1L
.4b87	18		clc		        CLC
.4b88	65 0a		adc $0a		        ADC r4L
.4b8a	85 0a		sta $0a		        STA r4L
.4b8c	a5 05		lda $05		        LDA r1H
.4b8e	65 0b		adc $0b		        ADC r4H
.4b90	85 0b		sta $0b		        STA r4H
.4b92	38		sec		        SEC
.4b93	a5 18		lda $18		        LDA r11L
.4b95	e5 04		sbc $04		        SBC r1L
.4b97	85 18		sta $18		        STA r11L
.4b99	c6 03		dec $03		        DEC r0H
.4b9b	d0 c6		bne $4b63	        BNE b4B63
.4b9d	a9 12		lda #$12	        LDA #$12
.4b9f	20 cc 49	jsr $49cc	        JSR s49CC    ;draw a pad file icon and filename
.4ba2	68		pla		        PLA
.4ba3	85 04		sta $04		        STA r1L
.4ba5	60		rts		        RTS
.4ba6	a9 4b		lda #$4b	s4BA6   LDA #>p4BDF
.4ba8	85 03		sta $03		        STA r0H
.4baa	a9 df		lda #$df	        LDA #<p4BDF
.4bac	85 02		sta $02		        STA r0L
.4bae	a5 7a		lda $7a		        LDA padViewMode
.4bb0	f0 12		beq $4bc4	        BEQ b4BC4
.4bb2	20 a2 c1	jsr $c1a2	        JSR i_FrameRectangle ;Draw rectangle (clear) bottom of pad to erase pager
>4bb5	7c 8b 08 00 07 01 ff		        .BYTE $7C,$8B,$08,$00,$07,$01,$FF ;y1=124, y2=139, x1=8, x2=263
.4bbc	a9 4b		lda #$4b	        LDA #>p4BE7
.4bbe	85 03		sta $03		        STA r0H
.4bc0	a9 e7		lda #$e7	        LDA #<p4BE7
.4bc2	85 02		sta $02		        STA r0L
.4bc4	a9 12		lda #$12	b4BC4   LDA #$12
.4bc6	20 a6 49	jsr $49a6	        JSR s49A6
.4bc9	a9 4b		lda #$4b	        LDA #>p4BEF
.4bcb	85 03		sta $03		        STA r0H
.4bcd	a9 ef		lda #$ef	        LDA #<p4BEF
.4bcf	85 02		sta $02		        STA r0L
.4bd1	a9 13		lda #$13	        LDA #$13
.4bd3	20 a6 49	jsr $49a6	        JSR s49A6
.4bd6	a9 02		lda #$02	        LDA #$02
.4bd8	85 1c		sta $1c		        STA r13L
.4bda	a9 12		lda #$12	        LDA #$12
.4bdc	4c d0 49	jmp $49d0	        JMP s49D0
>4bdf	60 29 01 7c 02 10 bc 4a		p4BDF   .BYTE $60,$29,$01,$7C,$02,$10,$BC,$4A
>4be7	3f 29 10 7c 02 10 09 55		p4BE7   .BYTE $3F,$29,$10,$7C,$02,$10,$09,$55
>4bef	81 29 1e 11 02 0b fc 35		p4BEF   .BYTE $81,$29,$1E,$11,$02,$0B,$FC,$35
>4bf7	00				mnuStruct .BYTE $00    ;y1=0
>4bf8	0c 00 00			        .BYTE $0C,$00,$00 ;y2=12, x1=0
>4bfb	c9 00 07			        .BYTE $C9,$00,$07 ;x2=201, attribute=HORIZONTAL | 7 items
>4bfe	10 2f 40 24 4d			mnuStructGEOS .BYTE $10,$2F,$40,$24,$4D
>4c03	15 2f 40 2f 4d			mnuStructFILE .BYTE $15,$2F,$40,$2F,$4D
>4c08	1a 2f 40 3a 4d			mnuStructVIEW .BYTE $1A,$2F,$40,$3A,$4D
>4c0d	e4 2d 40 45 4d			mnuStructDISK .BYTE $E4,$2D,$40,$45,$4D
>4c12	1f 2f 40 50 4d			mnuStructSELECT .BYTE $1F,$2F,$40,$50,$4D
>4c17	26 2f 40 5b 4d			mnuStructPAGE .BYTE $26,$2F,$40,$5B,$4D
>4c1c	2b 2f 40 66 4d			mnuStructOPTIONS .BYTE $2B,$2F,$40,$66,$4D
>4c21	0c				_mnuStructGEOS .BYTE $0C
>4c22	44 00 00 4f 00			a4C22   .BYTE $44,$00,$00,$4F,$00
>4c27	84				a4C27   .BYTE $84
>4c28	33 2f 00 21 55			mnuStructGEOSInfo .BYTE $33,$2F,$00,$21,$55
>4c2d	3d 2f 00 2a 55			mnuStructGEOSdesktop .BYTE $3D,$2F,$00,$2A,$55
>4c32	51 2f 00 d9 54			mnuStructGEOSSelPr .BYTE $51,$2F,$00,$D9,$54
>4c37	60 2f 00 e2 54			mnuStructGEOSSelInpt .BYTE $60,$2F,$00,$E2,$54
>4c3c	66 0a 00 c3 4e			mnuStructGEOSExt1 .BYTE $66,$0A,$00,$C3,$4E
>4c41	77 0a 00 c3 4e			mnuStructGEOSExt2 .BYTE $77,$0A,$00,$C3,$4E
>4c46	88 0a 00 c3 4e			mnuStructGEOSExt3 .BYTE $88,$0A,$00,$C3,$4E
>4c4b	99 0a 00 c3 4e			mnuStructGEOSExt4 .BYTE $99,$0A,$00,$C3,$4E
>4c50	aa 0a 00 c3 4e			mnuStructGEOSExt5 .BYTE $AA,$0A,$00,$C3,$4E
>4c55	bb 0a 00 c3 4e			mnuStructGEOSExt6 .BYTE $BB,$0A,$00,$C3,$4E
>4c5a	cc 0a 00 c3 4e			mnuStructGEOSExt7 .BYTE $CC,$0A,$00,$C3,$4E
>4c5f	dd 0a 00 c3 4e			mnuStructGEOSExt8 .BYTE $DD,$0A,$00,$C3,$4E
>4c64	0c 6f 20 00 77 00 87		_mnuStructFile .BYTE $0C,$6F,$20,$00,$77,$00,$87
>4c6b	74 2f 00 2f 3c			mnuStructFileOpen .BYTE $74,$2F,$00,$2F,$3C
>4c70	80 2f 00 45 55			mnuStructFileDupl .BYTE $80,$2F,$00,$45,$55
>4c75	91 2f 00 3c 55			mnuStructFileRenam .BYTE $91,$2F,$00,$3C,$55
>4c7a	45 2f 00 d0 54			mnuStructFileInfo .BYTE $45,$2F,$00,$D0,$54
>4c7f	9f 2f 00 5e 54			mnuStructFilePrint .BYTE $9F,$2F,$00,$5E,$54
>4c84	ac 2f 00 6d 54			mnuStructFileDelete .BYTE $AC,$2F,$00,$6D,$54
>4c89	ba 2f 00 9a 54			mnuStructFileUndo .BYTE $BA,$2F,$00,$9A,$54
>4c8e	0c 57 30 00 5f 00 85		_mnuStructView .BYTE $0C,$57,$30,$00,$5F,$00,$85
>4c95	cd				mnuStructViewIcon .BYTE $CD
>4c96	2f 00 48 51			a4C96   .BYTE $2F,$00,$48,$51
>4c9a	e5 2f 00 48 51			mnuStructViewSize .BYTE $E5,$2F,$00,$48,$51
>4c9f	ed 2f 00 48 51			mnuStructViewType .BYTE $ED,$2F,$00,$48,$51
>4ca4	dd 2f 00 48 51			mnuStructViewDate .BYTE $DD,$2F,$00,$48,$51
>4ca9	d5 2f 00 48 51			mnuStructViewName .BYTE $D5,$2F,$00,$48,$51
>4cae	0c 6f 50 00 8f 00		_mnuStructDisk .BYTE $0C,$6F,$50,$00,$8F,$00
>4cb4	87				        .BYTE $87
>4cb5	f5 2f 00 21 4f			mnuStructDiskOpen .BYTE $F5,$2F,$00,$21,$4F
>4cba	01 30 00 f9 35			mnuStructDiskClose .BYTE $01,$30,$00,$F9,$35
>4cbf	0e 30 00 33 55			mnuStructDiskRename .BYTE $0E,$30,$00,$33,$55
>4cc4	1c 30 00 45 4f			mnuStructDiskCopy .BYTE $1C,$30,$00,$45,$4F
>4cc9	35 30 00 7c 54			mnuStructDiskValidat .BYTE $35,$30,$00,$7C,$54
>4cce	28 30 00 a3 54			mnuStructDiskErase .BYTE $28,$30,$00,$A3,$54
>4cd3	45 30 00 85 54			mnuStructDiskFormat .BYTE $45,$30,$00,$85,$54
>4cd8	0c 37 68 00 b7 00 83		_mnuStructSelect .BYTE $0C,$37,$68,$00,$B7,$00,$83
>4cdf	6f 30 00 b5 54			mnuStructSelectAllPg .BYTE $6F,$30,$00,$B5,$54
>4ce4	80 30 00 be 54			mnuStructSelectPage .BYTE $80,$30,$00,$BE,$54
>4ce9	92 30 00 c7 54			mnuStructSelectBordr .BYTE $92,$30,$00,$C7,$54
>4cee	0c 27 88 00 c7 00 82		_mnuStructPage .BYTE $0C,$27,$88,$00,$C7,$00,$82
>4cf5	53 30 00 eb 54			mnuStructPageAppend .BYTE $53,$30,$00,$EB,$54
>4cfa	61 30 00 f4 54			mnuStructPageDel .BYTE $61,$30,$00,$F4,$54
>4cff	0c 47 a0 00 e7 00 84		_mnuStructOptions .BYTE $0C,$47,$A0,$00,$E7,$00,$84
>4d06	a6 30 00 4e 55			mnuOptSetClock .BYTE $A6,$30,$00,$4E,$55
>4d0b	b6 30 00 6c 51			mnuOptReset .BYTE $B6,$30,$00,$6C,$51
>4d10	b0 30 00 0f 55			mnuOptBasic .BYTE $B0,$30,$00,$0F,$55
>4d15	c3 30 00 5d 55			mnuOptShortCuts .BYTE $C3,$30,$00,$5D,$55
>4d1a	47 45 4f 53 20 42 4f 4f		f4D1A   .TEXT "GEOS BOOT", $A0
>4d22	54 a0
.4d24	a2 04		ldx #$04	        LDX #$04
.4d26	20 a4 4d	jsr $4da4	        JSR s4DA4    ;before drawing menus or dialog boxes
.4d29	a9 21		lda #$21	        LDA #$21     ;< address of submenu
.4d2b	a0 4c		ldy #$4c	        LDY #$4C     ;> address of submenu
.4d2d	d0 40		bne $4d6f	        BNE b4D6F
.4d2f	a2 08		ldx #$08	        LDX #$08
.4d31	20 a4 4d	jsr $4da4	        JSR s4DA4    ;before drawing menus or dialog boxes
.4d34	a9 64		lda #$64	        LDA #$64     ;< address of submenu
.4d36	a0 4c		ldy #$4c	        LDY #$4C     ;> address of submenu
.4d38	d0 35		bne $4d6f	        BNE b4D6F
.4d3a	a2 0c		ldx #$0c	        LDX #$0C
.4d3c	20 a4 4d	jsr $4da4	        JSR s4DA4    ;before drawing menus or dialog boxes
.4d3f	a9 8e		lda #$8e	        LDA #$8E     ;< address of submenu
.4d41	a0 4c		ldy #$4c	        LDY #$4C     ;> address of submenu
.4d43	d0 2a		bne $4d6f	        BNE b4D6F
.4d45	a2 10		ldx #$10	        LDX #$10
.4d47	20 a4 4d	jsr $4da4	        JSR s4DA4    ;before drawing menus or dialog boxes
.4d4a	a9 ae		lda #$ae	        LDA #$AE     ;< address of submenu
.4d4c	a0 4c		ldy #$4c	        LDY #$4C     ;> address of submenu
.4d4e	d0 1f		bne $4d6f	        BNE b4D6F
.4d50	a2 14		ldx #$14	        LDX #$14
.4d52	20 a4 4d	jsr $4da4	        JSR s4DA4    ;before drawing menus or dialog boxes
.4d55	a9 d8		lda #$d8	        LDA #$D8     ;< address of submenu
.4d57	a0 4c		ldy #$4c	        LDY #$4C     ;> address of submenu
.4d59	d0 14		bne $4d6f	        BNE b4D6F
.4d5b	a2 18		ldx #$18	        LDX #$18
.4d5d	20 a4 4d	jsr $4da4	        JSR s4DA4    ;before drawing menus or dialog boxes
.4d60	a9 ee		lda #$ee	        LDA #$EE     ;< address of submenu
.4d62	a0 4c		ldy #$4c	        LDY #$4C     ;> address of submenu
.4d64	d0 09		bne $4d6f	        BNE b4D6F
.4d66	a2 1c		ldx #$1c	        LDX #$1C
.4d68	20 a4 4d	jsr $4da4	        JSR s4DA4    ;before drawing menus or dialog boxes
.4d6b	a9 ff		lda #$ff	        LDA #<_mnuStructOptions ;< address of submenu
.4d6d	a0 4c		ldy #$4c	        LDY #>_mnuStructOptions ;> address of submenu
.4d6f	84 03		sty $03		b4D6F   STY r0H
.4d71	85 02		sta $02		        STA r0L
.4d73	4c 62 26	jmp $2662	        JMP MainMenuHandler ;When user clicks on top level menu, this code executes before submenus displayed
>4d76	00				a4D76   .BYTE $00
.4d77	ae 76 4d	ldx $4d76	        LDX a4D76
.4d7a	e0 ff		cpx #$ff	        CPX #$FF
.4d7c	f0 25		beq $4da3	        BEQ b4DA3
.4d7e	e0 20		cpx #$20	        CPX #$20
.4d80	d0 05		bne $4d87	        BNE b4D87
.4d82	20 4c 3b	jsr $3b4c	        JSR s3B4C
.4d85	a2 20		ldx #$20	        LDX #$20
.4d87	8a		txa		b4D87   TXA
.4d88	48		pha		        PHA
.4d89	20 f4 26	jsr $26f4	        JSR j26F4    ;comes here after drawing pad and disk info - seems to draw file icons
.4d8c	20 25 4a	jsr $4a25	        JSR s4A25
.4d8f	68		pla		        PLA
.4d90	aa		tax		        TAX
.4d91	20 b4 4d	jsr $4db4	        JSR s4DB4
.4d94	ae 76 4d	ldx $4d76	        LDX a4D76
.4d97	e0 20		cpx #$20	        CPX #$20
.4d99	d0 03		bne $4d9e	        BNE b4D9E
.4d9b	20 b1 3b	jsr $3bb1	        JSR s3BB1
.4d9e	a9 ff		lda #$ff	b4D9E   LDA #$FF
.4da0	8d 76 4d	sta $4d76	        STA a4D76
.4da3	60		rts		b4DA3   RTS
.4da4	8e 76 4d	stx $4d76	s4DA4   STX a4D76
.4da7	20 84 4e	jsr $4e84	        JSR s4E84    ;store $6600 in r1, copy table values from $fe9f+X to r2L, r2H, r3L, r4H
.4daa	20 f1 4d	jsr $4df1	        JSR s4DF1
.4dad	a0 00		ldy #$00	        LDY #$00
.4daf	98		tya		        TYA
.4db0	91 10		sta ($10),y	        STA (r7L),Y
.4db2	f0 08		beq $4dbc	        BEQ b4DBC
.4db4	20 84 4e	jsr $4e84	s4DB4   JSR s4E84    ;store $6600 in r1, copy table values from $fe9f+X to r2L, r2H, r3L, r4H
.4db7	20 f1 4d	jsr $4df1	        JSR s4DF1
.4dba	a9 ff		lda #$ff	        LDA #$FF
.4dbc	85 0b		sta $0b		b4DBC   STA r4H
.4dbe	a6 07		ldx $07		b4DBE   LDX r2H      ;Y Coordinate of line to calculate memory address
.4dc0	20 3c c1	jsr $c13c	        JSR GetScanLine
.4dc3	a5 06		lda $06		        LDA r2L
.4dc5	0a		asl a		        ASL
.4dc6	0a		asl a		        ASL
.4dc7	0a		asl a		        ASL
.4dc8	90 02		bcc $4dcc	        BCC b4DCC
.4dca	e6 0d		inc $0d		        INC r5H
.4dcc	a8		tay		b4DCC   TAY
.4dcd	a5 08		lda $08		        LDA r3L
.4dcf	85 0a		sta $0a		        STA r4L
.4dd1	24 0b		bit $0b		b4DD1   BIT r4H
.4dd3	10 06		bpl $4ddb	        BPL b4DDB
.4dd5	20 4e 4e	jsr $4e4e	        JSR s4E4E    ;called during remove dialog box / screen restore
.4dd8	b8		clv		        CLV
.4dd9	50 03		bvc $4dde	        BVC b4DDE
.4ddb	20 04 4e	jsr $4e04	b4DDB   JSR s4E04
.4dde	18		clc		b4DDE   CLC
.4ddf	69 08		adc #$08	        ADC #$08
.4de1	90 02		bcc $4de5	        BCC b4DE5
.4de3	e6 0d		inc $0d		        INC r5H
.4de5	a8		tay		b4DE5   TAY
.4de6	c6 0a		dec $0a		        DEC r4L
.4de8	d0 e7		bne $4dd1	        BNE b4DD1
.4dea	e6 07		inc $07		        INC r2H
.4dec	c6 09		dec $09		        DEC r3H
.4dee	d0 ce		bne $4dbe	        BNE b4DBE
.4df0	60		rts		        RTS
.4df1	20 fb 4d	jsr $4dfb	s4DF1   JSR s4DFB    ;copy r1 to r7
.4df4	e6 04		inc $04		s4DF4   INC r1L
.4df6	d0 02		bne $4dfa	        BNE b4DFA
.4df8	e6 05		inc $05		        INC r1H
.4dfa	60		rts		b4DFA   RTS
.4dfb	a5 05		lda $05		s4DFB   LDA r1H
.4dfd	85 11		sta $11		        STA r7H
.4dff	a5 04		lda $04		        LDA r1L
.4e01	85 10		sta $10		        STA r7L
.4e03	60		rts		        RTS
.4e04	98		tya		s4E04   TYA
.4e05	48		pha		        PHA
.4e06	a5 05		lda $05		        LDA r1H
.4e08	c9 6d		cmp #$6d	        CMP #$6D
.4e0a	b0 40		bcs $4e4c	        BCS b4E4C
.4e0c	b1 0c		lda ($0c),y	        LDA (r5L),Y
.4e0e	a0 00		ldy #$00	        LDY #$00
.4e10	aa		tax		        TAX
.4e11	d0 11		bne $4e24	        BNE b4E24
.4e13	b1 10		lda ($10),y	        LDA (r7L),Y
.4e15	30 04		bmi $4e1b	        BMI b4E1B
.4e17	c9 7f		cmp #$7f	        CMP #$7F
.4e19	d0 2a		bne $4e45	        BNE b4E45
.4e1b	20 f1 4d	jsr $4df1	b4E1B   JSR s4DF1
.4e1e	a9 00		lda #$00	        LDA #$00
.4e20	91 10		sta ($10),y	        STA (r7L),Y
.4e22	f0 21		beq $4e45	        BEQ b4E45
.4e24	b1 10		lda ($10),y	b4E24   LDA (r7L),Y
.4e26	10 0d		bpl $4e35	        BPL b4E35
.4e28	c9 ff		cmp #$ff	        CMP #$FF
.4e2a	f0 09		beq $4e35	        BEQ b4E35
.4e2c	8a		txa		b4E2C   TXA
.4e2d	91 04		sta ($04),y	        STA (r1L),Y
.4e2f	20 f4 4d	jsr $4df4	        JSR s4DF4    ;increment r1 (word)
.4e32	b8		clv		        CLV
.4e33	50 10		bvc $4e45	        BVC b4E45
.4e35	20 f1 4d	jsr $4df1	b4E35   JSR s4DF1
.4e38	a9 80		lda #$80	        LDA #$80
.4e3a	91 10		sta ($10),y	        STA (r7L),Y
.4e3c	a5 05		lda $05		        LDA r1H
.4e3e	c9 6d		cmp #$6d	        CMP #$6D
.4e40	b0 0a		bcs $4e4c	        BCS b4E4C
.4e42	b8		clv		        CLV
.4e43	50 e7		bvc $4e2c	        BVC b4E2C
.4e45	b1 10		lda ($10),y	b4E45   LDA (r7L),Y
.4e47	18		clc		        CLC
.4e48	69 01		adc #$01	        ADC #$01
.4e4a	91 10		sta ($10),y	        STA (r7L),Y
.4e4c	68		pla		b4E4C   PLA
.4e4d	60		rts		        RTS
.4e4e	98		tya		s4E4E   TYA
.4e4f	48		pha		        PHA
.4e50	a0 00		ldy #$00	b4E50   LDY #$00
.4e52	b1 10		lda ($10),y	        LDA (r7L),Y
.4e54	29 7f		and #$7f	        AND #$7F
.4e56	d0 06		bne $4e5e	        BNE b4E5E
.4e58	20 f1 4d	jsr $4df1	        JSR s4DF1
.4e5b	b8		clv		        CLV
.4e5c	50 f2		bvc $4e50	        BVC b4E50
.4e5e	a2 00		ldx #$00	b4E5E   LDX #$00
.4e60	a5 05		lda $05		        LDA r1H
.4e62	c9 6d		cmp #$6d	        CMP #$6D
.4e64	f0 17		beq $4e7d	        BEQ b4E7D
.4e66	b1 10		lda ($10),y	        LDA (r7L),Y
.4e68	30 04		bmi $4e6e	        BMI b4E6E
.4e6a	a9 00		lda #$00	        LDA #$00
.4e6c	f0 07		beq $4e75	        BEQ b4E75
.4e6e	b1 04		lda ($04),y	b4E6E   LDA (r1L),Y
.4e70	48		pha		        PHA
.4e71	20 f4 4d	jsr $4df4	        JSR s4DF4    ;increment r1 (word)
.4e74	68		pla		        PLA
.4e75	aa		tax		b4E75   TAX
.4e76	b1 10		lda ($10),y	        LDA (r7L),Y
.4e78	38		sec		        SEC
.4e79	e9 01		sbc #$01	        SBC #$01
.4e7b	91 10		sta ($10),y	        STA (r7L),Y
.4e7d	68		pla		b4E7D   PLA
.4e7e	a8		tay		        TAY
.4e7f	8a		txa		        TXA
.4e80	91 0c		sta ($0c),y	        STA (r5L),Y
.4e82	98		tya		        TYA
.4e83	60		rts		        RTS
.4e84	8a		txa		s4E84   TXA
.4e85	48		pha		        PHA
.4e86	a9 66		lda #$66	        LDA #>p6600
.4e88	85 05		sta $05		        STA r1H
.4e8a	a9 00		lda #$00	        LDA #<p6600
.4e8c	85 04		sta $04		        STA r1L
.4e8e	a0 00		ldy #$00	        LDY #$00
.4e90	bd 9f 4e	lda $4e9f,x	b4E90   LDA f4E9F,X
.4e93	99 06 00	sta $0006,y	        STA r2L,Y
.4e96	e8		inx		        INX
.4e97	c8		iny		        INY
.4e98	c0 04		cpy #$04	        CPY #$04
.4e9a	d0 f4		bne $4e90	        BNE b4E90
.4e9c	68		pla		        PLA
.4e9d	aa		tax		        TAX
.4e9e	60		rts		        RTS
>4e9f	08 20 19 68 00 0c 0b		f4E9F   .BYTE $08,$20,$19,$68,$00,$0C,$0B
>4ea6	3a 04 0c 0c 64 06 0c 07		a4EA6   .BYTE $3A,$04,$0C,$0C,$64,$06,$0C,$07
>4eae	4c 0a 0c 09 64 0d 0c 0b		        .BYTE $4C,$0A,$0C,$09,$64,$0D,$0C,$0B
>4eb6	2c 11 0c 09 1e 14 0c 0a		        .BYTE $2C,$11,$0C,$09,$1E,$14,$0C,$0A
>4ebe	3e 09 77 16 44			        .BYTE $3E,$09,$77,$16,$44
.4ec3	48		pha		        PHA
.4ec4	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.4ec7	68		pla		        PLA
.4ec8	38		sec		        SEC
.4ec9	e9 04		sbc #$04	        SBC #$04
.4ecb	85 0e		sta $0e		        STA r6L
.4ecd	0a		asl a		        ASL
.4ece	0a		asl a		        ASL
.4ecf	0a		asl a		        ASL
.4ed0	0a		asl a		        ASL
.4ed1	18		clc		        CLC
.4ed2	65 0e		adc $0e		        ADC r6L
.4ed4	69 66		adc #$66	        ADC #$66
.4ed6	85 0e		sta $0e		        STA r6L      ;filename pointer r6
.4ed8	a9 00		lda #$00	        LDA #$00
.4eda	69 0a		adc #$0a	        ADC #$0A
.4edc	85 0f		sta $0f		        STA r6H      ;filename pointer r6
.4ede	20 0b c2	jsr $c20b	        JSR FindFile
.4ee1	20 9c 59	jsr $599c	        JSR s599C
.4ee4	20 f6 3f	jsr $3ff6	j4EE4   JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.4ee7	20 01 5a	jsr $5a01	        JSR s5A01    ;Load directory entry buffer to r9
.4eea	a2 00		ldx #$00	        LDX #$00
.4eec	86 16		stx $16		        STX r10L     ;always set to zero for desk accessory
.4eee	86 02		stx $02		        STX r0L
.4ef0	ad 96 4c	lda $4c96	        LDA a4C96
.4ef3	48		pha		        PHA
.4ef4	ad 95 4c	lda $4c95	        LDA mnuStructViewIcon
.4ef7	48		pha		        PHA
.4ef8	20 17 c2	jsr $c217	        JSR LdDeskAcc
.4efb	a9 80		lda #$80	        LDA #$80     ;draw on foreground screen
.4efd	85 2f		sta $2f		        STA displayBufferOn
.4eff	68		pla		        PLA
.4f00	8d 95 4c	sta $4c95	        STA mnuStructViewIcon
.4f03	68		pla		        PLA
.4f04	8d 96 4c	sta $4c96	        STA a4C96
.4f07	8a		txa		        TXA
.4f08	48		pha		        PHA
.4f09	ad 1e 85	lda $851e	        LDA screencolors ;restore screen colors after desk accessory returns
.4f0c	8d 16 4f	sta $4f16	        STA a4F16
.4f0f	20 b4 c1	jsr $c1b4	        JSR i_FillRam
>4f12	e8 03 00 8c			        .BYTE $E8,$03,$00,$8C ;count=1000 bytes, start=$8c00, fill= screencolors
>4f16	00				a4F16   .BYTE $00
.4f17	68		pla		        PLA
.4f18	f0 04		beq $4f1e	        BEQ b4F1E
.4f1a	aa		tax		        TAX
.4f1b	20 9a 25	jsr $259a	        JSR s259A
.4f1e	4c 75 51	jmp $5175	b4F1E   JMP p5175    ;DESKTOP MAIN ENTRY POINT ==================================
.4f21	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.4f24	ad 4c 02	lda $024c	j4F24   LDA a024C
.4f27	f0 10		beq $4f39	        BEQ b4F39
.4f29	20 f3 40	jsr $40f3	        JSR s40F3
.4f2c	ad 89 84	lda $8489	        LDA curDrive
.4f2f	c9 08		cmp #$08	        CMP #$08
.4f31	f0 03		beq $4f36	        BEQ b4F36
.4f33	4c 34 53	jmp $5334	        JMP j5334
.4f36	4c 31 53	jmp $5331	b4F36   JMP j5331
.4f39	20 c3 47	jsr $47c3	b4F39   JSR s47C3
.4f3c	20 e3 47	jsr $47e3	        JSR s47E3
.4f3f	20 6e 31	jsr $316e	        JSR b316E    ;Open a disk
.4f42	4c 64 31	jmp $3164	        JMP b3164
.4f45	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.4f48	ad 8a 84	lda $848a	        LDA diskOpenFlg
.4f4b	d0 01		bne $4f4e	        BNE b4F4E
.4f4d	60		rts		        RTS
.4f4e	20 7e 23	jsr $237e	b4F4E   JSR s237E
.4f51	20 f6 3f	jsr $3ff6	        JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.4f54	20 47 c2	jsr $c247	        JSR GetDirHead
.4f57	8a		txa		        TXA
.4f58	d0 7c		bne $4fd6	        BNE b4FD6
.4f5a	20 4c 50	jsr $504c	        JSR s504C
.4f5d	c9 03		cmp #$03	        CMP #$03
.4f5f	f0 02		beq $4f63	        BEQ b4F63
.4f61	b0 45		bcs $4fa8	        BCS b4FA8
.4f63	8d 20 05	sta $0520	b4F63   STA a0520
.4f66	20 8e 33	jsr $338e	        JSR s338E    ;Calculate blocks free
.4f69	a5 02		lda $02		        LDA r0L
.4f6b	ac 8b 84	ldy $848b	        LDY isGEOS
.4f6e	f0 02		beq $4f72	        BEQ b4F72
.4f70	29 fe		and #$fe	        AND #$FE
.4f72	05 03		ora $03		b4F72   ORA r0H
.4f74	d0 0e		bne $4f84	        BNE b4F84
.4f76	a2 50		ldx #$50	        LDX #$50
.4f78	a9 3a		lda #$3a	        LDA #$3A
.4f7a	20 83 24	jsr $2483	        JSR s2483    ;COMMON DIALOG BOX ROUTINE ============================
.4f7d	a5 02		lda $02		        LDA r0L
.4f7f	c9 03		cmp #$03	        CMP #$03
.4f81	f0 01		beq $4f84	        BEQ b4F84
.4f83	60		rts		        RTS
.4f84	ad bd 82	lda $82bd	b4F84   LDA a82BD
.4f87	c9 42		cmp #$42	        CMP #$42
.4f89	d0 03		bne $4f8e	        BNE b4F8E
.4f8b	4c da 50	jmp $50da	        JMP j50DA
.4f8e	ad 89 84	lda $8489	b4F8E   LDA curDrive
.4f91	85 79		sta $79		        STA a79
.4f93	85 fe		sta $fe		        STA aFE
.4f95	ac 8d 84	ldy $848d	        LDY numDrives
.4f98	c0 02		cpy #$02	        CPY #$02
.4f9a	90 02		bcc $4f9e	        BCC b4F9E
.4f9c	49 01		eor #$01	        EOR #$01
.4f9e	85 70		sta $70		b4F9E   STA a70
.4fa0	a8		tay		        TAY
.4fa1	b9 86 84	lda $8486,y	        LDA f8486,Y
.4fa4	29 0f		and #$0f	        AND #$0F
.4fa6	c9 03		cmp #$03	        CMP #$03
.4fa8	f0 02		beq $4fac	b4FA8   BEQ b4FAC
.4faa	b0 4c		bcs $4ff8	        BCS b4FF8
.4fac	cd 20 05	cmp $0520	b4FAC   CMP a0520
.4faf	f0 09		beq $4fba	        BEQ b4FBA
.4fb1	c9 03		cmp #$03	        CMP #$03
.4fb3	f0 43		beq $4ff8	        BEQ b4FF8
.4fb5	cd 20 05	cmp $0520	        CMP a0520
.4fb8	90 3e		bcc $4ff8	        BCC b4FF8
.4fba	8d 21 05	sta $0521	b4FBA   STA a0521
.4fbd	b9 86 84	lda $8486,y	        LDA f8486,Y
.4fc0	30 15		bmi $4fd7	        BMI b4FD7
.4fc2	98		tya		        TYA
.4fc3	18		clc		        CLC
.4fc4	69 39		adc #$39	        ADC #$39
.4fc6	8d 08 2e	sta $2e08	        STA a2E08
.4fc9	a2 50		ldx #$50	        LDX #$50
.4fcb	a9 a8		lda #$a8	        LDA #$A8
.4fcd	20 83 24	jsr $2483	        JSR s2483    ;COMMON DIALOG BOX ROUTINE ============================
.4fd0	a5 02		lda $02		        LDA r0L
.4fd2	c9 02		cmp #$02	        CMP #$02
.4fd4	d0 01		bne $4fd7	        BNE b4FD7
.4fd6	60		rts		b4FD6   RTS
.4fd7	a5 70		lda $70		b4FD7   LDA a70
.4fd9	20 f1 1a	jsr $1af1	        JSR s1AF1
.4fdc	20 e1 c1	jsr $c1e1	        JSR NewDisk  ;     tell the turbo software that a new disk has been inserted into the drive
.4fdf	8a		txa		        TXA
.4fe0	d0 06		bne $4fe8	        BNE b4FE8
.4fe2	20 47 c2	jsr $c247	        JSR GetDirHead ;     read directory header and BAM from disk
.4fe5	8a		txa		        TXA
.4fe6	f0 18		beq $5000	        BEQ b5000
.4fe8	20 91 54	jsr $5491	b4FE8   JSR s5491
.4feb	8a		txa		        TXA
.4fec	f0 e9		beq $4fd7	        BEQ b4FD7
.4fee	e0 0c		cpx #$0c	        CPX #$0C
.4ff0	f0 42		beq $5034	        BEQ j5034
.4ff2	20 9a 25	jsr $259a	        JSR s259A
.4ff5	b8		clv		        CLV
.4ff6	50 3c		bvc $5034	        BVC j5034
.4ff8	a0 03		ldy #$03	b4FF8   LDY #$03
.4ffa	20 6b 24	jsr $246b	        JSR s246B
.4ffd	b8		clv		        CLV
.4ffe	50 34		bvc $5034	        BVC j5034
.5000	ad bd 82	lda $82bd	b5000   LDA a82BD
.5003	f0 06		beq $500b	        BEQ b500B
.5005	20 da 50	jsr $50da	        JSR j50DA
.5008	b8		clv		        CLV
.5009	50 29		bvc $5034	        BVC j5034
.500b	ad 21 05	lda $0521	b500B   LDA a0521
.500e	c9 02		cmp #$02	        CMP #$02
.5010	d0 0f		bne $5021	        BNE b5021
.5012	2c 03 82	bit $8203	        BIT a8203
.5015	30 0a		bmi $5021	        BMI b5021
.5017	a9 01		lda #$01	        LDA #$01
.5019	8d 21 05	sta $0521	        STA a0521
.501c	cd 20 05	cmp $0520	        CMP a0520
.501f	d0 d7		bne $4ff8	        BNE b4FF8
.5021	20 60 50	jsr $5060	b5021   JSR s5060
.5024	a2 50		ldx #$50	        LDX #$50
.5026	a9 ba		lda #$ba	        LDA #$BA
.5028	20 83 24	jsr $2483	        JSR s2483    ;COMMON DIALOG BOX ROUTINE ============================
.502b	a5 02		lda $02		        LDA r0L
.502d	c9 02		cmp #$02	        CMP #$02
.502f	f0 03		beq $5034	        BEQ j5034
.5031	20 56 19	jsr $1956	        JSR s1956
.5034	20 dc 23	jsr $23dc	j5034   JSR s23DC
.5037	4c 75 51	jmp $5175	        JMP p5175    ;DESKTOP MAIN ENTRY POINT ==================================
>503a	81 0b 0c 20 cd 30 0b 0c		        .BYTE $81,$0B,$0C,$20,$CD,$30,$0B,$0C
>5042	30 dd 30 03 01 48 04 11		        .BYTE $30,$DD,$30,$03,$01,$48,$04,$11
>504a	48 00				        .BYTE $48,$00
.504c	ac 89 84	ldy $8489	s504C   LDY curDrive
.504f	b9 86 84	lda $8486,y	        LDA f8486,Y
.5052	29 0f		and #$0f	        AND #$0F
.5054	c9 02		cmp #$02	        CMP #$02
.5056	d0 07		bne $505f	        BNE b505F
.5058	2c 03 82	bit $8203	        BIT a8203
.505b	30 02		bmi $505f	        BMI b505F
.505d	a9 01		lda #$01	        LDA #$01
.505f	60		rts		b505F   RTS
.5060	20 db 59	jsr $59db	s5060   JSR s59DB    ;load $8290 to r2
.5063	20 62 25	jsr $2562	        JSR s2562    ;load r6 with $8be4
.5066	a0 0e		ldy #$0e	        LDY #$0E
.5068	20 16 24	jsr $2416	        JSR s2416
.506b	a2 06		ldx #$06	        LDX #$06     ;zero page address of pointer to source string
.506d	a9 8b		lda #$8b	        LDA #>p8BBC
.506f	85 09		sta $09		        STA r3H
.5071	a9 bc		lda #$bc	        LDA #<p8BBC
.5073	85 08		sta $08		        STA r3L
.5075	a0 08		ldy #$08	        LDY #$08     ;zero page address of pointer to destination buffer
.5077	a9 12		lda #$12	        LDA #$12     ;length of string to copy
.5079	20 68 c2	jsr $c268	        JSR CopyFString ;     copy string
.507c	a9 02		lda #$02	        LDA #>a0200
.507e	85 07		sta $07		        STA r2H
.5080	a9 00		lda #$00	        LDA #<a0200
.5082	85 06		sta $06		        STA r2L
.5084	a9 8b		lda #$8b	        LDA #>p8BD0
.5086	85 11		sta $11		        STA r7H
.5088	a9 d0		lda #$d0	        LDA #<p8BD0
.508a	85 10		sta $10		        STA r7L
.508c	a2 06		ldx #$06	        LDX #$06
.508e	a0 10		ldy #$10	        LDY #$10
.5090	20 16 24	jsr $2416	        JSR s2416
.5093	a9 8b		lda #$8b	        LDA #>p8BBC
.5095	8d f9 03	sta $03f9	        STA a03F9
.5098	a9 bc		lda #$bc	        LDA #<p8BBC
.509a	8d f8 03	sta $03f8	        STA a03F8
.509d	a9 02		lda #$02	        LDA #>a0200
.509f	8d f7 03	sta $03f7	        STA a03F7
.50a2	a9 00		lda #$00	        LDA #<a0200
.50a4	8d f6 03	sta $03f6	        STA a03F6
.50a7	60		rts		        RTS
>50a8	81 0b 10 20 c9 2d 0b 10		        .BYTE $81,$0B,$10,$20,$C9,$2D,$0B,$10
>50b0	30 fd 2d 01 01 48 02 11		        .BYTE $30,$FD,$2D,$01,$01,$48,$02,$11
>50b8	48 00 81 0b 10 10 24 2e		        .BYTE $48,$00,$81,$0B,$10,$10,$24,$2E
>50c0	0c 10 20 0e 0b 10 30 39		        .BYTE $0C,$10,$20,$0E,$0B,$10,$30,$39
>50c8	2e 0c 10 40 10 03 01 48		        .BYTE $2E,$0C,$10,$40,$10,$03,$01,$48
>50d0	02 11 48 00			        .BYTE $02,$11,$48,$00
>50d4	a0				s50D4   .BYTE $A0
>50d5	97 a2				        .BYTE $97,$A2
>50d7	2b d0				        .BYTE $2B,$D0
=20698					j50DA   =*+$01
.50d9	35 c9		and $c9,x	        AND fC9,X
>50db	42				        .BYTE $42
.50dc	d0 06		bne $50e4	        BNE b50E4
.50de	a0 7b		ldy #$7b	        LDY #$7B
.50e0	a2 2e		ldx #$2e	        LDX #$2E
.50e2	d0 2b		bne $510f	        BNE b510F
.50e4	a0 8f		ldy #$8f	b50E4   LDY #$8F
.50e6	a2 2e		ldx #$2e	        LDX #$2E
.50e8	d0 25		bne $510f	        BNE b510F
.50ea	a5 74		lda $74		        LDA a74
.50ec	f0 01		beq $50ef	        BEQ b50EF
.50ee	60		rts		        RTS
.50ef	68		pla		b50EF   PLA
.50f0	68		pla		        PLA
.50f1	a0 9e		ldy #$9e	s50F1   LDY #$9E
.50f3	a2 2e		ldx #$2e	        LDX #$2E
.50f5	d0 18		bne $510f	        BNE b510F
.50f7	a0 36		ldy #$36	        LDY #$36
.50f9	a2 2c		ldx #$2c	        LDX #$2C
.50fb	d0 12		bne $510f	        BNE b510F
.50fd	20 ed 46	jsr $46ed	        JSR s46ED    ;r9 = $77/$76, A=*(r9+Y)
.5100	c9 04		cmp #$04	        CMP #$04     ;is this a SYSTEM file type?
.5102	f0 05		beq $5109	        BEQ b5109    ;if so, skip ahead
.5104	c9 0c		cmp #$0c	        CMP #$0C
.5106	f0 01		beq $5109	        BEQ b5109    ;this is a SYSTEM file type
.5108	60		rts		        RTS
.5109	68		pla		b5109   PLA
.510a	68		pla		        PLA
.510b	a0 ae		ldy #$ae	j510B   LDY #<p2CAE  ;Y = low byte pointer to "a System Boot file"
.510d	a2 2c		ldx #$2c	        LDX #>p2CAE  ;X = low byte pointer to "a System Boot file"
.510f	84 0c		sty $0c		b510F   STY r5L
.5111	86 0d		stx $0d		        STX r5H
.5113	a2 51		ldx #$51	        LDX #$51
.5115	a9 1d		lda #$1d	        LDA #$1D
.5117	20 83 24	jsr $2483	        JSR s2483    ;COMMON DIALOG BOX ROUTINE ============================
.511a	a2 0c		ldx #$0c	        LDX #$0C
.511c	60		rts		        RTS
>511d	81 0b 18 10 4a 2e 0b 10		        .BYTE $81,$0B,$18,$10,$4A,$2E,$0B,$10
>5125	20 63 2e 0c 10 30 0c 01		        .BYTE $20,$63,$2E,$0C,$10,$30,$0C,$01
>512d	11 48 00			        .BYTE $11,$48,$00
.5130	a5 76		lda $76		        LDA a76
.5132	85 14		sta $14		        STA r9L
.5134	85 0e		sta $0e		        STA r6L
.5136	85 10		sta $10		        STA r7L
.5138	a5 77		lda $77		        LDA a77
.513a	85 15		sta $15		        STA r9H
.513c	85 0f		sta $0f		        STA r6H
.513e	85 11		sta $11		        STA r7H
.5140	c9 6d		cmp #$6d	        CMP #$6D
.5142	b0 03		bcs $5147	        BCS b5147
.5144	20 bc 45	jsr $45bc	        JSR s45BC
.5147	60		rts		b5147   RTS
.5148	48		pha		        PHA          ;A= (0=icon, 1=size, 2=type, 3=date, 4=name)
.5149	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.514c	68		pla		        PLA
.514d	c5 7a		cmp $7a		        CMP padViewMode ;is the selected view mode same as current?
.514f	f0 1a		beq $516b	        BEQ b516B    ;exit if so
.5151	ae 8a 84	ldx $848a	        LDX diskOpenFlg
.5154	f0 15		beq $516b	        BEQ b516B
.5156	85 7a		sta $7a		        STA padViewMode ;save the new view mode
.5158	c9 00		cmp #$00	        CMP #$00
.515a	d0 03		bne $515f	        BNE b515F
.515c	20 26 34	jsr $3426	        JSR s3426
.515f	20 f6 3f	jsr $3ff6	b515F   JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.5162	20 6c 58	jsr $586c	        JSR s586C    ;changing pad page
.5165	20 4c 3b	jsr $3b4c	        JSR s3B4C
.5168	20 a6 4b	jsr $4ba6	        JSR s4BA6
.516b	60		rts		b516B   RTS
.516c	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.516f	20 f3 40	jsr $40f3	        JSR s40F3
.5172	4c 75 51	jmp $5175	        JMP p5175    ;DESKTOP MAIN ENTRY POINT ==================================
.5175	a2 48		ldx #$48	p5175   LDX #$48
.5177	a9 00		lda #$00	        LDA #$00
.5179	9d ff 01	sta $01ff,x	b5179   STA f01FF,X
.517c	ca		dex		        DEX
.517d	d0 fa		bne $5179	        BNE b5179
.517f	a9 00		lda #$00	        LDA #$00
.5181	a0 03		ldy #$03	        LDY #$03
.5183	99 fb 00	sta $00fb,y	b5183   STA f00FB,Y
.5186	88		dey		        DEY
.5187	10 fa		bpl $5183	        BPL b5183
.5189	a0 0f		ldy #$0f	        LDY #$0F
.518b	99 70 00	sta $0070,y	b518B   STA f0070,Y
.518e	88		dey		        DEY
.518f	10 fa		bpl $518b	        BPL b518B
.5191	8d b5 84	sta $84b5	        STA iconSelFlag
.5194	8d ed 04	sta $04ed	        STA a04ED
.5197	8d 4c 02	sta $024c	        STA a024C
.519a	8d 48 02	sta $0248	        STA a0248
.519d	8d 72 18	sta $1872	        STA a1872
.51a0	8d f0 0a	sta $0af0	        STA a0AF0
.51a3	a9 ff		lda #$ff	        LDA #$FF
.51a5	8d 4d 02	sta $024d	        STA a024D
.51a8	8d ec 04	sta $04ec	        STA a04EC
.51ab	20 ed 51	jsr $51ed	        JSR s51ED
.51ae	a9 52		lda #$52	        LDA #>p5202
.51b0	85 03		sta $03		        STA r0H
.51b2	a9 02		lda #$02	        LDA #<p5202
.51b4	85 02		sta $02		        STA r0L
.51b6	20 81 c1	jsr $c181	        JSR InitRam
.51b9	20 15 25	jsr $2515	        JSR s2515
.51bc	20 33 25	jsr $2533	        JSR s2533    ;compare version to 32
.51bf	b0 03		bcs $51c4	        BCS b51C4    ;Display main menu, icons, clock, activate handlers
.51c1	20 57 55	jsr $5557	        JSR s5557
.51c4	a9 4b		lda #$4b	b51C4   LDA #>mnuStruct
.51c6	85 03		sta $03		        STA r0H
.51c8	a9 f7		lda #$f7	        LDA #<mnuStruct
.51ca	85 02		sta $02		        STA r0L
.51cc	a9 02		lda #$02	        LDA #$02     ;POINTER_OVER=2 (2nd item)
.51ce	20 51 c1	jsr $c151	        JSR DoMenu   ;Draw and active the main menu
.51d1	20 fa 46	jsr $46fa	        JSR s46FA    ;Display trash and printer icons and activate handlers
.51d4	20 06 56	jsr $5606	        JSR s5606    ;Draw Clock Rectangle
.51d7	20 0a 5a	jsr $5a0a	        JSR s5A0A    ;INITIALIZE DESK TOP (After menu built)
.51da	e0 21		cpx #$21	        CPX #$21
.51dc	d0 03		bne $51e1	        BNE b51E1
.51de	20 01 36	jsr $3601	        JSR s3601
.51e1	20 9c 59	jsr $599c	b51E1   JSR s599C
.51e4	a9 ff		lda #$ff	        LDA #$FF
.51e6	8d 49 02	sta $0249	        STA a0249
.51e9	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.51ec	60		rts		        RTS
.51ed	a2 90		ldx #$90	s51ED   LDX #$90
.51ef	a9 00		lda #$00	        LDA #$00
.51f1	9d 33 03	sta $0333,x	b51F1   STA f0333,X
.51f4	ca		dex		        DEX
.51f5	d0 fa		bne $51f1	        BNE b51F1
.51f7	a2 ff		ldx #$ff	        LDX #$FF
.51f9	a9 00		lda #$00	        LDA #$00
.51fb	9d 25 05	sta $0525,x	b51FB   STA a0525,X
.51fe	ca		dex		        DEX
.51ff	d0 fa		bne $51fb	        BNE b51FB
.5201	60		rts		        RTS
>5202	a9 84 02 c6 40			p5202   .BYTE $A9,$84,$02,$C6,$40
>5207	9b 84 02			        .BYTE $9B,$84,$02
.520a	20 52 a3	jsr $a352	        JSR eA352
.520d	84 02		sty $02		        STY r0L
.520f	41 52		eor ($52,x)	        EOR (p52,X)
.5211	8d 84 01	sta $0184	        STA a0184
.5214	01 2f		ora ($2f,x)	        ORA (displayBufferOn,X)
.5216	00		brk #		        BRK
.5217	01 80		ora ($80,x)	        ORA (p80,X)
.5219	b1 84		lda ($84),y	        LDA (p84),Y
>521b	02				        .BYTE $02
>521c	77 4d				        .BYTE $77,$4D
.521e	00		brk #		        BRK
.521f	00		brk #		        BRK
.5220	ad 25 05	lda $0525	        LDA a0525
.5223	f0 1b		beq $5240	        BEQ b5240
.5225	a9 01		lda #$01	        LDA #$01
.5227	85 08		sta $08		        STA r3L
.5229	a5 3c		lda $3c		        LDA mouseYPos
.522b	38		sec		        SEC
.522c	e9 08		sbc #$08	        SBC #$08
.522e	85 0c		sta $0c		        STA r5L
.5230	38		sec		        SEC
.5231	a5 3a		lda $3a		        LDA mouseXPosLo
.5233	e9 08		sbc #$08	        SBC #$08
.5235	85 0a		sta $0a		        STA r4L
.5237	a5 3b		lda $3b		        LDA mouseXPosHi
.5239	e9 00		sbc #$00	        SBC #$00
.523b	85 0b		sta $0b		        STA r4H
.523d	4c cf c1	jmp $c1cf	        JMP PosSprite
.5240	60		rts		b5240   RTS
.5241	ad 4c 02	lda $024c	        LDA a024C
.5244	0d b7 84	ora $84b7	        ORA menuNumber ;depth of current menu
.5247	d0 f7		bne $5240	        BNE b5240
.5249	ad 04 85	lda $8504	        LDA keyData
.524c	ae 8a 84	ldx $848a	        LDX diskOpenFlg
.524f	f0 7a		beq $52cb	        BEQ b52CB
.5251	a6 7a		ldx $7a		        LDX padViewMode
.5253	d0 76		bne $52cb	        BNE b52CB
.5255	a0 0e		ldy #$0e	        LDY #$0E
.5257	d9 6a 52	cmp $526a,y	b5257   CMP f526A,Y
.525a	f0 05		beq $5261	        BEQ b5261
.525c	88		dey		        DEY
.525d	10 f8		bpl $5257	        BPL b5257
.525f	30 36		bmi $5297	        BMI b5297
.5261	be 88 52	ldx $5288,y	b5261   LDX f5288,Y
.5264	b9 79 52	lda $5279,y	        LDA f5279,Y
.5267	4c d8 c1	jmp $c1d8	        JMP CallRoutine
>526a	fa e8 ed e4 f1 f0 f5 f3		f526A   .BYTE $FA,$E8,$ED,$E4,$F1,$F0,$F5,$F3
>5272	f4 f7 f8 f9 e7 10 11		        .BYTE $F4,$F7,$F8,$F9,$E7,$10,$11
>5279	32 48 3f 70 d3 61 9d ee		f5279   .BYTE $32,$48,$3F,$70,$D3,$61,$9D,$EE
>5281	f7 b8 c1 ca 25 b0 a5		        .BYTE $F7,$B8,$C1,$CA,$25,$B0,$A5
>5288	3c 55 55 54 54 54 54 54		f5288   .BYTE $3C,$55,$55,$54,$54,$54,$54,$54
>5290	54 54 54 54 41 4a 4a		        .BYTE $54,$54,$54,$54,$41,$4A,$4A
.5297	c9 30		cmp #$30	b5297   CMP #$30
.5299	d0 04		bne $529f	        BNE b529F
.529b	a9 09		lda #$09	        LDA #$09
.529d	d0 18		bne $52b7	        BNE b52B7
.529f	a8		tay		b529F   TAY
.52a0	c9 3a		cmp #$3a	        CMP #$3A
.52a2	b0 05		bcs $52a9	        BCS b52A9
.52a4	38		sec		        SEC
.52a5	e9 31		sbc #$31	        SBC #$31
.52a7	b0 0e		bcs $52b7	        BCS b52B7
.52a9	98		tya		b52A9   TYA
.52aa	c9 29		cmp #$29	        CMP #$29
.52ac	b0 0c		bcs $52ba	        BCS b52BA
.52ae	c9 21		cmp #$21	        CMP #$21
.52b0	90 08		bcc $52ba	        BCC b52BA
.52b2	29 0f		and #$0f	        AND #$0F
.52b4	18		clc		        CLC
.52b5	69 09		adc #$09	        ADC #$09
.52b7	4c e4 4a	jmp $4ae4	b52B7   JMP s4AE4
.52ba	98		tya		b52BA   TYA
.52bb	c9 a1		cmp #$a1	        CMP #$A1
.52bd	90 0c		bcc $52cb	        BCC b52CB
.52bf	c9 a9		cmp #$a9	        CMP #$A9
.52c1	90 45		bcc $5308	        BCC b5308
.52c3	c9 b1		cmp #$b1	        CMP #$B1
.52c5	90 04		bcc $52cb	        BCC b52CB
.52c7	c9 b9		cmp #$b9	        CMP #$B9
.52c9	90 42		bcc $530d	        BCC b530D
.52cb	a0 0c		ldy #$0c	b52CB   LDY #$0C
.52cd	d9 e1 52	cmp $52e1,y	b52CD   CMP f52E1,Y
.52d0	f0 05		beq $52d7	        BEQ b52D7
.52d2	88		dey		        DEY
.52d3	10 f8		bpl $52cd	        BPL b52CD
.52d5	30 09		bmi $52e0	        BMI b52E0
.52d7	be ee 52	ldx $52ee,y	b52D7   LDX f52EE,Y
.52da	b9 fb 52	lda $52fb,y	        LDA f52FB,Y
.52dd	20 d8 c1	jsr $c1d8	        JSR CallRoutine
.52e0	60		rts		b52E0   RTS
>52e1	e1 e2 c1 c2 e3 e9 ee eb		f52E1   .BYTE $E1,$E2,$C1,$C2,$E3,$E9,$EE,$EB
>52e9	ef e5 f6 e6 f2			        .BYTE $EF,$E5,$F6,$E6,$F2
>52ee	37 37 53 53 35 54 55 4f		f52EE   .BYTE $37,$37,$53,$53,$35,$54,$55,$4F
>52f6	4f 54 54 54 51			        .BYTE $4F,$54,$54,$54,$51
>52fb	a2 a6 31 34 fc e5 36 48		f52FB   .BYTE $A2,$A6,$31,$34,$FC,$E5,$36,$48
>5303	39 a6 7f 88 6f			        .BYTE $39,$A6,$7F,$88,$6F
.5308	38		sec		b5308   SEC
.5309	e9 99		sbc #$99	        SBC #$99
.530b	d0 03		bne $5310	        BNE b5310
.530d	38		sec		b530D   SEC
.530e	e9 b1		sbc #$b1	        SBC #$B1
.5310	a8		tay		b5310   TAY
.5311	20 f3 40	jsr $40f3	        JSR s40F3
.5314	98		tya		        TYA
.5315	20 3a 48	jsr $483a	        JSR s483A
.5318	d0 01		bne $531b	        BNE b531B
.531a	60		rts		        RTS
.531b	98		tya		b531B   TYA
.531c	85 02		sta $02		        STA r0L
.531e	20 d5 3f	jsr $3fd5	        JSR s3FD5
.5321	e0 ff		cpx #$ff	        CPX #$FF
.5323	f0 06		beq $532b	        BEQ b532B
.5325	20 7e 3e	jsr $3e7e	        JSR s3E7E
.5328	4c 6d 3f	jmp $3f6d	        JMP j3F6D
.532b	20 0a 3f	jsr $3f0a	b532B   JSR s3F0A
.532e	4c 2f 3f	jmp $3f2f	        JMP j3F2F
.5331	a9 08		lda #$08	j5331   LDA #$08
=21300					j5334   =*+$01
.5333	2c a9 09	bit $09a9	        BIT a09A9
.5336	ae 90 84	ldx $8490	        LDX driveType_10
.5339	f0 38		beq $5373	        BEQ b5373
.533b	2c c4 88	bit $88c4	        BIT sysRAMFlg
.533e	50 33		bvc $5373	        BVC b5373
.5340	48		pha		        PHA
.5341	20 f6 3f	jsr $3ff6	        JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.5344	68		pla		        PLA
.5345	85 16		sta $16		        STA r10L
.5347	20 f1 1a	jsr $1af1	        JSR s1AF1
.534a	ad 91 84	lda $8491	        LDA driveType_11
.534d	d0 24		bne $5373	        BNE b5373
.534f	a9 0b		lda #$0b	        LDA #$0B
.5351	20 74 53	jsr $5374	        JSR s5374
.5354	a9 0a		lda #$0a	        LDA #$0A
.5356	20 f1 1a	jsr $1af1	        JSR s1AF1
.5359	a5 16		lda $16		        LDA r10L
.535b	20 74 53	jsr $5374	        JSR s5374
.535e	a9 0b		lda #$0b	        LDA #$0B
.5360	20 f1 1a	jsr $1af1	        JSR s1AF1
.5363	a9 0a		lda #$0a	        LDA #$0A
.5365	20 74 53	jsr $5374	        JSR s5374
.5368	a5 16		lda $16		        LDA r10L
.536a	20 f1 1a	jsr $1af1	        JSR s1AF1
.536d	20 b8 3a	jsr $3ab8	        JSR j3AB8
.5370	4c 75 51	jmp $5175	        JMP p5175    ;DESKTOP MAIN ENTRY POINT ==================================
.5373	60		rts		b5373   RTS
.5374	48		pha		s5374   PHA
.5375	a8		tay		        TAY
.5376	b9 c4 53	lda $53c4,y	        LDA f53C4,Y
.5379	85 04		sta $04		        STA r1L      ;stash to REM address - lo
.537b	b9 c8 53	lda $53c8,y	        LDA f53C8,Y
.537e	85 05		sta $05		        STA r1H      ;stash to REM address - hi
.5380	a9 90		lda #$90	        LDA #>p9000
.5382	85 03		sta $03		        STA r0H      ;copy from cbm $9000 (hi byte)
.5384	a9 00		lda #$00	        LDA #<p9000
.5386	85 02		sta $02		        STA r0L      ;copy from cbm $9000 (lo byte)
.5388	a9 0d		lda #$0d	        LDA #>p0D80
.538a	85 07		sta $07		        STA r2H      ;copy $d80 (3456) bytes - hi
.538c	a9 80		lda #$80	        LDA #<p0D80
.538e	85 06		sta $06		        STA r2L      ;copy $d80 (3456) bytes - lo
.5390	a9 00		lda #$00	        LDA #$00
.5392	85 08		sta $08		        STA r3L      ;stash to REU bank 0
.5394	20 c8 c2	jsr $c2c8	        JSR StashRAM
.5397	68		pla		        PLA
.5398	85 02		sta $02		        STA r0L
.539a	ad 89 84	lda $8489	        LDA curDrive
.539d	48		pha		        PHA
.539e	a8		tay		        TAY
.539f	b9 bf 88	lda $88bf,y	        LDA driveData,Y
.53a2	48		pha		        PHA
.53a3	b9 86 84	lda $8486,y	        LDA f8486,Y
.53a6	48		pha		        PHA
.53a7	10 08		bpl $53b1	        BPL b53B1
.53a9	a5 02		lda $02		        LDA r0L
.53ab	20 f1 1a	jsr $1af1	        JSR s1AF1
.53ae	b8		clv		        CLV
.53af	50 05		bvc $53b6	        BVC b53B6
.53b1	a5 02		lda $02		b53B1   LDA r0L      ;change current drive number to A
.53b3	20 bc c2	jsr $c2bc	        JSR ChangeDiskDevice
.53b6	ac 89 84	ldy $8489	b53B6   LDY curDrive
.53b9	68		pla		        PLA
.53ba	99 86 84	sta $8486,y	        STA f8486,Y
.53bd	68		pla		        PLA
.53be	99 bf 88	sta $88bf,y	        STA driveData,Y
.53c1	68		pla		        PLA
.53c2	a8		tay		        TAY
=21444					f53C4   =*+$01
.53c3	a9 00		lda #$00	        LDA #$00
.53c5	99 bf 88	sta $88bf,y	        STA driveData,Y
.53c8	99 86 84	sta $8486,y	f53C8   STA f8486,Y
.53cb	60		rts		        RTS
>53cc	00 80 00 80 83 90 9e ab		        .BYTE $00,$80,$00,$80,$83,$90,$9E,$AB
.53d4	a0 01		ldy #$01	s53D4   LDY #$01     ;falls through the BIT opcodes depending on which JSR - geos->desk acc selected
=21463					s53D7   =*+$01
.53d6	2c a0 02	bit $02a0	        BIT a02A0    ;LDY #$02
=21466					s53DA   =*+$01
.53d9	2c a0 03	bit $03a0	        BIT a03A0    ;LDY #$03 -  geos->select printer or select input selected
=21469					s53DD   =*+$01
.53dc	2c a0 04	bit $04a0	        BIT a04A0    ;LDY #$04 - geos->info or geos->desktop info selected
=21472					s53E0   =*+$01
.53df	2c a0 05	bit $05a0	        BIT a05A0    ;LDA #$05
.53e2	c4 7e		cpy $7e		        CPY a7E
.53e4	d0 06		bne $53ec	        BNE b53EC
.53e6	20 66 55	jsr $5566	        JSR s5566    ;store $ff to $0248
.53e9	4c 34 54	jmp $5434	        JMP j5434    ;menus are directed here
.53ec	a5 7e		lda $7e		b53EC   LDA a7E
.53ee	48		pha		        PHA
.53ef	84 7e		sty $7e		        STY a7E
.53f1	ad 89 84	lda $8489	        LDA curDrive
.53f4	48		pha		        PHA
.53f5	20 74 25	jsr $2574	b53F5   JSR s2574    ;set r10 to pointer of text "deskTop AM  V2.0"
.53f8	20 a7 3d	jsr $3da7	        JSR s3DA7    ;overlay buffer area
.53fb	e0 0c		cpx #$0c	        CPX #$0C     ;if X=12 (System Boot File), skip ahead
.53fd	f0 39		beq $5438	        BEQ b5438
.53ff	8a		txa		        TXA
.5400	d0 27		bne $5429	        BNE b5429
.5402	20 c0 59	jsr $59c0	        JSR s59C0    ;load $8b80 to r0
.5405	20 74 c2	jsr $c274	        JSR OpenRecordFile ;     Open "DESK TOP" VLIR file.  r1L=TRACK of VLIR index blk, r1H=SECTOR, r5=pointer to diskBlkBuf to start of dir entry
.5408	8a		txa		        TXA          ;move error code to A
.5409	d0 1e		bne $5429	        BNE b5429    ;skip ahead if error
.540b	a5 7e		lda $7e		        LDA a7E      ;Record number to point to
.540d	20 80 c2	jsr $c280	        JSR PointRecord
.5410	8a		txa		        TXA          ;move error code to A
.5411	d0 16		bne $5429	        BNE b5429    ;skip ahead if error
.5413	a0 5b		ldy #$5b	        LDY #>p5B1E
.5415	84 11		sty $11		        STY r7H      ;read VLIR record to $5B1E buffer (hi byte)
.5417	a0 1e		ldy #$1e	        LDY #<p5B1E
.5419	84 10		sty $10		        STY r7L      ;read VLIR record to $5B1E buffer (lo byte)
.541b	a9 0a		lda #$0a	        LDA #>p0AE2
.541d	85 07		sta $07		        STA r2H      ;size of buffer -  2786 bytes (hi byte)
.541f	a9 e2		lda #$e2	        LDA #<p0AE2
.5421	85 06		sta $06		        STA r2L      ;size of buffer -  2786 bytes (lo byte)
.5423	20 8c c2	jsr $c28c	        JSR ReadRecord
.5426	8a		txa		        TXA          ;move error code to A
.5427	f0 06		beq $542f	        BEQ b542F    ;skip ahead if no error
.5429	20 9a 25	jsr $259a	b5429   JSR s259A    ;handle error
.542c	b8		clv		        CLV
.542d	50 c6		bvc $53f5	        BVC b53F5
.542f	68		pla		b542F   PLA
.5430	20 16 1b	jsr $1b16	        JSR s1B16
.5433	68		pla		        PLA
.5434	a2 00		ldx #$00	j5434   LDX #$00
.5436	f0 12		beq $544a	        BEQ b544A
.5438	68		pla		b5438   PLA
.5439	20 16 1b	jsr $1b16	        JSR s1B16
.543c	68		pla		        PLA
.543d	85 7e		sta $7e		        STA a7E
.543f	20 f6 3f	jsr $3ff6	        JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.5442	a5 7f		lda $7f		        LDA a7F
.5444	d0 02		bne $5448	        BNE b5448
.5446	68		pla		        PLA
.5447	68		pla		        PLA
.5448	a2 ff		ldx #$ff	b5448   LDX #$FF
.544a	8a		txa		b544A   TXA
.544b	48		pha		        PHA
.544c	ad 48 02	lda $0248	        LDA a0248
.544f	d0 03		bne $5454	        BNE b5454
.5451	20 58 38	jsr $3858	        JSR s3858
.5454	a9 00		lda #$00	b5454   LDA #$00
.5456	85 7f		sta $7f		        STA a7F
.5458	8d 48 02	sta $0248	        STA a0248
.545b	68		pla		        PLA
.545c	aa		tax		        TAX
.545d	60		rts		        RTS
.545e	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.5461	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.5464	4c 1e 5b	jmp $5b1e	        JMP p5B1E
.5467	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.546a	4c 21 5b	jmp $5b21	        JMP j5B21
.546d	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.5470	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.5473	4c 24 5b	jmp $5b24	        JMP j5B24
.5476	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.5479	4c 27 5b	jmp $5b27	        JMP j5B27
.547c	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.547f	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.5482	4c 2a 5b	jmp $5b2a	        JMP j5B2A
.5485	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.5488	20 66 55	jsr $5566	        JSR s5566    ;store $ff to $0248
.548b	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.548e	4c 2d 5b	jmp $5b2d	        JMP j5B2D
.5491	20 66 55	jsr $5566	s5491   JSR s5566    ;store $ff to $0248
.5494	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.5497	4c 30 5b	jmp $5b30	        JMP j5B30
.549a	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.549d	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.54a0	4c 33 5b	jmp $5b33	        JMP j5B33
.54a3	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.54a6	20 66 55	jsr $5566	        JSR s5566    ;store $ff to $0248
.54a9	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.54ac	4c 36 5b	jmp $5b36	        JMP j5B36
.54af	20 d4 53	jsr $53d4	j54AF   JSR s53D4    ;menu director code
.54b2	4c 39 5b	jmp $5b39	        JMP j5B39
.54b5	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.54b8	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.54bb	4c 3c 5b	jmp $5b3c	        JMP j5B3C
.54be	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.54c1	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.54c4	4c 3f 5b	jmp $5b3f	        JMP j5B3F
.54c7	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.54ca	20 d4 53	jsr $53d4	        JSR s53D4    ;menu director code
.54cd	4c 42 5b	jmp $5b42	        JMP j5B42
.54d0	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.54d3	20 d7 53	jsr $53d7	        JSR s53D7
.54d6	4c 1e 5b	jmp $5b1e	        JMP p5B1E
.54d9	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.54dc	20 da 53	jsr $53da	        JSR s53DA
.54df	4c 1e 5b	jmp $5b1e	        JMP p5B1E
.54e2	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.54e5	20 da 53	jsr $53da	        JSR s53DA
.54e8	4c 21 5b	jmp $5b21	        JMP j5B21
.54eb	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.54ee	20 da 53	jsr $53da	        JSR s53DA
.54f1	4c 24 5b	jmp $5b24	        JMP j5B24
.54f4	20 90 c1	jsr $c190	        JSR DoPreviousMenu
=21752					p54F8   =*+$01
.54f7	20 da 53	jsr $53da	        JSR s53DA
.54fa	4c 27 5b	jmp $5b27	        JMP j5B27
.54fd	4c 1e 5b	jmp $5b1e	        JMP p5B1E
.5500	4c 21 5b	jmp $5b21	        JMP j5B21
.5503	4c 24 5b	jmp $5b24	        JMP j5B24
.5506	4c 27 5b	jmp $5b27	        JMP j5B27
.5509	20 dd 53	jsr $53dd	        JSR s53DD
.550c	4c 2a 5b	jmp $5b2a	        JMP j5B2A
.550f	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.5512	20 66 55	jsr $5566	        JSR s5566    ;store $ff at $0248
.5515	20 dd 53	jsr $53dd	        JSR s53DD
.5518	4c 2d 5b	jmp $5b2d	        JMP j5B2D
.551b	20 dd 53	jsr $53dd	s551B   JSR s53DD
.551e	4c 30 5b	jmp $5b30	        JMP j5B30
.5521	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.5524	20 dd 53	jsr $53dd	        JSR s53DD
.5527	4c 33 5b	jmp $5b33	        JMP j5B33
.552a	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.552d	20 dd 53	jsr $53dd	        JSR s53DD
.5530	4c 36 5b	jmp $5b36	        JMP j5B36
.5533	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.5536	20 dd 53	jsr $53dd	        JSR s53DD
.5539	4c 39 5b	jmp $5b39	        JMP j5B39
.553c	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.553f	20 dd 53	jsr $53dd	        JSR s53DD
.5542	4c 3c 5b	jmp $5b3c	        JMP j5B3C
.5545	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.5548	20 dd 53	jsr $53dd	        JSR s53DD
.554b	4c 3f 5b	jmp $5b3f	        JMP j5B3F
.554e	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.5551	20 e0 53	jsr $53e0	        JSR s53E0
.5554	4c 1e 5b	jmp $5b1e	        JMP p5B1E
.5557	20 e0 53	jsr $53e0	s5557   JSR s53E0
.555a	4c 21 5b	jmp $5b21	        JMP j5B21
.555d	20 90 c1	jsr $c190	        JSR DoPreviousMenu
.5560	20 e0 53	jsr $53e0	        JSR s53E0
.5563	4c 24 5b	jmp $5b24	        JMP j5B24
.5566	a9 ff		lda #$ff	s5566   LDA #$FF
.5568	8d 48 02	sta $0248	        STA a0248
.556b	60		rts		        RTS
.556c	24 71		bit $71		s556C   BIT a71
.556e	10 6c		bpl $55dc	        BPL b55DC
.5570	8d c3 55	sta $55c3	        STA a55C3
.5573	8e c4 55	stx $55c4	        STX a55C4
.5576	20 f3 40	jsr $40f3	        JSR s40F3
.5579	a5 3c		lda $3c		        LDA mouseYPos
.557b	8d 73 18	sta $1873	        STA a1873
.557e	a5 3b		lda $3b		        LDA mouseXPosHi
.5580	8d 75 18	sta $1875	        STA a1875
.5583	a5 3a		lda $3a		        LDA mouseXPosLo
.5585	8d 74 18	sta $1874	        STA a1874
.5588	a9 ff		lda #$ff	        LDA #$FF
.558a	8d 4b 02	sta $024b	        STA a024B
.558d	a5 78		lda $78		        LDA a78
.558f	ee 4b 02	inc $024b	b558F   INC a024B
.5592	aa		tax		        TAX
.5593	e0 ff		cpx #$ff	        CPX #$FF
.5595	f0 45		beq $55dc	        BEQ b55DC
.5597	ca		dex		        DEX
.5598	8a		txa		        TXA
.5599	48		pha		        PHA
.559a	20 78 3e	jsr $3e78	        JSR s3E78
.559d	a5 03		lda $03		        LDA r0H
.559f	48		pha		        PHA
.55a0	a5 02		lda $02		        LDA r0L
.55a2	48		pha		        PHA
.55a3	a5 05		lda $05		        LDA r1H
.55a5	48		pha		        PHA
.55a6	a5 04		lda $04		        LDA r1L
.55a8	48		pha		        PHA
.55a9	ad 72 18	lda $1872	        LDA a1872
.55ac	f0 0f		beq $55bd	        BEQ b55BD
.55ae	ad 73 18	lda $1873	        LDA a1873
.55b1	85 3c		sta $3c		        STA mouseYPos
.55b3	ad 75 18	lda $1875	        LDA a1875
.55b6	85 3b		sta $3b		        STA mouseXPosHi
.55b8	ad 74 18	lda $1874	        LDA a1874
.55bb	85 3a		sta $3a		        STA mouseXPosLo
.55bd	20 8d c1	jsr $c18d	b55BD   JSR MouseOff
.55c0	a5 72		lda $72		        LDA a72
=21955					a55C3   =*+$01
=21956					a55C4   =*+$02
.55c2	20 00 00	jsr $0000	        JSR f0000
.55c5	20 8a c1	jsr $c18a	        JSR MouseUp     ; Reenables the mouse pointer and GEOS mouse tracking.
.55c8	68		pla		        PLA
.55c9	85 04		sta $04		        STA r1L
.55cb	68		pla		        PLA
.55cc	85 05		sta $05		        STA r1H
.55ce	68		pla		        PLA
.55cf	85 02		sta $02		        STA r0L
.55d1	68		pla		        PLA
.55d2	85 03		sta $03		        STA r0H
.55d4	e0 ff		cpx #$ff	        CPX #$FF
.55d6	d0 07		bne $55df	        BNE b55DF
.55d8	20 f6 3f	jsr $3ff6	        JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.55db	68		pla		        PLA
.55dc	a2 00		ldx #$00	b55DC   LDX #$00
.55de	60		rts		        RTS
.55df	e0 00		cpx #$00	b55DF   CPX #$00
.55e1	f0 07		beq $55ea	        BEQ b55EA
.55e3	e0 0c		cpx #$0c	        CPX #$0C
.55e5	d0 12		bne $55f9	        BNE b55F9
.55e7	20 6d 3f	jsr $3f6d	        JSR j3F6D
.55ea	20 7e 59	jsr $597e	b55EA   JSR s597E
.55ed	f0 04		beq $55f3	        BEQ b55F3
.55ef	68		pla		        PLA
.55f0	b8		clv		        CLV
.55f1	50 9c		bvc $558f	        BVC b558F
.55f3	20 f6 3f	jsr $3ff6	b55F3   JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.55f6	20 53 31	jsr $3153	        JSR j3153
.55f9	68		pla		b55F9   PLA
.55fa	60		rts		        RTS
.55fb	a0 04		ldy #$04	j55FB   LDY #$04
.55fd	20 6b 24	jsr $246b	        JSR s246B
.5600	20 f6 3f	jsr $3ff6	        JSR s3FF6    ;unselect and un-reverse icon(s), 0 selected
.5603	a2 ff		ldx #$ff	        LDX #$FF
.5605	60		rts		        RTS
.5606	a9 00		lda #$00	s5606   LDA #$00
.5608	8d 50 02	sta $0250	        STA a0250
.560b	20 47 24	jsr $2447	        JSR s2447    ;Set the rectangle pattern based on A
.560e	20 9f c1	jsr $c19f	        JSR i_Rectangle
>5611	00 0c dd 00 3f 01		        .BYTE $00,$0C,$DD,$00,$3F,$01
.5617	20 a2 c1	jsr $c1a2	        JSR i_FrameRectangle
>561a	00 0c dd 00			        .BYTE $00,$0C,$DD,$00
>561e	3f 01 ff			        .BYTE $3F,$01,$FF
.5621	a9 56		lda #$56	        LDA #>ClockProcStruct
.5623	85 03		sta $03		        STA r0H      ;Process data structure pointer HI
.5625	a9 39		lda #$39	        LDA #<ClockProcStruct
.5627	85 02		sta $02		        STA r0L      ;Process data structure LO
.5629	a9 01		lda #$01	        LDA #$01     ;1 Process
.562b	20 03 c1	jsr $c103	        JSR InitProcesses ;Initialize and install a process
.562e	20 34 56	jsr $5634	s562E   JSR j5634
.5631	4c a8 56	jmp $56a8	        JMP j56A8    ;called after editing clock bar
.5634	a2 00		ldx #$00	j5634   LDX #$00
.5636	4c 06 c1	jmp $c106	        JMP RestartProcess
>5639	52 56 3c 00			ClockProcStruct .BYTE $52,$56,$3C,$00
.563d	a2 00		ldx #$00	s563D   LDX #$00
.563f	4c 0c c1	jmp $c10c	        JMP BlockProcess
.5642	dd 4c 19	cmp $194c,x	s5642   CMP f194C,X
.5645	f0 0a		beq $5651	        BEQ b5651
.5647	9d 4c 19	sta $194c,x	        STA f194C,X
.564a	8a		txa		        TXA
.564b	48		pha		        PHA
.564c	20 2d 57	jsr $572d	        JSR s572D    ;called from interrupt
.564f	68		pla		        PLA
.5650	aa		tax		        TAX
.5651	60		rts		b5651   RTS
.5652	2c 50 02	bit $0250	        BIT a0250
.5655	30 50		bmi $56a7	        BMI b56A7
.5657	08		php		        PHP
.5658	78		sei		        SEI
.5659	a5 01		lda $01		        LDA a01
.565b	48		pha		        PHA
.565c	a9 35		lda #$35	        LDA #$35
.565e	85 01		sta $01		        STA a01
.5660	a9 41		lda #$41	        LDA #$41
.5662	2c 0b dc	bit $dc0b	        BIT $DC0B    ;CIA1: Time-of-Day Clock: Hours + AM/PM Flag
.5665	10 02		bpl $5669	        BPL b5669
.5667	a9 50		lda #$50	        LDA #$50
.5669	a2 06		ldx #$06	b5669   LDX #$06
.566b	20 42 56	jsr $5642	        JSR s5642    ;called from interrupt for clock
.566e	ad 0b dc	lda $dc0b	        LDA $DC0B    ;CIA1: Time-of-Day Clock: Hours + AM/PM Flag
.5671	29 7f		and #$7f	        AND #$7F
.5673	d0 02		bne $5677	        BNE b5677
.5675	a9 12		lda #$12	        LDA #$12
.5677	20 72 57	jsr $5772	b5677   JSR s5772
.567a	48		pha		        PHA
.567b	8a		txa		        TXA
.567c	a2 00		ldx #$00	        LDX #$00
.567e	20 42 56	jsr $5642	        JSR s5642    ;called from interrupt for clock
.5681	e8		inx		        INX
.5682	68		pla		        PLA
.5683	20 42 56	jsr $5642	        JSR s5642    ;called from interrupt for clock
.5686	ad 0a dc	lda $dc0a	        LDA $DC0A    ;CIA1: Time-of-Day Clock: Minutes
.5689	20 72 57	jsr $5772	        JSR s5772
.568c	48		pha		        PHA
.568d	8a		txa		        TXA
.568e	a2 03		ldx #$03	        LDX #$03
.5690	20 42 56	jsr $5642	        JSR s5642    ;called from interrupt for clock
.5693	e8		inx		        INX
.5694	68		pla		        PLA
.5695	20 42 56	jsr $5642	        JSR s5642    ;called from interrupt for clock
.5698	ad 08 dc	lda $dc08	        LDA $DC08    ;CIA1: Time-of-Day Clock: 1/10 Seconds
.569b	68		pla		        PLA
.569c	85 01		sta $01		        STA a01
.569e	28		plp		        PLP
.569f	ad 19 85	lda $8519	        LDA hour
.56a2	0d 1a 85	ora $851a	        ORA minutes
.56a5	f0 01		beq $56a8	        BEQ j56A8    ;called after editing clock bar
.56a7	60		rts		b56A7   RTS
.56a8	a9 00		lda #$00	j56A8   LDA #$00
.56aa	a2 09		ldx #$09	        LDX #$09
.56ac	9d 4c 19	sta $194c,x	        STA f194C,X
.56af	9d 42 19	sta $1942,x	        STA f1942,X
.56b2	a9 20		lda #$20	        LDA #$20
.56b4	8d 51 19	sta $1951	        STA a1951
.56b7	8d 54 19	sta $1954	        STA a1954
.56ba	8d 4a 19	sta $194a	        STA a194A
.56bd	08		php		        PHP
.56be	78		sei		        SEI
.56bf	a5 01		lda $01		        LDA a01
.56c1	48		pha		        PHA
.56c2	a9 35		lda #$35	        LDA #$35
.56c4	85 01		sta $01		        STA a01
.56c6	a9 4d		lda #$4d	        LDA #$4D
.56c8	8d 53 19	sta $1953	        STA a1953
.56cb	a9 3a		lda #$3a	        LDA #$3A
.56cd	8d 4e 19	sta $194e	        STA a194E
.56d0	ad 0a dc	lda $dc0a	        LDA $DC0A    ;CIA1: Time-of-Day Clock: Minutes
.56d3	20 72 57	jsr $5772	        JSR s5772
.56d6	8d 50 19	sta $1950	        STA a1950
.56d9	8e 4f 19	stx $194f	        STX a194F
.56dc	a2 41		ldx #$41	        LDX #$41
.56de	ad 0b dc	lda $dc0b	        LDA $DC0B    ;CIA1: Time-of-Day Clock: Hours + AM/PM Flag
.56e1	10 02		bpl $56e5	        BPL b56E5
.56e3	a2 50		ldx #$50	        LDX #$50
.56e5	29 7f		and #$7f	b56E5   AND #$7F
.56e7	d0 02		bne $56eb	        BNE b56EB
.56e9	a9 12		lda #$12	        LDA #$12
.56eb	8e 52 19	stx $1952	b56EB   STX a1952
.56ee	20 72 57	jsr $5772	        JSR s5772
.56f1	8d 4d 19	sta $194d	        STA a194D
.56f4	8e 4c 19	stx $194c	        STX f194C
.56f7	2c 08 dc	bit $dc08	        BIT $DC08    ;CIA1: Time-of-Day Clock: 1/10 Seconds
.56fa	68		pla		        PLA
.56fb	85 01		sta $01		        STA a01
.56fd	28		plp		        PLP
.56fe	ad 16 85	lda $8516	        LDA year
.5701	20 82 57	jsr $5782	        JSR s5782
.5704	8d 49 19	sta $1949	        STA a1949
.5707	8e 48 19	stx $1948	        STX a1948
.570a	a9 2f		lda #$2f	        LDA #$2F
.570c	8d 47 19	sta $1947	        STA a1947
.570f	8d 44 19	sta $1944	        STA a1944
.5712	ad 18 85	lda $8518	        LDA day
.5715	20 82 57	jsr $5782	        JSR s5782
.5718	8d 46 19	sta $1946	        STA a1946
.571b	8e 45 19	stx $1945	        STX a1945
.571e	ad 17 85	lda $8517	        LDA month
.5721	20 82 57	jsr $5782	        JSR s5782
.5724	8d 43 19	sta $1943	        STA a1943
.5727	8e 42 19	stx $1942	        STX f1942
.572a	20 4d 57	jsr $574d	        JSR s574D    ;called from interrupt 2 after editing clock
.572d	08		php		s572D   PHP
.572e	78		sei		        SEI
.572f	a5 01		lda $01		        LDA a01
.5731	48		pha		        PHA
.5732	a9 30		lda #$30	        LDA #$30
.5734	85 01		sta $01		        STA a01
.5736	a9 19		lda #$19	        LDA #>f194C
.5738	85 03		sta $03		        STA r0H
.573a	a9 4c		lda #$4c	        LDA #<f194C
.573c	85 02		sta $02		        STA r0L
.573e	a9 01		lda #$01	        LDA #>p0114
.5740	85 19		sta $19		        STA r11H
.5742	a9 14		lda #$14	        LDA #<p0114
.5744	85 18		sta $18		        STA r11L
.5746	a9 09		lda #$09	        LDA #$09
.5748	85 05		sta $05		        STA r1H
.574a	b8		clv		        CLV
.574b	50 1d		bvc $576a	        BVC b576A
.574d	08		php		s574D   PHP
.574e	78		sei		        SEI
.574f	a5 01		lda $01		        LDA a01
.5751	48		pha		        PHA
.5752	a9 30		lda #$30	        LDA #$30
.5754	85 01		sta $01		        STA a01
.5756	a9 19		lda #$19	        LDA #>f1942
.5758	85 03		sta $03		        STA r0H
.575a	a9 42		lda #$42	        LDA #<f1942
.575c	85 02		sta $02		        STA r0L
.575e	a9 00		lda #$00	        LDA #>pE3
.5760	85 19		sta $19		        STA r11H
.5762	a9 e3		lda #$e3	        LDA #<pE3
.5764	85 18		sta $18		        STA r11L
.5766	a9 09		lda #$09	        LDA #$09
.5768	85 05		sta $05		        STA r1H
.576a	20 48 c1	jsr $c148	b576A   JSR PutString
.576d	68		pla		        PLA
.576e	85 01		sta $01		        STA a01
.5770	28		plp		        PLP
.5771	60		rts		        RTS
.5772	48		pha		s5772   PHA
.5773	4a		lsr a		        LSR
.5774	4a		lsr a		        LSR
.5775	4a		lsr a		        LSR
.5776	4a		lsr a		        LSR
.5777	18		clc		        CLC
.5778	69 30		adc #$30	        ADC #$30
.577a	aa		tax		        TAX
.577b	68		pla		        PLA
.577c	29 0f		and #$0f	        AND #$0F
.577e	18		clc		        CLC
.577f	69 30		adc #$30	        ADC #$30
.5781	60		rts		        RTS
.5782	a2 30		ldx #$30	s5782   LDX #$30
.5784	38		sec		        SEC
.5785	e9 0a		sbc #$0a	b5785   SBC #$0A
.5787	90 03		bcc $578c	        BCC b578C
.5789	e8		inx		        INX
.578a	b0 f9		bcs $5785	        BCS b5785
.578c	69 3a		adc #$3a	b578C   ADC #$3A
.578e	60		rts		        RTS
.578f	86 03		stx $03		s578F   STX r0H
.5791	85 02		sta $02		        STA r0L
.5793	a2 00		ldx #$00	s5793   LDX #$00
.5795	86 04		stx $04		        STX r1L
.5797	a9 20		lda #$20	        LDA #$20
.5799	9d 80 8b	sta $8b80,x	        STA p8B80,X
.579c	e8		inx		        INX
.579d	20 af 57	jsr $57af	        JSR s57AF
.57a0	a6 04		ldx $04		        LDX r1L
.57a2	e8		inx		        INX
.57a3	a9 20		lda #$20	        LDA #$20
.57a5	9d 80 8b	sta $8b80,x	        STA p8B80,X
.57a8	e8		inx		        INX
.57a9	a9 00		lda #$00	        LDA #$00
.57ab	9d 80 8b	sta $8b80,x	        STA p8B80,X
.57ae	60		rts		        RTS
.57af	a0 00		ldy #$00	s57AF   LDY #$00
.57b1	b1 02		lda ($02),y	b57B1   LDA (r0L),Y
.57b3	f0 1b		beq $57d0	        BEQ b57D0
.57b5	29 7f		and #$7f	        AND #$7F
.57b7	c9 20		cmp #$20	        CMP #$20
.57b9	90 04		bcc $57bf	        BCC b57BF
.57bb	c9 7f		cmp #$7f	        CMP #$7F
.57bd	90 02		bcc $57c1	        BCC b57C1
.57bf	a9 2a		lda #$2a	b57BF   LDA #$2A
.57c1	9d 80 8b	sta $8b80,x	b57C1   STA p8B80,X
.57c4	c9 20		cmp #$20	        CMP #$20
.57c6	f0 02		beq $57ca	        BEQ b57CA
.57c8	86 04		stx $04		        STX r1L
.57ca	e8		inx		b57CA   INX
.57cb	c8		iny		        INY
.57cc	c0 10		cpy #$10	        CPY #$10
.57ce	d0 e1		bne $57b1	        BNE b57B1
.57d0	60		rts		b57D0   RTS
.57d1	20 ee 57	jsr $57ee	        JSR s57EE
.57d4	b8		clv		        CLV
.57d5	50 07		bvc $57de	        BVC b57DE
.57d7	20 ee 57	jsr $57ee	s57D7   JSR s57EE
.57da	46 0b		lsr $0b		        LSR r4H
.57dc	66 0a		ror $0a		        ROR r4L
.57de	a5 18		lda $18		b57DE   LDA r11L
.57e0	38		sec		        SEC
.57e1	e5 0a		sbc $0a		        SBC r4L
.57e3	85 18		sta $18		        STA r11L     ;lo byte of X position
.57e5	a5 19		lda $19		        LDA r11H
.57e7	e5 0b		sbc $0b		        SBC r4H
.57e9	85 19		sta $19		        STA r11H     ;hi byte of X position
.57eb	4c 48 c1	jmp $c148	        JMP PutString
.57ee	a0 00		ldy #$00	s57EE   LDY #$00
.57f0	84 0a		sty $0a		        STY r4L
.57f2	84 0b		sty $0b		        STY r4H
.57f4	b1 02		lda ($02),y	b57F4   LDA (r0L),Y
.57f6	f0 15		beq $580d	b57F6   BEQ b580D
.57f8	8c 4f 02	sty $024f	        STY a024F
.57fb	20 c9 c1	jsr $c1c9	        JSR GetCharWidth        ; Calculate the pixel width of a character as it exists in the font
.57fe	ac 4f 02	ldy $024f	        LDY a024F
.5801	18		clc		        CLC
.5802	65 0a		adc $0a		        ADC r4L
.5804	85 0a		sta $0a		        STA r4L
.5806	90 02		bcc $580a	        BCC b580A
.5808	e6 0b		inc $0b		        INC r4H
.580a	c8		iny		b580A   INY
.580b	d0 e7		bne $57f4	        BNE b57F4
.580d	60		rts		b580D   RTS
.580e	a2 00		ldx #$00	        LDX #$00
.5810	20 af 57	jsr $57af	        JSR s57AF
.5813	a4 04		ldy $04		        LDY r1L
.5815	c8		iny		        INY
.5816	20 6b 25	jsr $256b	        JSR s256B    ;load r6 with $8b80 address
.5819	a9 00		lda #$00	        LDA #$00
.581b	91 0e		sta ($0e),y	        STA (r6L),Y
.581d	60		rts		        RTS
.581e	a0 00		ldy #$00	s581E   LDY #$00
.5820	94 01		sty $01,x	        STY f01,X
.5822	0a		asl a		        ASL
.5823	0a		asl a		        ASL
.5824	0a		asl a		        ASL
.5825	36 01		rol $01,x	        ROL f01,X
.5827	95 00		sta $00,x	        STA f00,X
.5829	60		rts		        RTS
.582a	20 3e 58	jsr $583e	s582A   JSR s583E    ;Retrieve the return address for inline call and JMP to it
.582d	90 c7		bcc $57f6	        BCC b57F6
>582f	2f 00 18			        .BYTE $2F,$00,$18
.5832	01 60		ora ($60,x)	        ORA (p60,X)
.5834	20 3e 58	jsr $583e	s5834   JSR s583E    ;Retrieve the return address for inline call and JMP to it
.5837	29 8a		and #$8a	        AND #$8A
.5839	09 00		ora #$00	        ORA #$00
.583b	06 01		asl $01		        ASL a01
.583d	60		rts		        RTS
.583e	68		pla		s583E   PLA
.583f	85 3d		sta $3d		        STA returnAddressLo
.5841	68		pla		        PLA
.5842	85 3e		sta $3e		        STA returnAddressHi
.5844	a0 01		ldy #$01	        LDY #$01
.5846	b1 3d		lda ($3d),y	        LDA (returnAddressLo),Y
.5848	85 06		sta $06		        STA r2L
.584a	c8		iny		        INY
.584b	b1 3d		lda ($3d),y	        LDA (returnAddressLo),Y
.584d	85 07		sta $07		        STA r2H
.584f	c8		iny		        INY
.5850	b1 3d		lda ($3d),y	        LDA (returnAddressLo),Y
.5852	85 08		sta $08		        STA r3L
.5854	c8		iny		        INY
.5855	b1 3d		lda ($3d),y	        LDA (returnAddressLo),Y
.5857	85 09		sta $09		        STA r3H
.5859	c8		iny		        INY
.585a	b1 3d		lda ($3d),y	        LDA (returnAddressLo),Y
.585c	85 0a		sta $0a		        STA r4L
.585e	c8		iny		        INY
.585f	b1 3d		lda ($3d),y	        LDA (returnAddressLo),Y
.5861	85 0b		sta $0b		        STA r4H
.5863	20 b3 c2	jsr $c2b3	        JSR IsMseInRegion
.5866	08		php		        PHP
.5867	a9 07		lda #$07	        LDA #$07
.5869	4c a4 c2	jmp $c2a4	        JMP DoInlineReturn
.586c	20 47 24	jsr $2447	s586C   JSR s2447    ;Set the rectangle pattern based on A
.586f	a9 80		lda #$80	        LDA #$80     ;draw to the foreground screen
.5871	85 2f		sta $2f		        STA displayBufferOn
.5873	20 9f c1	jsr $c19f	        JSR i_Rectangle ;draw file icon pad rectangle
>5876	29 8a 09 00 06 01		        .BYTE $29,$8A,$09,$00,$06,$01 ;y1=29, y2=138, x1=9, x2=262
.587c	4c f4 26	jmp $26f4	        JMP j26F4    ;comes here after drawing pad and disk info - seems to draw file icons
.587f	86 03		stx $03		s587F   STX r0H
.5881	85 02		sta $02		        STA r0L
.5883	4c 48 c1	jmp $c148	        JMP PutString
.5886	20 47 24	jsr $2447	s5886   JSR s2447    ;Set the rectangle pattern based on A
.5889	20 9f c1	jsr $c19f	        JSR i_Rectangle ;This draws just for the file icons in the pad
>588c	29 76 09 00 06 01		        .BYTE $29,$76,$09,$00,$06,$01 ;y1=41, y2=118, x1=9, x2=262
.5892	4c f4 26	jmp $26f4	        JMP j26F4    ;comes here after drawing pad and disk info - seems to draw file icons
.5895	a9 04		lda #$04	        LDA #>f0406  ;
.5897	85 0d		sta $0d		        STA r5H
.5899	a9 06		lda #$06	        LDA #<f0406
.589b	85 0c		sta $0c		        STA r5L
.589d	a5 77		lda $77		s589D   LDA a77
.589f	85 0b		sta $0b		        STA r4H
.58a1	a5 76		lda $76		        LDA a76
.58a3	85 0a		sta $0a		        STA r4L
.58a5	60		rts		        RTS
.58a6	a9 00		lda #$00	        LDA #$00
.58a8	85 02		sta $02		        STA r0L
.58aa	a5 fb		lda $fb		        LDA aFB
.58ac	18		clc		        CLC
.58ad	69 6d		adc #$6d	        ADC #$6D
.58af	85 03		sta $03		        STA r0H
.58b1	60		rts		        RTS
.58b2	a0 2e		ldy #$2e	s58B2   LDY #$2E
.58b4	a2 f9		ldx #$f9	        LDX #$F9
.58b6	ad 65 84	lda $8465	        LDA PrntFilename
.58b9	f0 04		beq $58bf	        BEQ b58BF
.58bb	a0 84		ldy #$84	        LDY #>PrntFilename
.58bd	a2 65		ldx #$65	        LDX #<PrntFilename
.58bf	8c e7 03	sty $03e7	b58BF   STY a03E7
.58c2	8e e6 03	stx $03e6	        STX a03E6
.58c5	60		rts		        RTS
.58c6	ad e6 03	lda $03e6	s58C6   LDA a03E6
.58c9	85 0e		sta $0e		        STA r6L      ;lo byte of filename
.58cb	ad e7 03	lda $03e7	        LDA a03E7
.58ce	85 0f		sta $0f		        STA r6H      ;hi byte of filename
.58d0	20 0b c2	jsr $c20b	        JSR FindFile
.58d3	8a		txa		        TXA
.58d4	c9 05		cmp #$05	        CMP #$05     ;if error...
.58d6	f0 23		beq $58fb	        BEQ b58FB    ;jump ahead to print "NOT ON DISK"
.58d8	a0 16		ldy #$16	        LDY #$16
.58da	b1 0c		lda ($0c),y	        LDA (r5L),Y
.58dc	c9 09		cmp #$09	        CMP #$09
.58de	d0 00		bne $58e0	        BNE b58E0
.58e0	a9 b7		lda #$b7	b58E0   LDA #<pC7B7
.58e2	85 06		sta $06		        STA r2L      ;Y1 coord for rectangle
.58e4	a9 c7		lda #$c7	        LDA #>pC7B7
.58e6	85 07		sta $07		        STA r2H      ;Y2 coord for rectangle
.58e8	a9 00		lda #$00	        LDA #>r0H
.58ea	85 09		sta $09		        STA r3H      ;hi byte of X1 coord for rectangle
.58ec	a9 03		lda #$03	        LDA #<r0H
.58ee	85 08		sta $08		        STA r3L      ;lo byte of X1 coord for rectangle
.58f0	a9 00		lda #$00	        LDA #>p3F
.58f2	85 0b		sta $0b		        STA r4H      ;hi byte of X2 coord for rectangle
.58f4	a9 3f		lda #$3f	        LDA #<p3F
.58f6	85 0a		sta $0a		        STA r4L      ;lo byte of X2 coord for rectangle
.58f8	4c 20 59	jmp $5920	        JMP j5920    ;draw rectangle
.58fb	a9 2c		lda #$2c	b58FB   LDA #>p2C83  ;hi byte of " NOT ON DISK"
.58fd	85 07		sta $07		        STA r2H
.58ff	a9 83		lda #$83	        LDA #<p2C83  ; lo byte of " NOT ON DISK"
.5901	85 06		sta $06		        STA r2L
.5903	a9 bb		lda #$bb	        LDA #$BB
.5905	85 05		sta $05		        STA r1H
.5907	a9 00		lda #$00	        LDA #>p23
.5909	85 19		sta $19		        STA r11H
.590b	a9 23		lda #$23	        LDA #<p23
.590d	85 18		sta $18		        STA r11L
.590f	20 b8 47	jsr $47b8	j590F   JSR s47B8    ;change fonts
.5912	a5 07		lda $07		        LDA r2H
.5914	85 03		sta $03		        STA r0H
.5916	a5 06		lda $06		        LDA r2L
.5918	85 02		sta $02		        STA r0L
.591a	20 d7 57	jsr $57d7	        JSR s57D7    ;Print file names on pad (saved to 8b80)
.591d	4c 4b c1	jmp $c14b	        JMP UseSystemFont
.5920	20 4a 24	jsr $244a	j5920   JSR s244A    ;set the rectange pattern
.5923	4c 24 c1	jmp $c124	        JMP Rectangle
.5926	48		pha		s5926   PHA
.5927	a5 7a		lda $7a		        LDA padViewMode
.5929	f0 03		beq $592e	        BEQ b592E
.592b	68		pla		        PLA
.592c	18		clc		        CLC
.592d	60		rts		        RTS
.592e	68		pla		b592E   PLA
.592f	38		sec		        SEC
.5930	60		rts		        RTS
.5931	18		clc		s5931   CLC
.5932	a9 03		lda #$03	        LDA #$03
.5934	65 02		adc $02		        ADC r0L
.5936	85 02		sta $02		        STA r0L
.5938	90 02		bcc $593c	        BCC b593C
.593a	e6 03		inc $03		        INC r0H
.593c	20 93 57	jsr $5793	b593C   JSR s5793    ;Write single icon filename on pad
.593f	a9 8b		lda #$8b	        LDA #>p8B80
.5941	85 07		sta $07		        STA r2H
.5943	a9 80		lda #$80	        LDA #<p8B80
.5945	85 06		sta $06		        STA r2L
.5947	a9 b4		lda #$b4	        LDA #$B4
.5949	85 05		sta $05		        STA r1H
.594b	a9 01		lda #$01	        LDA #>p0123
.594d	85 19		sta $19		        STA r11H
.594f	a9 23		lda #$23	        LDA #<p0123
.5951	85 18		sta $18		        STA r11L
.5953	4c 0f 59	jmp $590f	        JMP j590F
.5956	a9 b0		lda #$b0	s5956   LDA #<pB9B0
.5958	85 06		sta $06		        STA r2L      ;Y1 coord of rectangle
.595a	a9 b9		lda #$b9	        LDA #>pB9B0
.595c	85 07		sta $07		        STA r2H      ;Y2 coord of rectangle
.595e	a9 00		lda #$00	        LDA #>pFD
.5960	85 09		sta $09		        STA r3H      ;hi byte of X1 coord of rectange
.5962	a9 fd		lda #$fd	        LDA #<pFD
.5964	85 08		sta $08		        STA r3L      ;lo byte of X1 coord of rectange
.5966	a9 01		lda #$01	        LDA #>p0147
.5968	85 0b		sta $0b		        STA r4H      ;hi byte of X2 coord of rectangle
.596a	a9 47		lda #$47	        LDA #<p0147
.596c	85 0a		sta $0a		        STA r4L      ;lo byte of X2 coord of rectange
.596e	4c 20 59	jmp $5920	        JMP j5920    ;set pattern and draw rectangle
.5971	a5 05		lda $05		s5971   LDA r1H
.5973	85 03		sta $03		        STA r0H
.5975	a5 04		lda $04		        LDA r1L
.5977	85 02		sta $02		        STA r0L
.5979	60		rts		        RTS
.597a	a9 cf		lda #$cf	s597A   LDA #$CF
.597c	d0 02		bne $5980	        BNE b5980
.597e	a9 7f		lda #$7f	s597E   LDA #$7F
.5980	85 20		sta $20		b5980   STA r15L
.5982	08		php		        PHP
.5983	78		sei		        SEI
.5984	a5 01		lda $01		        LDA a01
.5986	48		pha		        PHA
.5987	a9 35		lda #$35	        LDA #>p357F
.5989	85 01		sta $01		        STA a01
.598b	a9 7f		lda #$7f	        LDA #<p357F
.598d	8d 00 dc	sta $dc00	        STA $DC00    ;CIA1: Data Port Register A
.5990	ae 01 dc	ldx $dc01	        LDX $DC01    ;CIA1: Data Port Register B
.5993	68		pla		        PLA
.5994	85 01		sta $01		        STA a01
.5996	28		plp		        PLP
.5997	8a		txa		        TXA
.5998	38		sec		        SEC
.5999	e5 20		sbc $20		        SBC r15L
.599b	60		rts		        RTS
.599c	8a		txa		s599C   TXA
.599d	f0 04		beq $59a3	        BEQ b59A3
.599f	c9 0c		cmp #$0c	        CMP #$0C
.59a1	d0 01		bne $59a4	        BNE b59A4
.59a3	60		rts		b59A3   RTS
.59a4	20 9a 25	jsr $259a	b59A4   JSR s259A
.59a7	4c c2 23	jmp $23c2	        JMP j23C2
.59aa	8a		txa		s59AA   TXA
.59ab	f0 0b		beq $59b8	        BEQ b59B8
.59ad	c9 0c		cmp #$0c	        CMP #$0C
.59af	f0 07		beq $59b8	        BEQ b59B8
.59b1	68		pla		        PLA
.59b2	68		pla		        PLA
.59b3	20 53 31	jsr $3153	        JSR j3153
.59b6	a2 ff		ldx #$ff	        LDX #$FF
.59b8	60		rts		b59B8   RTS
.59b9	ac 89 84	ldy $8489	s59B9   LDY curDrive
.59bc	b9 86 84	lda $8486,y	        LDA f8486,Y
.59bf	60		rts		        RTS
.59c0	a9 8b		lda #$8b	s59C0   LDA #>p8B80
.59c2	85 03		sta $03		        STA r0H
.59c4	a9 80		lda #$80	        LDA #<p8B80
.59c6	85 02		sta $02		        STA r0L
.59c8	60		rts		        RTS
.59c9	a9 03		lda #$03	s59C9   LDA #>p0334
.59cb	85 05		sta $05		        STA r1H
.59cd	a9 34		lda #$34	        LDA #<p0334
.59cf	85 04		sta $04		        STA r1L
.59d1	60		rts		        RTS
.59d2	a9 8b		lda #$8b	s59D2   LDA #>p8BBC
.59d4	85 07		sta $07		        STA r2H
.59d6	a9 bc		lda #$bc	        LDA #<p8BBC
.59d8	85 06		sta $06		        STA r2L
.59da	60		rts		        RTS
.59db	a9 82		lda #$82	s59DB   LDA #>p8290
.59dd	85 07		sta $07		        STA r2H
.59df	a9 90		lda #$90	        LDA #<p8290
.59e1	85 06		sta $06		        STA r2L
.59e3	a2 06		ldx #$06	        LDX #$06
.59e5	60		rts		        RTS
.59e6	a9 8b		lda #$8b	s59E6   LDA #>p8BD0
.59e8	85 09		sta $09		        STA r3H
.59ea	a9 d0		lda #$d0	        LDA #<p8BD0
.59ec	85 08		sta $08		        STA r3L
.59ee	60		rts		        RTS
.59ef					s59EF
.59ef	a9 8a		lda #$8a	        LDA #>spr2pic
.59f1	85 0b		sta $0b		        STA r4H
.59f3	a9 80		lda #$80	        LDA #<spr2pic
.59f5	85 0a		sta $0a		        STA r4L
.59f7	60		rts		        RTS
.59f8	a9 8b		lda #$8b	s59F8   LDA #>p8BE4
.59fa	85 0d		sta $0d		        STA r5H
.59fc	a9 e4		lda #$e4	        LDA #<p8BE4
.59fe	85 0c		sta $0c		        STA r5L
.5a00	60		rts		        RTS
.5a01	a9 84		lda #$84	s5A01   LDA #>dirEntryBuf
.5a03	85 15		sta $15		        STA r9H
.5a05	a9 00		lda #$00	        LDA #<dirEntryBuf
.5a07	85 14		sta $14		        STA r9L
.5a09	60		rts		        RTS
.5a0a	ad f0 0a	lda $0af0	s5A0A   LDA a0AF0
.5a0d	d0 32		bne $5a41	        BNE b5A41
.5a0f	ac 89 84	ldy $8489	        LDY curDrive
.5a12	8c f1 0a	sty $0af1	        STY a0AF1
.5a15	b9 86 84	lda $8486,y	        LDA f8486,Y
.5a18	85 0c		sta $0c		        STA r5L
.5a1a	ad 89 84	lda $8489	        LDA curDrive
.5a1d	49 01		eor #$01	        EOR #$01
.5a1f	a8		tay		        TAY
.5a20	b9 86 84	lda $8486,y	        LDA f8486,Y
.5a23	f0 69		beq $5a8e	        BEQ b5A8E
.5a25	85 0d		sta $0d		        STA r5H
.5a27	ee 8d 84	inc $848d	        INC numDrives
.5a2a	ad c3 88	lda $88c3	        LDA ramExpSize ;2=128k. 4=256k, 8=512k; 16=1MB, 32=1MB+
.5a2d	d0 12		bne $5a41	        BNE b5A41    ;jump ahead if REU is present
.5a2f	a5 0d		lda $0d		        LDA r5H
.5a31	c9 03		cmp #$03	        CMP #$03
.5a33	f0 06		beq $5a3b	        BEQ b5A3B
.5a35	b0 17		bcs $5a4e	        BCS b5A4E
.5a37	c5 0c		cmp $0c		        CMP r5L
.5a39	f0 06		beq $5a41	        BEQ b5A41
.5a3b	20 ad 5a	jsr $5aad	b5A3B   JSR s5AAD    ;Find "CONFIGURE"
.5a3e	8a		txa		        TXA
.5a3f	d0 0d		bne $5a4e	        BNE b5A4E
.5a41	20 ec 1a	jsr $1aec	b5A41   JSR s1AEC    ;seems to set drive A or drive B type
.5a44	20 a1 c2	jsr $c2a1	        JSR OpenDisk    ; Open the disk in the current drive
.5a47	e0 0d		cpx #$0d	        CPX #$0D
.5a49	d0 0d		bne $5a58	        BNE b5A58
.5a4b	20 ec 1a	jsr $1aec	        JSR s1AEC    ;seems to set drive A or drive B type
.5a4e	ce 8d 84	dec $848d	b5A4E   DEC numDrives
.5a51	a9 00		lda #$00	        LDA #$00
.5a53	8d f0 0a	sta $0af0	        STA a0AF0
.5a56	f0 36		beq $5a8e	        BEQ b5A8E
.5a58	8a		txa		b5A58   TXA
.5a59	d0 06		bne $5a61	        BNE b5A61
.5a5b	20 91 5a	jsr $5a91	        JSR s5A91
.5a5e	b8		clv		        CLV
.5a5f	50 03		bvc $5a64	        BVC b5A64
.5a61	20 1e 36	jsr $361e	b5A61   JSR s361E
.5a64	ad c3 88	lda $88c3	b5A64   LDA ramExpSize ;2=128k. 4=256k, 8=512k; 16=1MB, 32=1MB+
.5a67	f0 22		beq $5a8b	        BEQ b5A8B    ;skip ahead if no ram expansion
.5a69	ad 89 84	lda $8489	        LDA curDrive
.5a6c	48		pha		        PHA
.5a6d	a9 0a		lda #$0a	        LDA #$0A
.5a6f	20 16 1b	jsr $1b16	        JSR s1B16
.5a72	e0 0d		cpx #$0d	        CPX #$0D
.5a74	f0 11		beq $5a87	        BEQ b5A87
.5a76	8a		txa		        TXA
.5a77	f0 06		beq $5a7f	        BEQ b5A7F
.5a79	20 1e 36	jsr $361e	        JSR s361E
.5a7c	b8		clv		        CLV
.5a7d	50 08		bvc $5a87	        BVC b5A87
.5a7f	ad c6 88	lda $88c6	b5A7F   LDA curType
.5a82	f0 03		beq $5a87	        BEQ b5A87
.5a84	20 91 5a	jsr $5a91	        JSR s5A91
.5a87	68		pla		b5A87   PLA
.5a88	20 16 1b	jsr $1b16	        JSR s1B16
.5a8b	20 ec 1a	jsr $1aec	b5A8B   JSR s1AEC    ;seems to set drive A or drive B type
.5a8e	4c 6e 31	jmp $316e	b5A8E   JMP b316E    ;Open a disk
.5a91	a2 04		ldx #$04	s5A91   LDX #$04
.5a93	20 29 38	jsr $3829	        JSR s3829
.5a96	a0 04		ldy #$04	        LDY #$04
.5a98	20 db 59	jsr $59db	        JSR s59DB    ;load $8290 to r2
.5a9b	a9 12		lda #$12	        LDA #$12     ;18 bytes to copy
.5a9d	20 68 c2	jsr $c268	        JSR CopyFString
.5aa0	20 71 59	jsr $5971	        JSR s5971    ;copy r1 to r0
.5aa3	20 c3 47	jsr $47c3	        JSR s47C3
.5aa6	a2 40		ldx #$40	        LDX #$40
.5aa8	86 04		stx $04		        STX r1L
.5aaa	4c 4b 36	jmp $364b	        JMP j364B
.5aad	85 1a		sta $1a		s5AAD   STA r12L
.5aaf	a9 66		lda #$66	        LDA #>p6600  ;Hi byte of buffer to store file list
.5ab1	85 0f		sta $0f		        STA r6H
.5ab3	a9 00		lda #$00	        LDA #<p6600  ;Lo byte of buffer to store file list
.5ab5	85 0e		sta $0e		        STA r6L
.5ab7	a9 0e		lda #$0e	        LDA #<p010E
.5ab9	85 10		sta $10		        STA r7L      ;File type to search for
.5abb	a9 01		lda #$01	        LDA #>p010E
.5abd	85 11		sta $11		        STA r7H      ;Max # files to search for
.5abf	a9 5b		lda #$5b	        LDA #>p5B08  ;Hi byte of "CONFIGURE" filename
.5ac1	85 17		sta $17		        STA r10H
.5ac3	a9 08		lda #$08	        LDA #<p5B08  ;Lo byte of "CONFIGURE" filename
.5ac5	85 16		sta $16		        STA r10L
.5ac7	20 3b c2	jsr $c23b	        JSR FindFTypes ; Builds a list of files of a particular GEOS type from the current directory
.5aca	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.5acd	a2 05		ldx #$05	        LDX #$05
.5acf	a5 11		lda $11		        LDA r7H
.5ad1	d0 2c		bne $5aff	        BNE b5AFF
.5ad3	a9 66		lda #$66	        LDA #>p6600
.5ad5	85 03		sta $03		        STA r0H      ;Hi byte of filename to open
.5ad7	a9 00		lda #$00	        LDA #<p6600
.5ad9	85 02		sta $02		        STA r0L      ;Lo byte of filename to open
.5adb	20 74 c2	jsr $c274	        JSR OpenRecordFile
.5ade	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.5ae1	a5 1a		lda $1a		        LDA r12L
.5ae3	18		clc		        CLC
.5ae4	69 01		adc #$01	        ADC #$01     ;Increase the record number (read next record)
.5ae6	20 80 c2	jsr $c280	        JSR PointRecord ;     Make a particular record the current record (A=RECORD number)
.5ae9	20 3b 25	jsr $253b	        JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.5aec	a9 0a		lda #$0a	        LDA #>p0AF2
.5aee	85 11		sta $11		        STA r7H      ;read record into $0af2
.5af0	a9 f2		lda #$f2	        LDA #<p0AF2
.5af2	85 10		sta $10		        STA r7L      ;read record into $0af2
.5af4	a9 0d		lda #$0d	        LDA #>p0D80
.5af6	85 07		sta $07		        STA r2H      ;size of the buffer (0d80 = 3456 bytes)
.5af8	a9 80		lda #$80	        LDA #<p0D80
.5afa	85 06		sta $06		        STA r2L      ;size of the buffer (0d80 = 3456 bytes)
.5afc	20 8c c2	jsr $c28c	        JSR ReadRecord ;read the record into $0af2
.5aff	20 3b 25	jsr $253b	b5AFF   JSR s253B    ;transfer X to A, if A=0 return, else pull from stack
.5b02	a9 ff		lda #$ff	        LDA #$FF
.5b04	8d f0 0a	sta $0af0	        STA a0AF0
.5b07	60		rts		        RTS
>5b08	43 6f 6e 66 69 67 75 72		p5B08   .TEXT "Configure", $00
>5b10	65 00
>5b12	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b1a	00 00 00 00			        .BYTE $00,$00,$00,$00
>5b1e	00 00 00			p5B1E   .BYTE $00,$00,$00
>5b21	00 00 00			j5B21   .BYTE $00,$00,$00
>5b24	00 00 00			j5B24   .BYTE $00,$00,$00
>5b27	00 00 00			j5B27   .BYTE $00,$00,$00
>5b2a	00 00 00			j5B2A   .BYTE $00,$00,$00
>5b2d	00 00 00			j5B2D   .BYTE $00,$00,$00
>5b30	00 00 00			j5B30   .BYTE $00,$00,$00
>5b33	00 00 00			j5B33   .BYTE $00,$00,$00
>5b36	00 00 00			j5B36   .BYTE $00,$00,$00
>5b39	00 00 00			j5B39   .BYTE $00,$00,$00
>5b3c	00 00 00			j5B3C   .BYTE $00,$00,$00
>5b3f	00 00 00			j5B3F   .BYTE $00,$00,$00
>5b42	00 00 00 00 00 00 00 00		j5B42   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b4a	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b52	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b5a	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b62	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b6a	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b72	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b7a	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b82	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b8a	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b92	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5b9a	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5ba2	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5baa	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5bb2	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5bba	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5bc2	00 00 00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
>5bca	00 00 00 00 00 00		        .BYTE $00,$00,$00,$00,$00,$00

;******  End of listing
